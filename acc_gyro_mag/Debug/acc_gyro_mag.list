
acc_gyro_mag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a60  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f8  08008c30  08008c30  00009c30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009428  08009428  0000b1e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009428  08009428  0000a428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009430  08009430  0000b1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009430  08009430  0000a430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009434  08009434  0000a434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08009438  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  200001e8  08009620  0000b1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  08009620  0000b44c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6f6  00000000  00000000  0000b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b13  00000000  00000000  0001690e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  00018428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000084d  00000000  00000000  00018ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002234b  00000000  00000000  00019715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e016  00000000  00000000  0003ba60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd46d  00000000  00000000  00049a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00116ee3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004014  00000000  00000000  00116f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0011af3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008c18 	.word	0x08008c18

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08008c18 	.word	0x08008c18

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f80:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f84:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d013      	beq.n	8000fb8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f90:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f94:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000f98:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d00b      	beq.n	8000fb8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000fa0:	e000      	b.n	8000fa4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000fa2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fa4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d0f9      	beq.n	8000fa2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fae:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fb8:	687b      	ldr	r3, [r7, #4]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000fc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fcc:	b094      	sub	sp, #80	@ 0x50
 8000fce:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fd0:	f001 f9e8 	bl	80023a4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fd4:	f000 fb2e 	bl	8001634 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fd8:	f000 fbe4 	bl	80017a4 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000fdc:	f000 fb8a 	bl	80016f4 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 8000fe0:	f000 fbb6 	bl	8001750 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	uint8_t data = 0x00;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	76fb      	strb	r3, [r7, #27]
	I2C_Write(MPU9250_ADDR, MPU9250_PWR_MGMT_1, &data, 1);
 8000fe8:	f107 021b 	add.w	r2, r7, #27
 8000fec:	2301      	movs	r3, #1
 8000fee:	216b      	movs	r1, #107	@ 0x6b
 8000ff0:	20d0      	movs	r0, #208	@ 0xd0
 8000ff2:	f000 ff55 	bl	8001ea0 <I2C_Write>
	MPU9250_Init();
 8000ff6:	f000 fbfd 	bl	80017f4 <MPU9250_Init>
	MPU9250_Calibrate_acc();
 8000ffa:	f000 fc8b 	bl	8001914 <MPU9250_Calibrate_acc>
	MPU9250_Calibrate_gyro(&gyrox_offset, &gyroy_offset, &gyroz_offset);
 8000ffe:	4ae2      	ldr	r2, [pc, #904]	@ (8001388 <main+0x3c0>)
 8001000:	49e2      	ldr	r1, [pc, #904]	@ (800138c <main+0x3c4>)
 8001002:	48e3      	ldr	r0, [pc, #908]	@ (8001390 <main+0x3c8>)
 8001004:	f000 fd20 	bl	8001a48 <MPU9250_Calibrate_gyro>
	MPU9250_Calibrate_mag(&magx_offset, &magy_offset, &magz_offset);
 8001008:	4ae2      	ldr	r2, [pc, #904]	@ (8001394 <main+0x3cc>)
 800100a:	49e3      	ldr	r1, [pc, #908]	@ (8001398 <main+0x3d0>)
 800100c:	48e3      	ldr	r0, [pc, #908]	@ (800139c <main+0x3d4>)
 800100e:	f000 fdb5 	bl	8001b7c <MPU9250_Calibrate_mag>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		MPU9250_Read_Accel(accelData);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4618      	mov	r0, r3
 8001018:	f000 fe7a 	bl	8001d10 <MPU9250_Read_Accel>
		MPU9250_Read_Gyro(gyroData);
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	4618      	mov	r0, r3
 8001022:	f000 fea1 	bl	8001d68 <MPU9250_Read_Gyro>
		MPU9250_Read_Mag(magData);
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	4618      	mov	r0, r3
 800102a:	f000 fec9 	bl	8001dc0 <MPU9250_Read_Mag>
		//processSensorData(accelData, gyroData);
		//MPU9250_Read_Mag(magData);
		accgX = (float)(((accelData[0]/4096.0f) - accx_offset) * 9.80665);
 800102e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001032:	ee07 3a90 	vmov	s15, r3
 8001036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800103a:	eddf 6ad9 	vldr	s13, [pc, #868]	@ 80013a0 <main+0x3d8>
 800103e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001042:	4bd8      	ldr	r3, [pc, #864]	@ (80013a4 <main+0x3dc>)
 8001044:	edd3 7a00 	vldr	s15, [r3]
 8001048:	ee77 7a67 	vsub.f32	s15, s14, s15
 800104c:	ee17 0a90 	vmov	r0, s15
 8001050:	f7ff fa9a 	bl	8000588 <__aeabi_f2d>
 8001054:	a3ca      	add	r3, pc, #808	@ (adr r3, 8001380 <main+0x3b8>)
 8001056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105a:	f7ff faed 	bl	8000638 <__aeabi_dmul>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4610      	mov	r0, r2
 8001064:	4619      	mov	r1, r3
 8001066:	f7ff fdbf 	bl	8000be8 <__aeabi_d2f>
 800106a:	4603      	mov	r3, r0
 800106c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		accgY = (float)(((accelData[1]/4096.0f) - accy_offset) * 9.80665);
 800106e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800107a:	eddf 6ac9 	vldr	s13, [pc, #804]	@ 80013a0 <main+0x3d8>
 800107e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001082:	4bc9      	ldr	r3, [pc, #804]	@ (80013a8 <main+0x3e0>)
 8001084:	edd3 7a00 	vldr	s15, [r3]
 8001088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800108c:	ee17 0a90 	vmov	r0, s15
 8001090:	f7ff fa7a 	bl	8000588 <__aeabi_f2d>
 8001094:	a3ba      	add	r3, pc, #744	@ (adr r3, 8001380 <main+0x3b8>)
 8001096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109a:	f7ff facd 	bl	8000638 <__aeabi_dmul>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	4610      	mov	r0, r2
 80010a4:	4619      	mov	r1, r3
 80010a6:	f7ff fd9f 	bl	8000be8 <__aeabi_d2f>
 80010aa:	4603      	mov	r3, r0
 80010ac:	63bb      	str	r3, [r7, #56]	@ 0x38
		accgZ = (float)(((accelData[2]/4096.0f) - accz_offset) * 9.80665);
 80010ae:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80010b2:	ee07 3a90 	vmov	s15, r3
 80010b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ba:	eddf 6ab9 	vldr	s13, [pc, #740]	@ 80013a0 <main+0x3d8>
 80010be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010c2:	4bba      	ldr	r3, [pc, #744]	@ (80013ac <main+0x3e4>)
 80010c4:	edd3 7a00 	vldr	s15, [r3]
 80010c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010cc:	ee17 0a90 	vmov	r0, s15
 80010d0:	f7ff fa5a 	bl	8000588 <__aeabi_f2d>
 80010d4:	a3aa      	add	r3, pc, #680	@ (adr r3, 8001380 <main+0x3b8>)
 80010d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010da:	f7ff faad 	bl	8000638 <__aeabi_dmul>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4610      	mov	r0, r2
 80010e4:	4619      	mov	r1, r3
 80010e6:	f7ff fd7f 	bl	8000be8 <__aeabi_d2f>
 80010ea:	4603      	mov	r3, r0
 80010ec:	637b      	str	r3, [r7, #52]	@ 0x34

		gyroX = (float)((gyroData[0]/GYRO_SENSITIVITY)-gyrox_offset);
 80010ee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010f2:	ee07 3a90 	vmov	s15, r3
 80010f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010fa:	eddf 6aad 	vldr	s13, [pc, #692]	@ 80013b0 <main+0x3e8>
 80010fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001102:	4ba3      	ldr	r3, [pc, #652]	@ (8001390 <main+0x3c8>)
 8001104:	edd3 7a00 	vldr	s15, [r3]
 8001108:	ee77 7a67 	vsub.f32	s15, s14, s15
 800110c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		gyroY = (float)((gyroData[1]/GYRO_SENSITIVITY)-gyroy_offset);
 8001110:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001114:	ee07 3a90 	vmov	s15, r3
 8001118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800111c:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 80013b0 <main+0x3e8>
 8001120:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001124:	4b99      	ldr	r3, [pc, #612]	@ (800138c <main+0x3c4>)
 8001126:	edd3 7a00 	vldr	s15, [r3]
 800112a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800112e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		gyroZ = (float)((gyroData[2]/GYRO_SENSITIVITY)-gyroz_offset);
 8001132:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001136:	ee07 3a90 	vmov	s15, r3
 800113a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113e:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 80013b0 <main+0x3e8>
 8001142:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001146:	4b90      	ldr	r3, [pc, #576]	@ (8001388 <main+0x3c0>)
 8001148:	edd3 7a00 	vldr	s15, [r3]
 800114c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001150:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

		magX = ((float)magData[0] - magx_offset) * 1.0f * 0.15f;// 0.15 µT per LSB for 16-bit mode
 8001154:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001158:	ee07 3a90 	vmov	s15, r3
 800115c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001160:	4b8e      	ldr	r3, [pc, #568]	@ (800139c <main+0x3d4>)
 8001162:	edd3 7a00 	vldr	s15, [r3]
 8001166:	ee77 7a67 	vsub.f32	s15, s14, s15
 800116a:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 80013b4 <main+0x3ec>
 800116e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001172:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		magY = ((float)magData[1] - magy_offset) * 1.0f * 0.15f;
 8001176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800117a:	ee07 3a90 	vmov	s15, r3
 800117e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001182:	4b85      	ldr	r3, [pc, #532]	@ (8001398 <main+0x3d0>)
 8001184:	edd3 7a00 	vldr	s15, [r3]
 8001188:	ee77 7a67 	vsub.f32	s15, s14, s15
 800118c:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 80013b4 <main+0x3ec>
 8001190:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001194:	edc7 7a08 	vstr	s15, [r7, #32]
		magZ = ((float)magData[2] - magz_offset) * 1.0f * 0.15f;
 8001198:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a4:	4b7b      	ldr	r3, [pc, #492]	@ (8001394 <main+0x3cc>)
 80011a6:	edd3 7a00 	vldr	s15, [r3]
 80011aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ae:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 80013b4 <main+0x3ec>
 80011b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b6:	edc7 7a07 	vstr	s15, [r7, #28]

		//printf("Ax: %f m/ss Ay: %f m/ss, Az: %f m/ss \n", accgX, accgY, accgZ);
		//printf("Gx: %f dps Gy: %f dps Gz: %f dps \n", gyroX, gyroY, gyroZ);
		//roll = atan2(accgY, accgZ) * rad_to_deg;
		roll = atan2(accgY, sqrt(accgX*accgX + accgZ*accgZ)) * rad_to_deg;
 80011ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80011bc:	f7ff f9e4 	bl	8000588 <__aeabi_f2d>
 80011c0:	4604      	mov	r4, r0
 80011c2:	460d      	mov	r5, r1
 80011c4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80011c8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80011cc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80011d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80011d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d8:	ee17 0a90 	vmov	r0, s15
 80011dc:	f7ff f9d4 	bl	8000588 <__aeabi_f2d>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	ec43 2b10 	vmov	d0, r2, r3
 80011e8:	f006 f92a 	bl	8007440 <sqrt>
 80011ec:	eeb0 7a40 	vmov.f32	s14, s0
 80011f0:	eef0 7a60 	vmov.f32	s15, s1
 80011f4:	eeb0 1a47 	vmov.f32	s2, s14
 80011f8:	eef0 1a67 	vmov.f32	s3, s15
 80011fc:	ec45 4b10 	vmov	d0, r4, r5
 8001200:	f006 f91c 	bl	800743c <atan2>
 8001204:	ec55 4b10 	vmov	r4, r5, d0
 8001208:	4b6b      	ldr	r3, [pc, #428]	@ (80013b8 <main+0x3f0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f9bb 	bl	8000588 <__aeabi_f2d>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4620      	mov	r0, r4
 8001218:	4629      	mov	r1, r5
 800121a:	f7ff fa0d 	bl	8000638 <__aeabi_dmul>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	f7ff fcdf 	bl	8000be8 <__aeabi_d2f>
 800122a:	4603      	mov	r3, r0
 800122c:	4a63      	ldr	r2, [pc, #396]	@ (80013bc <main+0x3f4>)
 800122e:	6013      	str	r3, [r2, #0]
		pitch = atan2(-accgX, sqrt(accgY*accgY + accgZ*accgZ)) * rad_to_deg;
 8001230:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001234:	eef1 7a67 	vneg.f32	s15, s15
 8001238:	ee17 3a90 	vmov	r3, s15
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff f9a3 	bl	8000588 <__aeabi_f2d>
 8001242:	4604      	mov	r4, r0
 8001244:	460d      	mov	r5, r1
 8001246:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800124a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800124e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001252:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125a:	ee17 0a90 	vmov	r0, s15
 800125e:	f7ff f993 	bl	8000588 <__aeabi_f2d>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	ec43 2b10 	vmov	d0, r2, r3
 800126a:	f006 f8e9 	bl	8007440 <sqrt>
 800126e:	eeb0 7a40 	vmov.f32	s14, s0
 8001272:	eef0 7a60 	vmov.f32	s15, s1
 8001276:	eeb0 1a47 	vmov.f32	s2, s14
 800127a:	eef0 1a67 	vmov.f32	s3, s15
 800127e:	ec45 4b10 	vmov	d0, r4, r5
 8001282:	f006 f8db 	bl	800743c <atan2>
 8001286:	ec55 4b10 	vmov	r4, r5, d0
 800128a:	4b4b      	ldr	r3, [pc, #300]	@ (80013b8 <main+0x3f0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f97a 	bl	8000588 <__aeabi_f2d>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4620      	mov	r0, r4
 800129a:	4629      	mov	r1, r5
 800129c:	f7ff f9cc 	bl	8000638 <__aeabi_dmul>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f7ff fc9e 	bl	8000be8 <__aeabi_d2f>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4a44      	ldr	r2, [pc, #272]	@ (80013c0 <main+0x3f8>)
 80012b0:	6013      	str	r3, [r2, #0]
		Mx = magX*cos(pitch) + magZ*sin(pitch);
 80012b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80012b4:	f7ff f968 	bl	8000588 <__aeabi_f2d>
 80012b8:	4604      	mov	r4, r0
 80012ba:	460d      	mov	r5, r1
 80012bc:	4b40      	ldr	r3, [pc, #256]	@ (80013c0 <main+0x3f8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f961 	bl	8000588 <__aeabi_f2d>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	ec43 2b10 	vmov	d0, r2, r3
 80012ce:	f006 f8e3 	bl	8007498 <cos>
 80012d2:	ec53 2b10 	vmov	r2, r3, d0
 80012d6:	4620      	mov	r0, r4
 80012d8:	4629      	mov	r1, r5
 80012da:	f7ff f9ad 	bl	8000638 <__aeabi_dmul>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4690      	mov	r8, r2
 80012e4:	4699      	mov	r9, r3
 80012e6:	69f8      	ldr	r0, [r7, #28]
 80012e8:	f7ff f94e 	bl	8000588 <__aeabi_f2d>
 80012ec:	4604      	mov	r4, r0
 80012ee:	460d      	mov	r5, r1
 80012f0:	4b33      	ldr	r3, [pc, #204]	@ (80013c0 <main+0x3f8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f947 	bl	8000588 <__aeabi_f2d>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	ec43 2b10 	vmov	d0, r2, r3
 8001302:	f006 f91d 	bl	8007540 <sin>
 8001306:	ec53 2b10 	vmov	r2, r3, d0
 800130a:	4620      	mov	r0, r4
 800130c:	4629      	mov	r1, r5
 800130e:	f7ff f993 	bl	8000638 <__aeabi_dmul>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4640      	mov	r0, r8
 8001318:	4649      	mov	r1, r9
 800131a:	f7fe ffd7 	bl	80002cc <__adddf3>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4610      	mov	r0, r2
 8001324:	4619      	mov	r1, r3
 8001326:	f7ff fc5f 	bl	8000be8 <__aeabi_d2f>
 800132a:	4603      	mov	r3, r0
 800132c:	4a25      	ldr	r2, [pc, #148]	@ (80013c4 <main+0x3fc>)
 800132e:	6013      	str	r3, [r2, #0]
		My = magX*sin(roll)*sin(pitch) + magY*cos(roll) - magZ*sin(roll)*cos(pitch);
 8001330:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001332:	f7ff f929 	bl	8000588 <__aeabi_f2d>
 8001336:	4604      	mov	r4, r0
 8001338:	460d      	mov	r5, r1
 800133a:	4b20      	ldr	r3, [pc, #128]	@ (80013bc <main+0x3f4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f922 	bl	8000588 <__aeabi_f2d>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	ec43 2b10 	vmov	d0, r2, r3
 800134c:	f006 f8f8 	bl	8007540 <sin>
 8001350:	ec53 2b10 	vmov	r2, r3, d0
 8001354:	4620      	mov	r0, r4
 8001356:	4629      	mov	r1, r5
 8001358:	f7ff f96e 	bl	8000638 <__aeabi_dmul>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4614      	mov	r4, r2
 8001362:	461d      	mov	r5, r3
 8001364:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <main+0x3f8>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f90d 	bl	8000588 <__aeabi_f2d>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	ec43 2b10 	vmov	d0, r2, r3
 8001376:	f006 f8e3 	bl	8007540 <sin>
 800137a:	e025      	b.n	80013c8 <main+0x400>
 800137c:	f3af 8000 	nop.w
 8001380:	3a92a305 	.word	0x3a92a305
 8001384:	40239d01 	.word	0x40239d01
 8001388:	200002b4 	.word	0x200002b4
 800138c:	200002b0 	.word	0x200002b0
 8001390:	200002ac 	.word	0x200002ac
 8001394:	200002c0 	.word	0x200002c0
 8001398:	200002bc 	.word	0x200002bc
 800139c:	200002b8 	.word	0x200002b8
 80013a0:	45800000 	.word	0x45800000
 80013a4:	200002a0 	.word	0x200002a0
 80013a8:	200002a4 	.word	0x200002a4
 80013ac:	200002a8 	.word	0x200002a8
 80013b0:	42830000 	.word	0x42830000
 80013b4:	3e19999a 	.word	0x3e19999a
 80013b8:	20000000 	.word	0x20000000
 80013bc:	200002c8 	.word	0x200002c8
 80013c0:	200002c4 	.word	0x200002c4
 80013c4:	200002d0 	.word	0x200002d0
 80013c8:	ec53 2b10 	vmov	r2, r3, d0
 80013cc:	4620      	mov	r0, r4
 80013ce:	4629      	mov	r1, r5
 80013d0:	f7ff f932 	bl	8000638 <__aeabi_dmul>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4690      	mov	r8, r2
 80013da:	4699      	mov	r9, r3
 80013dc:	6a38      	ldr	r0, [r7, #32]
 80013de:	f7ff f8d3 	bl	8000588 <__aeabi_f2d>
 80013e2:	4604      	mov	r4, r0
 80013e4:	460d      	mov	r5, r1
 80013e6:	4b84      	ldr	r3, [pc, #528]	@ (80015f8 <main+0x630>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f8cc 	bl	8000588 <__aeabi_f2d>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	ec43 2b10 	vmov	d0, r2, r3
 80013f8:	f006 f84e 	bl	8007498 <cos>
 80013fc:	ec53 2b10 	vmov	r2, r3, d0
 8001400:	4620      	mov	r0, r4
 8001402:	4629      	mov	r1, r5
 8001404:	f7ff f918 	bl	8000638 <__aeabi_dmul>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4640      	mov	r0, r8
 800140e:	4649      	mov	r1, r9
 8001410:	f7fe ff5c 	bl	80002cc <__adddf3>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4690      	mov	r8, r2
 800141a:	4699      	mov	r9, r3
 800141c:	69f8      	ldr	r0, [r7, #28]
 800141e:	f7ff f8b3 	bl	8000588 <__aeabi_f2d>
 8001422:	4604      	mov	r4, r0
 8001424:	460d      	mov	r5, r1
 8001426:	4b74      	ldr	r3, [pc, #464]	@ (80015f8 <main+0x630>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff f8ac 	bl	8000588 <__aeabi_f2d>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	ec43 2b10 	vmov	d0, r2, r3
 8001438:	f006 f882 	bl	8007540 <sin>
 800143c:	ec53 2b10 	vmov	r2, r3, d0
 8001440:	4620      	mov	r0, r4
 8001442:	4629      	mov	r1, r5
 8001444:	f7ff f8f8 	bl	8000638 <__aeabi_dmul>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4614      	mov	r4, r2
 800144e:	461d      	mov	r5, r3
 8001450:	4b6a      	ldr	r3, [pc, #424]	@ (80015fc <main+0x634>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff f897 	bl	8000588 <__aeabi_f2d>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	ec43 2b10 	vmov	d0, r2, r3
 8001462:	f006 f819 	bl	8007498 <cos>
 8001466:	ec53 2b10 	vmov	r2, r3, d0
 800146a:	4620      	mov	r0, r4
 800146c:	4629      	mov	r1, r5
 800146e:	f7ff f8e3 	bl	8000638 <__aeabi_dmul>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4640      	mov	r0, r8
 8001478:	4649      	mov	r1, r9
 800147a:	f7fe ff25 	bl	80002c8 <__aeabi_dsub>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff fbaf 	bl	8000be8 <__aeabi_d2f>
 800148a:	4603      	mov	r3, r0
 800148c:	4a5c      	ldr	r2, [pc, #368]	@ (8001600 <main+0x638>)
 800148e:	6013      	str	r3, [r2, #0]
		yaw = atan2(-My, Mx) * rad_to_deg;//calculate yaw angle with tilt compensation
 8001490:	4b5b      	ldr	r3, [pc, #364]	@ (8001600 <main+0x638>)
 8001492:	edd3 7a00 	vldr	s15, [r3]
 8001496:	eef1 7a67 	vneg.f32	s15, s15
 800149a:	ee17 3a90 	vmov	r3, s15
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff f872 	bl	8000588 <__aeabi_f2d>
 80014a4:	4604      	mov	r4, r0
 80014a6:	460d      	mov	r5, r1
 80014a8:	4b56      	ldr	r3, [pc, #344]	@ (8001604 <main+0x63c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f86b 	bl	8000588 <__aeabi_f2d>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	ec43 2b11 	vmov	d1, r2, r3
 80014ba:	ec45 4b10 	vmov	d0, r4, r5
 80014be:	f005 ffbd 	bl	800743c <atan2>
 80014c2:	ec55 4b10 	vmov	r4, r5, d0
 80014c6:	4b50      	ldr	r3, [pc, #320]	@ (8001608 <main+0x640>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff f85c 	bl	8000588 <__aeabi_f2d>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4620      	mov	r0, r4
 80014d6:	4629      	mov	r1, r5
 80014d8:	f7ff f8ae 	bl	8000638 <__aeabi_dmul>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4610      	mov	r0, r2
 80014e2:	4619      	mov	r1, r3
 80014e4:	f7ff fb80 	bl	8000be8 <__aeabi_d2f>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4a48      	ldr	r2, [pc, #288]	@ (800160c <main+0x644>)
 80014ec:	6013      	str	r3, [r2, #0]
		if(yaw < 0)
 80014ee:	4b47      	ldr	r3, [pc, #284]	@ (800160c <main+0x644>)
 80014f0:	edd3 7a00 	vldr	s15, [r3]
 80014f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fc:	d509      	bpl.n	8001512 <main+0x54a>
			yaw += 360;//ensure readings are between 0 and 360 degrees
 80014fe:	4b43      	ldr	r3, [pc, #268]	@ (800160c <main+0x644>)
 8001500:	edd3 7a00 	vldr	s15, [r3]
 8001504:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001610 <main+0x648>
 8001508:	ee77 7a87 	vadd.f32	s15, s15, s14
 800150c:	4b3f      	ldr	r3, [pc, #252]	@ (800160c <main+0x644>)
 800150e:	edc3 7a00 	vstr	s15, [r3]

		kalman_1d(KalmanAngleRoll, KalmanUncertaintyRoll, gyroX, roll);
 8001512:	4b40      	ldr	r3, [pc, #256]	@ (8001614 <main+0x64c>)
 8001514:	edd3 7a00 	vldr	s15, [r3]
 8001518:	4b3f      	ldr	r3, [pc, #252]	@ (8001618 <main+0x650>)
 800151a:	ed93 7a00 	vldr	s14, [r3]
 800151e:	4b36      	ldr	r3, [pc, #216]	@ (80015f8 <main+0x630>)
 8001520:	edd3 6a00 	vldr	s13, [r3]
 8001524:	eef0 1a66 	vmov.f32	s3, s13
 8001528:	ed97 1a0c 	vldr	s2, [r7, #48]	@ 0x30
 800152c:	eef0 0a47 	vmov.f32	s1, s14
 8001530:	eeb0 0a67 	vmov.f32	s0, s15
 8001534:	f000 fcd4 	bl	8001ee0 <kalman_1d>
		KalmanAngleRoll = Kalman1DOutput[0];
 8001538:	4b38      	ldr	r3, [pc, #224]	@ (800161c <main+0x654>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a35      	ldr	r2, [pc, #212]	@ (8001614 <main+0x64c>)
 800153e:	6013      	str	r3, [r2, #0]
		KalmanUncertaintyRoll = Kalman1DOutput[1];
 8001540:	4b36      	ldr	r3, [pc, #216]	@ (800161c <main+0x654>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	4a34      	ldr	r2, [pc, #208]	@ (8001618 <main+0x650>)
 8001546:	6013      	str	r3, [r2, #0]

		kalman_1d(KalmanAnglePitch, KalmanUncertaintyPitch, gyroY, pitch);
 8001548:	4b35      	ldr	r3, [pc, #212]	@ (8001620 <main+0x658>)
 800154a:	edd3 7a00 	vldr	s15, [r3]
 800154e:	4b35      	ldr	r3, [pc, #212]	@ (8001624 <main+0x65c>)
 8001550:	ed93 7a00 	vldr	s14, [r3]
 8001554:	4b29      	ldr	r3, [pc, #164]	@ (80015fc <main+0x634>)
 8001556:	edd3 6a00 	vldr	s13, [r3]
 800155a:	eef0 1a66 	vmov.f32	s3, s13
 800155e:	ed97 1a0b 	vldr	s2, [r7, #44]	@ 0x2c
 8001562:	eef0 0a47 	vmov.f32	s1, s14
 8001566:	eeb0 0a67 	vmov.f32	s0, s15
 800156a:	f000 fcb9 	bl	8001ee0 <kalman_1d>
		KalmanAnglePitch = Kalman1DOutput[0];
 800156e:	4b2b      	ldr	r3, [pc, #172]	@ (800161c <main+0x654>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a2b      	ldr	r2, [pc, #172]	@ (8001620 <main+0x658>)
 8001574:	6013      	str	r3, [r2, #0]
		KalmanUncertaintyPitch = Kalman1DOutput[1];
 8001576:	4b29      	ldr	r3, [pc, #164]	@ (800161c <main+0x654>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	4a2a      	ldr	r2, [pc, #168]	@ (8001624 <main+0x65c>)
 800157c:	6013      	str	r3, [r2, #0]

		kalman_1d(KalmanAngleYaw, KalmanUncertaintyYaw, gyroZ, yaw);
 800157e:	4b2a      	ldr	r3, [pc, #168]	@ (8001628 <main+0x660>)
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	4b29      	ldr	r3, [pc, #164]	@ (800162c <main+0x664>)
 8001586:	ed93 7a00 	vldr	s14, [r3]
 800158a:	4b20      	ldr	r3, [pc, #128]	@ (800160c <main+0x644>)
 800158c:	edd3 6a00 	vldr	s13, [r3]
 8001590:	eef0 1a66 	vmov.f32	s3, s13
 8001594:	ed97 1a0a 	vldr	s2, [r7, #40]	@ 0x28
 8001598:	eef0 0a47 	vmov.f32	s1, s14
 800159c:	eeb0 0a67 	vmov.f32	s0, s15
 80015a0:	f000 fc9e 	bl	8001ee0 <kalman_1d>
		KalmanAngleYaw = Kalman1DOutput[0];
 80015a4:	4b1d      	ldr	r3, [pc, #116]	@ (800161c <main+0x654>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001628 <main+0x660>)
 80015aa:	6013      	str	r3, [r2, #0]
		KalmanUncertaintyYaw = Kalman1DOutput[1];
 80015ac:	4b1b      	ldr	r3, [pc, #108]	@ (800161c <main+0x654>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	4a1e      	ldr	r2, [pc, #120]	@ (800162c <main+0x664>)
 80015b2:	6013      	str	r3, [r2, #0]

		printf("Kalman -> KRoll: %f deg Kpitch: %f deg Kyaw: %f deg\n", KalmanAngleRoll, KalmanAnglePitch, KalmanAngleYaw);
 80015b4:	4b17      	ldr	r3, [pc, #92]	@ (8001614 <main+0x64c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe ffe5 	bl	8000588 <__aeabi_f2d>
 80015be:	4680      	mov	r8, r0
 80015c0:	4689      	mov	r9, r1
 80015c2:	4b17      	ldr	r3, [pc, #92]	@ (8001620 <main+0x658>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe ffde 	bl	8000588 <__aeabi_f2d>
 80015cc:	4604      	mov	r4, r0
 80015ce:	460d      	mov	r5, r1
 80015d0:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <main+0x660>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ffd7 	bl	8000588 <__aeabi_f2d>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80015e2:	e9cd 4500 	strd	r4, r5, [sp]
 80015e6:	4642      	mov	r2, r8
 80015e8:	464b      	mov	r3, r9
 80015ea:	4811      	ldr	r0, [pc, #68]	@ (8001630 <main+0x668>)
 80015ec:	f003 ff4e 	bl	800548c <iprintf>
		gyrRoll += (gyroX * DT);
		gyrYaw += (gyroZ * DT);
		printf("Acc -> AccRoll: %f deg  AccPitch: %f deg AccYaw: %f deg \n", roll, pitch, yaw);
		printf("Gyro -> GRoll: %f deg  GPitch: %f deg GYaw: %f deg \n", gyrRoll, gyrPitch, gyrYaw);
		//printf("Mag -> X: %f uT Y: %f uT Z: %f uT \n", magX, magY, magZ);*/
		HAL_Delay(4); //4ms loop
 80015f0:	2004      	movs	r0, #4
 80015f2:	f000 ff49 	bl	8002488 <HAL_Delay>
		MPU9250_Read_Accel(accelData);
 80015f6:	e50c      	b.n	8001012 <main+0x4a>
 80015f8:	200002c8 	.word	0x200002c8
 80015fc:	200002c4 	.word	0x200002c4
 8001600:	200002d4 	.word	0x200002d4
 8001604:	200002d0 	.word	0x200002d0
 8001608:	20000000 	.word	0x20000000
 800160c:	200002cc 	.word	0x200002cc
 8001610:	43b40000 	.word	0x43b40000
 8001614:	200002e0 	.word	0x200002e0
 8001618:	200002ec 	.word	0x200002ec
 800161c:	200002d8 	.word	0x200002d8
 8001620:	200002e4 	.word	0x200002e4
 8001624:	200002f0 	.word	0x200002f0
 8001628:	200002e8 	.word	0x200002e8
 800162c:	200002f4 	.word	0x200002f4
 8001630:	08008c30 	.word	0x08008c30

08001634 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b094      	sub	sp, #80	@ 0x50
 8001638:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	2234      	movs	r2, #52	@ 0x34
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f004 f86a 	bl	800571c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001658:	2300      	movs	r3, #0
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	4b23      	ldr	r3, [pc, #140]	@ (80016ec <SystemClock_Config+0xb8>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001660:	4a22      	ldr	r2, [pc, #136]	@ (80016ec <SystemClock_Config+0xb8>)
 8001662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001666:	6413      	str	r3, [r2, #64]	@ 0x40
 8001668:	4b20      	ldr	r3, [pc, #128]	@ (80016ec <SystemClock_Config+0xb8>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001674:	2300      	movs	r3, #0
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	4b1d      	ldr	r3, [pc, #116]	@ (80016f0 <SystemClock_Config+0xbc>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001680:	4a1b      	ldr	r2, [pc, #108]	@ (80016f0 <SystemClock_Config+0xbc>)
 8001682:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	4b19      	ldr	r3, [pc, #100]	@ (80016f0 <SystemClock_Config+0xbc>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001690:	603b      	str	r3, [r7, #0]
 8001692:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001694:	2302      	movs	r3, #2
 8001696:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001698:	2301      	movs	r3, #1
 800169a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800169c:	2310      	movs	r3, #16
 800169e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a4:	f107 031c 	add.w	r3, r7, #28
 80016a8:	4618      	mov	r0, r3
 80016aa:	f002 fc73 	bl	8003f94 <HAL_RCC_OscConfig>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <SystemClock_Config+0x84>
	{
		Error_Handler();
 80016b4:	f000 fca2 	bl	8001ffc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b8:	230f      	movs	r3, #15
 80016ba:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c0:	2300      	movs	r3, #0
 80016c2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016cc:	f107 0308 	add.w	r3, r7, #8
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f002 f99a 	bl	8003a0c <HAL_RCC_ClockConfig>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <SystemClock_Config+0xae>
	{
		Error_Handler();
 80016de:	f000 fc8d 	bl	8001ffc <Error_Handler>
	}
}
 80016e2:	bf00      	nop
 80016e4:	3750      	adds	r7, #80	@ 0x50
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40007000 	.word	0x40007000

080016f4 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80016f8:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <MX_I2C1_Init+0x50>)
 80016fa:	4a13      	ldr	r2, [pc, #76]	@ (8001748 <MX_I2C1_Init+0x54>)
 80016fc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80016fe:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001700:	4a12      	ldr	r2, [pc, #72]	@ (800174c <MX_I2C1_Init+0x58>)
 8001702:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001704:	4b0f      	ldr	r3, [pc, #60]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800170a:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <MX_I2C1_Init+0x50>)
 800170c:	2200      	movs	r2, #0
 800170e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001710:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001712:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001716:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001718:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <MX_I2C1_Init+0x50>)
 800171a:	2200      	movs	r2, #0
 800171c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800171e:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001724:	4b07      	ldr	r3, [pc, #28]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <MX_I2C1_Init+0x50>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001730:	4804      	ldr	r0, [pc, #16]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001732:	f001 f947 	bl	80029c4 <HAL_I2C_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 800173c:	f000 fc5e 	bl	8001ffc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000204 	.word	0x20000204
 8001748:	40005400 	.word	0x40005400
 800174c:	00061a80 	.word	0x00061a80

08001750 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001754:	4b11      	ldr	r3, [pc, #68]	@ (800179c <MX_USART2_UART_Init+0x4c>)
 8001756:	4a12      	ldr	r2, [pc, #72]	@ (80017a0 <MX_USART2_UART_Init+0x50>)
 8001758:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800175a:	4b10      	ldr	r3, [pc, #64]	@ (800179c <MX_USART2_UART_Init+0x4c>)
 800175c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001760:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001762:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <MX_USART2_UART_Init+0x4c>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001768:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <MX_USART2_UART_Init+0x4c>)
 800176a:	2200      	movs	r2, #0
 800176c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800176e:	4b0b      	ldr	r3, [pc, #44]	@ (800179c <MX_USART2_UART_Init+0x4c>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001774:	4b09      	ldr	r3, [pc, #36]	@ (800179c <MX_USART2_UART_Init+0x4c>)
 8001776:	220c      	movs	r2, #12
 8001778:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177a:	4b08      	ldr	r3, [pc, #32]	@ (800179c <MX_USART2_UART_Init+0x4c>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001780:	4b06      	ldr	r3, [pc, #24]	@ (800179c <MX_USART2_UART_Init+0x4c>)
 8001782:	2200      	movs	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001786:	4805      	ldr	r0, [pc, #20]	@ (800179c <MX_USART2_UART_Init+0x4c>)
 8001788:	f002 fea2 	bl	80044d0 <HAL_UART_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8001792:	f000 fc33 	bl	8001ffc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000258 	.word	0x20000258
 80017a0:	40004400 	.word	0x40004400

080017a4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	4b10      	ldr	r3, [pc, #64]	@ (80017f0 <MX_GPIO_Init+0x4c>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	4a0f      	ldr	r2, [pc, #60]	@ (80017f0 <MX_GPIO_Init+0x4c>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ba:	4b0d      	ldr	r3, [pc, #52]	@ (80017f0 <MX_GPIO_Init+0x4c>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	603b      	str	r3, [r7, #0]
 80017ca:	4b09      	ldr	r3, [pc, #36]	@ (80017f0 <MX_GPIO_Init+0x4c>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	4a08      	ldr	r2, [pc, #32]	@ (80017f0 <MX_GPIO_Init+0x4c>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d6:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <MX_GPIO_Init+0x4c>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800

080017f4 <MPU9250_Init>:

/* USER CODE BEGIN 4 */
void MPU9250_Init(void) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
	uint8_t check, data;
	I2C_Read(MPU9250_ADDR, MPU9250_WHO_AM_I, &check, 1);
 80017fa:	1dfa      	adds	r2, r7, #7
 80017fc:	2301      	movs	r3, #1
 80017fe:	2175      	movs	r1, #117	@ 0x75
 8001800:	20d0      	movs	r0, #208	@ 0xd0
 8001802:	f000 fb2d 	bl	8001e60 <I2C_Read>
	if (check == 0x71) {
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	2b71      	cmp	r3, #113	@ 0x71
 800180a:	d10b      	bne.n	8001824 <MPU9250_Init+0x30>
		printf("MPU found\n");
 800180c:	483c      	ldr	r0, [pc, #240]	@ (8001900 <MPU9250_Init+0x10c>)
 800180e:	f003 fea5 	bl	800555c <puts>
		data = 0x00;
 8001812:	2300      	movs	r3, #0
 8001814:	71bb      	strb	r3, [r7, #6]
		I2C_Write(MPU9250_ADDR, MPU9250_PWR_MGMT_1, &data, 1);
 8001816:	1dba      	adds	r2, r7, #6
 8001818:	2301      	movs	r3, #1
 800181a:	216b      	movs	r1, #107	@ 0x6b
 800181c:	20d0      	movs	r0, #208	@ 0xd0
 800181e:	f000 fb3f 	bl	8001ea0 <I2C_Write>
 8001822:	e002      	b.n	800182a <MPU9250_Init+0x36>
	}
	else{
		printf("No device found\n");
 8001824:	4837      	ldr	r0, [pc, #220]	@ (8001904 <MPU9250_Init+0x110>)
 8001826:	f003 fe99 	bl	800555c <puts>
	}

	data = 0x10;
 800182a:	2310      	movs	r3, #16
 800182c:	71bb      	strb	r3, [r7, #6]
	I2C_Write(MPU9250_ADDR, ACC_CTRL_REG, &data, 1); //set 8g full scale for accelerometer
 800182e:	1dba      	adds	r2, r7, #6
 8001830:	2301      	movs	r3, #1
 8001832:	211c      	movs	r1, #28
 8001834:	20d0      	movs	r0, #208	@ 0xd0
 8001836:	f000 fb33 	bl	8001ea0 <I2C_Write>
	data = 0x08;
 800183a:	2308      	movs	r3, #8
 800183c:	71bb      	strb	r3, [r7, #6]
	I2C_Write(MPU9250_ADDR, GYRO_CTRL_REG, &data, 1); //set 500dps full scale for gyro
 800183e:	1dba      	adds	r2, r7, #6
 8001840:	2301      	movs	r3, #1
 8001842:	211b      	movs	r1, #27
 8001844:	20d0      	movs	r0, #208	@ 0xd0
 8001846:	f000 fb2b 	bl	8001ea0 <I2C_Write>
	data = 0x05;
 800184a:	2305      	movs	r3, #5
 800184c:	71bb      	strb	r3, [r7, #6]
	I2C_Write(MPU9250_ADDR, ACC_CTRL_REG2, &data, 1); //set 10Hz (former 5) low pass filter for accel
 800184e:	1dba      	adds	r2, r7, #6
 8001850:	2301      	movs	r3, #1
 8001852:	211d      	movs	r1, #29
 8001854:	20d0      	movs	r0, #208	@ 0xd0
 8001856:	f000 fb23 	bl	8001ea0 <I2C_Write>
	data = 0x05;
 800185a:	2305      	movs	r3, #5
 800185c:	71bb      	strb	r3, [r7, #6]
	I2C_Write(MPU9250_ADDR, CONFIG_REG, &data, 1); //set 10Hz low pass filter for gyro
 800185e:	1dba      	adds	r2, r7, #6
 8001860:	2301      	movs	r3, #1
 8001862:	211a      	movs	r1, #26
 8001864:	20d0      	movs	r0, #208	@ 0xd0
 8001866:	f000 fb1b 	bl	8001ea0 <I2C_Write>
	data = 0x00;
 800186a:	2300      	movs	r3, #0
 800186c:	71bb      	strb	r3, [r7, #6]
	I2C_Write(MPU9250_ADDR, USER_CTRL, &data, 1); // Disable I2C master mode to allow bypass
 800186e:	1dba      	adds	r2, r7, #6
 8001870:	2301      	movs	r3, #1
 8001872:	216a      	movs	r1, #106	@ 0x6a
 8001874:	20d0      	movs	r0, #208	@ 0xd0
 8001876:	f000 fb13 	bl	8001ea0 <I2C_Write>
	data = 0x02;
 800187a:	2302      	movs	r3, #2
 800187c:	71bb      	strb	r3, [r7, #6]
	I2C_Write(MPU9250_ADDR, INT_PIN_CFG, &data, 1); //enable bypass to acces magnetometer
 800187e:	1dba      	adds	r2, r7, #6
 8001880:	2301      	movs	r3, #1
 8001882:	2137      	movs	r1, #55	@ 0x37
 8001884:	20d0      	movs	r0, #208	@ 0xd0
 8001886:	f000 fb0b 	bl	8001ea0 <I2C_Write>
	data = 0x16;
 800188a:	2316      	movs	r3, #22
 800188c:	71bb      	strb	r3, [r7, #6]
	data = 0x01;
 800188e:	2301      	movs	r3, #1
 8001890:	71bb      	strb	r3, [r7, #6]
	I2C_Write(AK8963_ADDR, 0x0B, &data, 1); // Reset AK8963 (PWR_MGMT)
 8001892:	1dba      	adds	r2, r7, #6
 8001894:	2301      	movs	r3, #1
 8001896:	210b      	movs	r1, #11
 8001898:	2018      	movs	r0, #24
 800189a:	f000 fb01 	bl	8001ea0 <I2C_Write>
	HAL_Delay(100);  // Wait for reset
 800189e:	2064      	movs	r0, #100	@ 0x64
 80018a0:	f000 fdf2 	bl	8002488 <HAL_Delay>
	data = 0x16;
 80018a4:	2316      	movs	r3, #22
 80018a6:	71bb      	strb	r3, [r7, #6]
	I2C_Write(AK8963_ADDR, AK8963_CNTL1, &data, 1); // Continuous mode 2 (100Hz, 16-bit output)
 80018a8:	1dba      	adds	r2, r7, #6
 80018aa:	2301      	movs	r3, #1
 80018ac:	210a      	movs	r1, #10
 80018ae:	2018      	movs	r0, #24
 80018b0:	f000 faf6 	bl	8001ea0 <I2C_Write>
	I2C_Read(AK8963_ADDR, AK8963_CNTL1, &check, 1);
 80018b4:	1dfa      	adds	r2, r7, #7
 80018b6:	2301      	movs	r3, #1
 80018b8:	210a      	movs	r1, #10
 80018ba:	2018      	movs	r0, #24
 80018bc:	f000 fad0 	bl	8001e60 <I2C_Read>
	printf("CNTL1 Register: 0x%02X\n", check);
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	4619      	mov	r1, r3
 80018c4:	4810      	ldr	r0, [pc, #64]	@ (8001908 <MPU9250_Init+0x114>)
 80018c6:	f003 fde1 	bl	800548c <iprintf>
	check = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	71fb      	strb	r3, [r7, #7]
	data = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	71bb      	strb	r3, [r7, #6]
	I2C_Read(AK8963_ADDR, 0x00, &check, 1);//read WIA register, should return 0x48
 80018d2:	1dfa      	adds	r2, r7, #7
 80018d4:	2301      	movs	r3, #1
 80018d6:	2100      	movs	r1, #0
 80018d8:	2018      	movs	r0, #24
 80018da:	f000 fac1 	bl	8001e60 <I2C_Read>
	if(check == 0x48)
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	2b48      	cmp	r3, #72	@ 0x48
 80018e2:	d103      	bne.n	80018ec <MPU9250_Init+0xf8>
		printf("Magnetometer found \n");
 80018e4:	4809      	ldr	r0, [pc, #36]	@ (800190c <MPU9250_Init+0x118>)
 80018e6:	f003 fe39 	bl	800555c <puts>
	else
		printf("No Magnetometer found. WIA: %d \n", check);
}
 80018ea:	e004      	b.n	80018f6 <MPU9250_Init+0x102>
		printf("No Magnetometer found. WIA: %d \n", check);
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	4619      	mov	r1, r3
 80018f0:	4807      	ldr	r0, [pc, #28]	@ (8001910 <MPU9250_Init+0x11c>)
 80018f2:	f003 fdcb 	bl	800548c <iprintf>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	08008c68 	.word	0x08008c68
 8001904:	08008c74 	.word	0x08008c74
 8001908:	08008c84 	.word	0x08008c84
 800190c:	08008c9c 	.word	0x08008c9c
 8001910:	08008cb0 	.word	0x08008cb0

08001914 <MPU9250_Calibrate_acc>:

void MPU9250_Calibrate_acc()
{
 8001914:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001918:	b088      	sub	sp, #32
 800191a:	af04      	add	r7, sp, #16
	int16_t accelData[3];

	for(int i=0; i<NUM_SAMPLES; i++)
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	e03c      	b.n	800199c <MPU9250_Calibrate_acc+0x88>
	{
		MPU9250_Read_Accel(accelData);
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	4618      	mov	r0, r3
 8001926:	f000 f9f3 	bl	8001d10 <MPU9250_Read_Accel>
		accx_offset += (float)(accelData[0]/4096.0f);
 800192a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800192e:	ee07 3a90 	vmov	s15, r3
 8001932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001936:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8001a30 <MPU9250_Calibrate_acc+0x11c>
 800193a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800193e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a34 <MPU9250_Calibrate_acc+0x120>)
 8001940:	edd3 7a00 	vldr	s15, [r3]
 8001944:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001948:	4b3a      	ldr	r3, [pc, #232]	@ (8001a34 <MPU9250_Calibrate_acc+0x120>)
 800194a:	edc3 7a00 	vstr	s15, [r3]
		accy_offset += (float)(accelData[1]/4096.0f);
 800194e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001952:	ee07 3a90 	vmov	s15, r3
 8001956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800195a:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8001a30 <MPU9250_Calibrate_acc+0x11c>
 800195e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001962:	4b35      	ldr	r3, [pc, #212]	@ (8001a38 <MPU9250_Calibrate_acc+0x124>)
 8001964:	edd3 7a00 	vldr	s15, [r3]
 8001968:	ee77 7a27 	vadd.f32	s15, s14, s15
 800196c:	4b32      	ldr	r3, [pc, #200]	@ (8001a38 <MPU9250_Calibrate_acc+0x124>)
 800196e:	edc3 7a00 	vstr	s15, [r3]
		accz_offset += (float)(accelData[2]/4096.0f);
 8001972:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001976:	ee07 3a90 	vmov	s15, r3
 800197a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800197e:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8001a30 <MPU9250_Calibrate_acc+0x11c>
 8001982:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001986:	4b2d      	ldr	r3, [pc, #180]	@ (8001a3c <MPU9250_Calibrate_acc+0x128>)
 8001988:	edd3 7a00 	vldr	s15, [r3]
 800198c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001990:	4b2a      	ldr	r3, [pc, #168]	@ (8001a3c <MPU9250_Calibrate_acc+0x128>)
 8001992:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<NUM_SAMPLES; i++)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	3301      	adds	r3, #1
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80019a2:	dbbe      	blt.n	8001922 <MPU9250_Calibrate_acc+0xe>
		//HAL_Delay(10);

	}

	accx_offset /= NUM_SAMPLES;
 80019a4:	4b23      	ldr	r3, [pc, #140]	@ (8001a34 <MPU9250_Calibrate_acc+0x120>)
 80019a6:	ed93 7a00 	vldr	s14, [r3]
 80019aa:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8001a40 <MPU9250_Calibrate_acc+0x12c>
 80019ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019b2:	4b20      	ldr	r3, [pc, #128]	@ (8001a34 <MPU9250_Calibrate_acc+0x120>)
 80019b4:	edc3 7a00 	vstr	s15, [r3]
	accy_offset /= NUM_SAMPLES;
 80019b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a38 <MPU9250_Calibrate_acc+0x124>)
 80019ba:	ed93 7a00 	vldr	s14, [r3]
 80019be:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001a40 <MPU9250_Calibrate_acc+0x12c>
 80019c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a38 <MPU9250_Calibrate_acc+0x124>)
 80019c8:	edc3 7a00 	vstr	s15, [r3]
	accz_offset = (accz_offset/NUM_SAMPLES) - 1.0f;
 80019cc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a3c <MPU9250_Calibrate_acc+0x128>)
 80019ce:	ed93 7a00 	vldr	s14, [r3]
 80019d2:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8001a40 <MPU9250_Calibrate_acc+0x12c>
 80019d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80019de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019e2:	4b16      	ldr	r3, [pc, #88]	@ (8001a3c <MPU9250_Calibrate_acc+0x128>)
 80019e4:	edc3 7a00 	vstr	s15, [r3]

	printf("Accel Calibration Done. Offsets are: X: %f, Y: %f, Z: %f\n", accx_offset, accy_offset, accz_offset);
 80019e8:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <MPU9250_Calibrate_acc+0x120>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7fe fdcb 	bl	8000588 <__aeabi_f2d>
 80019f2:	4680      	mov	r8, r0
 80019f4:	4689      	mov	r9, r1
 80019f6:	4b10      	ldr	r3, [pc, #64]	@ (8001a38 <MPU9250_Calibrate_acc+0x124>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fdc4 	bl	8000588 <__aeabi_f2d>
 8001a00:	4604      	mov	r4, r0
 8001a02:	460d      	mov	r5, r1
 8001a04:	4b0d      	ldr	r3, [pc, #52]	@ (8001a3c <MPU9250_Calibrate_acc+0x128>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fdbd 	bl	8000588 <__aeabi_f2d>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a16:	e9cd 4500 	strd	r4, r5, [sp]
 8001a1a:	4642      	mov	r2, r8
 8001a1c:	464b      	mov	r3, r9
 8001a1e:	4809      	ldr	r0, [pc, #36]	@ (8001a44 <MPU9250_Calibrate_acc+0x130>)
 8001a20:	f003 fd34 	bl	800548c <iprintf>
}
 8001a24:	bf00      	nop
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a2e:	bf00      	nop
 8001a30:	45800000 	.word	0x45800000
 8001a34:	200002a0 	.word	0x200002a0
 8001a38:	200002a4 	.word	0x200002a4
 8001a3c:	200002a8 	.word	0x200002a8
 8001a40:	44fa0000 	.word	0x44fa0000
 8001a44:	08008cd4 	.word	0x08008cd4

08001a48 <MPU9250_Calibrate_gyro>:

void MPU9250_Calibrate_gyro(float* gyroOffsetX, float* gyroOffsetY, float* gyroOffsetZ)
{
 8001a48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a4c:	b08e      	sub	sp, #56	@ 0x38
 8001a4e:	af04      	add	r7, sp, #16
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
	int32_t sumX=0, sumY=0, sumZ=0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61bb      	str	r3, [r7, #24]
	int16_t gyroData[3];

	for(int i=0; i<GYRO_NUM_SAMPLES; i++)
 8001a62:	2300      	movs	r3, #0
 8001a64:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a66:	e03d      	b.n	8001ae4 <MPU9250_Calibrate_gyro+0x9c>
	{
		MPU9250_Read_Gyro(gyroData);
 8001a68:	f107 0310 	add.w	r3, r7, #16
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f000 f97b 	bl	8001d68 <MPU9250_Read_Gyro>
		/*sumX += gyroData[0];
		sumY += gyroData[1];
		sumZ += gyroData[2];*/
		*gyroOffsetX += (float)(gyroData[0]/GYRO_SENSITIVITY);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	ed93 7a00 	vldr	s14, [r3]
 8001a78:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a7c:	ee07 3a90 	vmov	s15, r3
 8001a80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a84:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 8001b70 <MPU9250_Calibrate_gyro+0x128>
 8001a88:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	edc3 7a00 	vstr	s15, [r3]
		*gyroOffsetY += (float)(gyroData[1]/GYRO_SENSITIVITY);
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	ed93 7a00 	vldr	s14, [r3]
 8001a9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001aa0:	ee07 3a90 	vmov	s15, r3
 8001aa4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001aa8:	ed9f 6a31 	vldr	s12, [pc, #196]	@ 8001b70 <MPU9250_Calibrate_gyro+0x128>
 8001aac:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001ab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	edc3 7a00 	vstr	s15, [r3]
		*gyroOffsetZ += (float)(gyroData[2]/GYRO_SENSITIVITY);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	ed93 7a00 	vldr	s14, [r3]
 8001ac0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ac4:	ee07 3a90 	vmov	s15, r3
 8001ac8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001acc:	ed9f 6a28 	vldr	s12, [pc, #160]	@ 8001b70 <MPU9250_Calibrate_gyro+0x128>
 8001ad0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<GYRO_NUM_SAMPLES; i++)
 8001ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001aea:	dbbd      	blt.n	8001a68 <MPU9250_Calibrate_gyro+0x20>
	}

	*gyroOffsetX /= GYRO_NUM_SAMPLES;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	ed93 7a00 	vldr	s14, [r3]
 8001af2:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001b74 <MPU9250_Calibrate_gyro+0x12c>
 8001af6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	edc3 7a00 	vstr	s15, [r3]
	*gyroOffsetY /= GYRO_NUM_SAMPLES;
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	ed93 7a00 	vldr	s14, [r3]
 8001b06:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8001b74 <MPU9250_Calibrate_gyro+0x12c>
 8001b0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	edc3 7a00 	vstr	s15, [r3]
	*gyroOffsetZ /= GYRO_NUM_SAMPLES;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	ed93 7a00 	vldr	s14, [r3]
 8001b1a:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8001b74 <MPU9250_Calibrate_gyro+0x12c>
 8001b1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	edc3 7a00 	vstr	s15, [r3]

	printf("Gyro calibration Done. Offsets dps -> Gx: %f Gy: %f Gz: %f \n",
			*gyroOffsetX, *gyroOffsetY, *gyroOffsetZ);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
	printf("Gyro calibration Done. Offsets dps -> Gx: %f Gy: %f Gz: %f \n",
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fd2b 	bl	8000588 <__aeabi_f2d>
 8001b32:	4680      	mov	r8, r0
 8001b34:	4689      	mov	r9, r1
			*gyroOffsetX, *gyroOffsetY, *gyroOffsetZ);
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	681b      	ldr	r3, [r3, #0]
	printf("Gyro calibration Done. Offsets dps -> Gx: %f Gy: %f Gz: %f \n",
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fd24 	bl	8000588 <__aeabi_f2d>
 8001b40:	4604      	mov	r4, r0
 8001b42:	460d      	mov	r5, r1
			*gyroOffsetX, *gyroOffsetY, *gyroOffsetZ);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
	printf("Gyro calibration Done. Offsets dps -> Gx: %f Gy: %f Gz: %f \n",
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fd1d 	bl	8000588 <__aeabi_f2d>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001b56:	e9cd 4500 	strd	r4, r5, [sp]
 8001b5a:	4642      	mov	r2, r8
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	4806      	ldr	r0, [pc, #24]	@ (8001b78 <MPU9250_Calibrate_gyro+0x130>)
 8001b60:	f003 fc94 	bl	800548c <iprintf>
}
 8001b64:	bf00      	nop
 8001b66:	3728      	adds	r7, #40	@ 0x28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b6e:	bf00      	nop
 8001b70:	42830000 	.word	0x42830000
 8001b74:	44fa0000 	.word	0x44fa0000
 8001b78:	08008d10 	.word	0x08008d10

08001b7c <MPU9250_Calibrate_mag>:

void MPU9250_Calibrate_mag(float * magOffsetX, float *magOffsetY, float *magOffsetZ)
{
 8001b7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b80:	b08e      	sub	sp, #56	@ 0x38
 8001b82:	af04      	add	r7, sp, #16
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
	int16_t magdata[3];
	int16_t magX_min = 32767, magX_max = -32768;
 8001b8a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001b8e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001b90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b94:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t magY_min = 32767, magY_max = -32768;
 8001b96:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001b9a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001b9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ba0:	843b      	strh	r3, [r7, #32]
	int16_t magZ_min = 32767, magZ_max = -32768;
 8001ba2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001ba6:	83fb      	strh	r3, [r7, #30]
 8001ba8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001bac:	83bb      	strh	r3, [r7, #28]

	printf("Rotate the sensor in all directions for calibration ...\n");
 8001bae:	4856      	ldr	r0, [pc, #344]	@ (8001d08 <MPU9250_Calibrate_mag+0x18c>)
 8001bb0:	f003 fcd4 	bl	800555c <puts>

	for(int i=0; i<MAG_NUM_SAMPLES; i++)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61bb      	str	r3, [r7, #24]
 8001bb8:	e03a      	b.n	8001c30 <MPU9250_Calibrate_mag+0xb4>
	{
		MPU9250_Read_Mag(magdata);
 8001bba:	f107 0310 	add.w	r3, r7, #16
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 f8fe 	bl	8001dc0 <MPU9250_Read_Mag>

		if(magdata[0] < magX_min) magX_min = magdata[0];
 8001bc4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bc8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	dd01      	ble.n	8001bd4 <MPU9250_Calibrate_mag+0x58>
 8001bd0:	8a3b      	ldrh	r3, [r7, #16]
 8001bd2:	84fb      	strh	r3, [r7, #38]	@ 0x26
		if(magdata[0] > magX_max) magX_max = magdata[0];
 8001bd4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bd8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	da01      	bge.n	8001be4 <MPU9250_Calibrate_mag+0x68>
 8001be0:	8a3b      	ldrh	r3, [r7, #16]
 8001be2:	84bb      	strh	r3, [r7, #36]	@ 0x24

		if(magdata[1] < magY_min) magY_min = magdata[1];
 8001be4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001be8:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8001bec:	429a      	cmp	r2, r3
 8001bee:	dd01      	ble.n	8001bf4 <MPU9250_Calibrate_mag+0x78>
 8001bf0:	8a7b      	ldrh	r3, [r7, #18]
 8001bf2:	847b      	strh	r3, [r7, #34]	@ 0x22
		if(magdata[1] > magY_max) magY_max = magdata[1];
 8001bf4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bf8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	da01      	bge.n	8001c04 <MPU9250_Calibrate_mag+0x88>
 8001c00:	8a7b      	ldrh	r3, [r7, #18]
 8001c02:	843b      	strh	r3, [r7, #32]

		if(magdata[2] < magZ_min) magZ_min = magdata[2];
 8001c04:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c08:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	dd01      	ble.n	8001c14 <MPU9250_Calibrate_mag+0x98>
 8001c10:	8abb      	ldrh	r3, [r7, #20]
 8001c12:	83fb      	strh	r3, [r7, #30]
		if(magdata[2] > magZ_max) magZ_max = magdata[2];
 8001c14:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c18:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	da01      	bge.n	8001c24 <MPU9250_Calibrate_mag+0xa8>
 8001c20:	8abb      	ldrh	r3, [r7, #20]
 8001c22:	83bb      	strh	r3, [r7, #28]

		HAL_Delay(10);
 8001c24:	200a      	movs	r0, #10
 8001c26:	f000 fc2f 	bl	8002488 <HAL_Delay>
	for(int i=0; i<MAG_NUM_SAMPLES; i++)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	61bb      	str	r3, [r7, #24]
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c36:	dbc0      	blt.n	8001bba <MPU9250_Calibrate_mag+0x3e>
	}

	//Offsets for hard iron correction
	*magOffsetX = ((int32_t)magX_max + (int32_t)magX_min)/2.0;//prromote to 32 bit
 8001c38:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001c3c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001c40:	4413      	add	r3, r2
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fc8e 	bl	8000564 <__aeabi_i2d>
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c50:	f7fe fe1c 	bl	800088c <__aeabi_ddiv>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f7fe ffc4 	bl	8000be8 <__aeabi_d2f>
 8001c60:	4602      	mov	r2, r0
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	601a      	str	r2, [r3, #0]
	*magOffsetY = ((int32_t)magY_max + (int32_t)magY_min)/2.0;//to prevent overflow
 8001c66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001c6a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001c6e:	4413      	add	r3, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fc77 	bl	8000564 <__aeabi_i2d>
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c7e:	f7fe fe05 	bl	800088c <__aeabi_ddiv>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4610      	mov	r0, r2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f7fe ffad 	bl	8000be8 <__aeabi_d2f>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	601a      	str	r2, [r3, #0]
	*magOffsetZ = ((int32_t)magZ_max + (int32_t)magZ_min)/2.0;
 8001c94:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001c98:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fc60 	bl	8000564 <__aeabi_i2d>
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cac:	f7fe fdee 	bl	800088c <__aeabi_ddiv>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f7fe ff96 	bl	8000be8 <__aeabi_d2f>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	601a      	str	r2, [r3, #0]

	printf("Mag calibration done. Offsets -> Mx: %f My: %f Mz: %f \n",
			*magOffsetX, *magOffsetY, *magOffsetZ);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
	printf("Mag calibration done. Offsets -> Mx: %f My: %f Mz: %f \n",
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fc5e 	bl	8000588 <__aeabi_f2d>
 8001ccc:	4680      	mov	r8, r0
 8001cce:	4689      	mov	r9, r1
			*magOffsetX, *magOffsetY, *magOffsetZ);
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	681b      	ldr	r3, [r3, #0]
	printf("Mag calibration done. Offsets -> Mx: %f My: %f Mz: %f \n",
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe fc57 	bl	8000588 <__aeabi_f2d>
 8001cda:	4604      	mov	r4, r0
 8001cdc:	460d      	mov	r5, r1
			*magOffsetX, *magOffsetY, *magOffsetZ);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
	printf("Mag calibration done. Offsets -> Mx: %f My: %f Mz: %f \n",
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fc50 	bl	8000588 <__aeabi_f2d>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001cf0:	e9cd 4500 	strd	r4, r5, [sp]
 8001cf4:	4642      	mov	r2, r8
 8001cf6:	464b      	mov	r3, r9
 8001cf8:	4804      	ldr	r0, [pc, #16]	@ (8001d0c <MPU9250_Calibrate_mag+0x190>)
 8001cfa:	f003 fbc7 	bl	800548c <iprintf>
}
 8001cfe:	bf00      	nop
 8001d00:	3728      	adds	r7, #40	@ 0x28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d08:	08008d50 	.word	0x08008d50
 8001d0c:	08008d88 	.word	0x08008d88

08001d10 <MPU9250_Read_Accel>:


void MPU9250_Read_Accel(int16_t *accelData) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];
	I2C_Read(MPU9250_ADDR, MPU9250_ACCEL_XOUT_H, rawData, 6);
 8001d18:	f107 0208 	add.w	r2, r7, #8
 8001d1c:	2306      	movs	r3, #6
 8001d1e:	213b      	movs	r1, #59	@ 0x3b
 8001d20:	20d0      	movs	r0, #208	@ 0xd0
 8001d22:	f000 f89d 	bl	8001e60 <I2C_Read>
	accelData[0] = (int16_t)((rawData[0] << 8) | rawData[1]);
 8001d26:	7a3b      	ldrb	r3, [r7, #8]
 8001d28:	021b      	lsls	r3, r3, #8
 8001d2a:	b21a      	sxth	r2, r3
 8001d2c:	7a7b      	ldrb	r3, [r7, #9]
 8001d2e:	b21b      	sxth	r3, r3
 8001d30:	4313      	orrs	r3, r2
 8001d32:	b21a      	sxth	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	801a      	strh	r2, [r3, #0]
	accelData[1] = (int16_t)((rawData[2] << 8) | rawData[3]);
 8001d38:	7abb      	ldrb	r3, [r7, #10]
 8001d3a:	021b      	lsls	r3, r3, #8
 8001d3c:	b219      	sxth	r1, r3
 8001d3e:	7afb      	ldrb	r3, [r7, #11]
 8001d40:	b21a      	sxth	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3302      	adds	r3, #2
 8001d46:	430a      	orrs	r2, r1
 8001d48:	b212      	sxth	r2, r2
 8001d4a:	801a      	strh	r2, [r3, #0]
	accelData[2] = (int16_t)((rawData[4] << 8) | rawData[5]);
 8001d4c:	7b3b      	ldrb	r3, [r7, #12]
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	b219      	sxth	r1, r3
 8001d52:	7b7b      	ldrb	r3, [r7, #13]
 8001d54:	b21a      	sxth	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	b212      	sxth	r2, r2
 8001d5e:	801a      	strh	r2, [r3, #0]
}
 8001d60:	bf00      	nop
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <MPU9250_Read_Gyro>:

void MPU9250_Read_Gyro(int16_t *gyroData) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];
	I2C_Read(MPU9250_ADDR, MPU9250_GYRO_XOUT_H, rawData, 6);
 8001d70:	f107 0208 	add.w	r2, r7, #8
 8001d74:	2306      	movs	r3, #6
 8001d76:	2143      	movs	r1, #67	@ 0x43
 8001d78:	20d0      	movs	r0, #208	@ 0xd0
 8001d7a:	f000 f871 	bl	8001e60 <I2C_Read>
	gyroData[0] = (int16_t)((rawData[0] << 8) | rawData[1]);
 8001d7e:	7a3b      	ldrb	r3, [r7, #8]
 8001d80:	021b      	lsls	r3, r3, #8
 8001d82:	b21a      	sxth	r2, r3
 8001d84:	7a7b      	ldrb	r3, [r7, #9]
 8001d86:	b21b      	sxth	r3, r3
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	b21a      	sxth	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	801a      	strh	r2, [r3, #0]
	gyroData[1] = (int16_t)((rawData[2] << 8) | rawData[3]);
 8001d90:	7abb      	ldrb	r3, [r7, #10]
 8001d92:	021b      	lsls	r3, r3, #8
 8001d94:	b219      	sxth	r1, r3
 8001d96:	7afb      	ldrb	r3, [r7, #11]
 8001d98:	b21a      	sxth	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	b212      	sxth	r2, r2
 8001da2:	801a      	strh	r2, [r3, #0]
	gyroData[2] = (int16_t)((rawData[4] << 8) | rawData[5]);
 8001da4:	7b3b      	ldrb	r3, [r7, #12]
 8001da6:	021b      	lsls	r3, r3, #8
 8001da8:	b219      	sxth	r1, r3
 8001daa:	7b7b      	ldrb	r3, [r7, #13]
 8001dac:	b21a      	sxth	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3304      	adds	r3, #4
 8001db2:	430a      	orrs	r2, r1
 8001db4:	b212      	sxth	r2, r2
 8001db6:	801a      	strh	r2, [r3, #0]
}
 8001db8:	bf00      	nop
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <MPU9250_Read_Mag>:

void MPU9250_Read_Mag(int16_t *magData) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];
	uint8_t status;
	uint8_t overflowCheck;

	I2C_Read(AK8963_ADDR, 0x02, &status, 1); // Read ST1 (Data Ready Status)
 8001dc8:	f107 020f 	add.w	r2, r7, #15
 8001dcc:	2301      	movs	r3, #1
 8001dce:	2102      	movs	r1, #2
 8001dd0:	2018      	movs	r0, #24
 8001dd2:	f000 f845 	bl	8001e60 <I2C_Read>
	if (!(status & 0x01)) {
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d103      	bne.n	8001de8 <MPU9250_Read_Mag+0x28>
		printf("No new magnetometer data available\n");
 8001de0:	481d      	ldr	r0, [pc, #116]	@ (8001e58 <MPU9250_Read_Mag+0x98>)
 8001de2:	f003 fbbb 	bl	800555c <puts>
		return;  // Exit if no new data
 8001de6:	e033      	b.n	8001e50 <MPU9250_Read_Mag+0x90>
	}
	I2C_Read(AK8963_ADDR, 0x03, rawData, 6);//read raw data from x low register
 8001de8:	f107 0210 	add.w	r2, r7, #16
 8001dec:	2306      	movs	r3, #6
 8001dee:	2103      	movs	r1, #3
 8001df0:	2018      	movs	r0, #24
 8001df2:	f000 f835 	bl	8001e60 <I2C_Read>
	magData[0] = (int16_t)((rawData[1] << 8) | rawData[0]); //mag x
 8001df6:	7c7b      	ldrb	r3, [r7, #17]
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	b21a      	sxth	r2, r3
 8001dfc:	7c3b      	ldrb	r3, [r7, #16]
 8001dfe:	b21b      	sxth	r3, r3
 8001e00:	4313      	orrs	r3, r2
 8001e02:	b21a      	sxth	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	801a      	strh	r2, [r3, #0]
	magData[1] = (int16_t)((rawData[3] << 8) | rawData[2]); //mag y
 8001e08:	7cfb      	ldrb	r3, [r7, #19]
 8001e0a:	021b      	lsls	r3, r3, #8
 8001e0c:	b219      	sxth	r1, r3
 8001e0e:	7cbb      	ldrb	r3, [r7, #18]
 8001e10:	b21a      	sxth	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3302      	adds	r3, #2
 8001e16:	430a      	orrs	r2, r1
 8001e18:	b212      	sxth	r2, r2
 8001e1a:	801a      	strh	r2, [r3, #0]
	magData[2] = (int16_t)((rawData[5] << 8) | rawData[4]); //mag z
 8001e1c:	7d7b      	ldrb	r3, [r7, #21]
 8001e1e:	021b      	lsls	r3, r3, #8
 8001e20:	b219      	sxth	r1, r3
 8001e22:	7d3b      	ldrb	r3, [r7, #20]
 8001e24:	b21a      	sxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	b212      	sxth	r2, r2
 8001e2e:	801a      	strh	r2, [r3, #0]

	I2C_Read(AK8963_ADDR, 0x09, &overflowCheck, 1);
 8001e30:	f107 020e 	add.w	r2, r7, #14
 8001e34:	2301      	movs	r3, #1
 8001e36:	2109      	movs	r1, #9
 8001e38:	2018      	movs	r0, #24
 8001e3a:	f000 f811 	bl	8001e60 <I2C_Read>
	if (overflowCheck & 0x08) {
 8001e3e:	7bbb      	ldrb	r3, [r7, #14]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <MPU9250_Read_Mag+0x90>
		printf("Magnetometer overflow detected\n");
 8001e48:	4804      	ldr	r0, [pc, #16]	@ (8001e5c <MPU9250_Read_Mag+0x9c>)
 8001e4a:	f003 fb87 	bl	800555c <puts>
		return;  // Data is invalid, so discard it
 8001e4e:	bf00      	nop
	}
}
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	08008dc0 	.word	0x08008dc0
 8001e5c:	08008de4 	.word	0x08008de4

08001e60 <I2C_Read>:

void I2C_Read(uint8_t addr, uint8_t reg, uint8_t *data, uint16_t size) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af04      	add	r7, sp, #16
 8001e66:	603a      	str	r2, [r7, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	71bb      	strb	r3, [r7, #6]
 8001e72:	4613      	mov	r3, r2
 8001e74:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, addr, reg, I2C_MEMADD_SIZE_8BIT, data, size, 1000);
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	b299      	uxth	r1, r3
 8001e7a:	79bb      	ldrb	r3, [r7, #6]
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e82:	9302      	str	r3, [sp, #8]
 8001e84:	88bb      	ldrh	r3, [r7, #4]
 8001e86:	9301      	str	r3, [sp, #4]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	4803      	ldr	r0, [pc, #12]	@ (8001e9c <I2C_Read+0x3c>)
 8001e90:	f000 ffd6 	bl	8002e40 <HAL_I2C_Mem_Read>
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000204 	.word	0x20000204

08001ea0 <I2C_Write>:

void I2C_Write(uint8_t addr, uint8_t reg, uint8_t *data, uint16_t size) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af04      	add	r7, sp, #16
 8001ea6:	603a      	str	r2, [r7, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4603      	mov	r3, r0
 8001eac:	71fb      	strb	r3, [r7, #7]
 8001eae:	460b      	mov	r3, r1
 8001eb0:	71bb      	strb	r3, [r7, #6]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c1, addr, reg, I2C_MEMADD_SIZE_8BIT, data, size, 1000);
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	b299      	uxth	r1, r3
 8001eba:	79bb      	ldrb	r3, [r7, #6]
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ec2:	9302      	str	r3, [sp, #8]
 8001ec4:	88bb      	ldrh	r3, [r7, #4]
 8001ec6:	9301      	str	r3, [sp, #4]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	2301      	movs	r3, #1
 8001ece:	4803      	ldr	r0, [pc, #12]	@ (8001edc <I2C_Write+0x3c>)
 8001ed0:	f000 febc 	bl	8002c4c <HAL_I2C_Mem_Write>
}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20000204 	.word	0x20000204

08001ee0 <kalman_1d>:
	printf("Accel -> X: %f m/ss Y: %f m/ss Z: %f m/ss\n", accel[0], accel[1], accel[2]);
	printf("Gyro -> X: %f dps Y: %f dps Z: %f dps\n", gyro[0], gyro[1], gyro[2]);
}

void kalman_1d(float KalmanState, float KalmanUncertainty, float RotationRate, float Accel)
{
 8001ee0:	b5b0      	push	{r4, r5, r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	ed87 0a03 	vstr	s0, [r7, #12]
 8001eea:	edc7 0a02 	vstr	s1, [r7, #8]
 8001eee:	ed87 1a01 	vstr	s2, [r7, #4]
 8001ef2:	edc7 1a00 	vstr	s3, [r7]
	KalmanState = KalmanState + 0.004*RotationRate;
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f7fe fb46 	bl	8000588 <__aeabi_f2d>
 8001efc:	4604      	mov	r4, r0
 8001efe:	460d      	mov	r5, r1
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7fe fb41 	bl	8000588 <__aeabi_f2d>
 8001f06:	a32b      	add	r3, pc, #172	@ (adr r3, 8001fb4 <kalman_1d+0xd4>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe fb94 	bl	8000638 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4620      	mov	r0, r4
 8001f16:	4629      	mov	r1, r5
 8001f18:	f7fe f9d8 	bl	80002cc <__adddf3>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	f7fe fe60 	bl	8000be8 <__aeabi_d2f>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	60fb      	str	r3, [r7, #12]
	KalmanUncertainty = KalmanUncertainty + 0.004*0.004*4*4;
 8001f2c:	68b8      	ldr	r0, [r7, #8]
 8001f2e:	f7fe fb2b 	bl	8000588 <__aeabi_f2d>
 8001f32:	a322      	add	r3, pc, #136	@ (adr r3, 8001fbc <kalman_1d+0xdc>)
 8001f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f38:	f7fe f9c8 	bl	80002cc <__adddf3>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4610      	mov	r0, r2
 8001f42:	4619      	mov	r1, r3
 8001f44:	f7fe fe50 	bl	8000be8 <__aeabi_d2f>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	60bb      	str	r3, [r7, #8]
	float KalmanGain = KalmanUncertainty * 1/(1*KalmanUncertainty+ 3*3);
 8001f4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f50:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8001f54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001f58:	edd7 6a02 	vldr	s13, [r7, #8]
 8001f5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f60:	edc7 7a05 	vstr	s15, [r7, #20]
	KalmanState = KalmanState + KalmanGain * (Accel - KalmanState); //update
 8001f64:	ed97 7a00 	vldr	s14, [r7]
 8001f68:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f70:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f78:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f80:	edc7 7a03 	vstr	s15, [r7, #12]
	KalmanUncertainty = (1 - KalmanGain) * KalmanUncertainty;
 8001f84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f88:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f90:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f98:	edc7 7a02 	vstr	s15, [r7, #8]

	Kalman1DOutput[0] = KalmanState;
 8001f9c:	4a04      	ldr	r2, [pc, #16]	@ (8001fb0 <kalman_1d+0xd0>)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6013      	str	r3, [r2, #0]
	Kalman1DOutput[1] = KalmanUncertainty;
 8001fa2:	4a03      	ldr	r2, [pc, #12]	@ (8001fb0 <kalman_1d+0xd0>)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	6053      	str	r3, [r2, #4]
}
 8001fa8:	bf00      	nop
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb0:	200002d8 	.word	0x200002d8
 8001fb4:	d2f1a9fc 	.word	0xd2f1a9fc
 8001fb8:	3f70624d 	.word	0x3f70624d
 8001fbc:	a0b5ed8d 	.word	0xa0b5ed8d
 8001fc0:	3f30c6f7 	.word	0x3f30c6f7

08001fc4 <_write>:

int _write(int file, char *ptr, int len)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
	(void)file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	e009      	b.n	8001fea <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	60ba      	str	r2, [r7, #8]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe ffca 	bl	8000f78 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	dbf1      	blt.n	8001fd6 <_write+0x12>
	}
	return len;
 8001ff2:	687b      	ldr	r3, [r7, #4]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002000:	b672      	cpsid	i
}
 8002002:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <Error_Handler+0x8>

08002008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	4b10      	ldr	r3, [pc, #64]	@ (8002054 <HAL_MspInit+0x4c>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002016:	4a0f      	ldr	r2, [pc, #60]	@ (8002054 <HAL_MspInit+0x4c>)
 8002018:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800201c:	6453      	str	r3, [r2, #68]	@ 0x44
 800201e:	4b0d      	ldr	r3, [pc, #52]	@ (8002054 <HAL_MspInit+0x4c>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002022:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	603b      	str	r3, [r7, #0]
 800202e:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <HAL_MspInit+0x4c>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002032:	4a08      	ldr	r2, [pc, #32]	@ (8002054 <HAL_MspInit+0x4c>)
 8002034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002038:	6413      	str	r3, [r2, #64]	@ 0x40
 800203a:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <HAL_MspInit+0x4c>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800

08002058 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	@ 0x28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a19      	ldr	r2, [pc, #100]	@ (80020dc <HAL_I2C_MspInit+0x84>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d12b      	bne.n	80020d2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	4b18      	ldr	r3, [pc, #96]	@ (80020e0 <HAL_I2C_MspInit+0x88>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002082:	4a17      	ldr	r2, [pc, #92]	@ (80020e0 <HAL_I2C_MspInit+0x88>)
 8002084:	f043 0302 	orr.w	r3, r3, #2
 8002088:	6313      	str	r3, [r2, #48]	@ 0x30
 800208a:	4b15      	ldr	r3, [pc, #84]	@ (80020e0 <HAL_I2C_MspInit+0x88>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002096:	23c0      	movs	r3, #192	@ 0xc0
 8002098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800209a:	2312      	movs	r3, #18
 800209c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a2:	2303      	movs	r3, #3
 80020a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020a6:	2304      	movs	r3, #4
 80020a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020aa:	f107 0314 	add.w	r3, r7, #20
 80020ae:	4619      	mov	r1, r3
 80020b0:	480c      	ldr	r0, [pc, #48]	@ (80020e4 <HAL_I2C_MspInit+0x8c>)
 80020b2:	f000 faf3 	bl	800269c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	4b09      	ldr	r3, [pc, #36]	@ (80020e0 <HAL_I2C_MspInit+0x88>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020be:	4a08      	ldr	r2, [pc, #32]	@ (80020e0 <HAL_I2C_MspInit+0x88>)
 80020c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020c6:	4b06      	ldr	r3, [pc, #24]	@ (80020e0 <HAL_I2C_MspInit+0x88>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80020d2:	bf00      	nop
 80020d4:	3728      	adds	r7, #40	@ 0x28
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40005400 	.word	0x40005400
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40020400 	.word	0x40020400

080020e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08a      	sub	sp, #40	@ 0x28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a19      	ldr	r2, [pc, #100]	@ (800216c <HAL_UART_MspInit+0x84>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d12b      	bne.n	8002162 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	4b18      	ldr	r3, [pc, #96]	@ (8002170 <HAL_UART_MspInit+0x88>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	4a17      	ldr	r2, [pc, #92]	@ (8002170 <HAL_UART_MspInit+0x88>)
 8002114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002118:	6413      	str	r3, [r2, #64]	@ 0x40
 800211a:	4b15      	ldr	r3, [pc, #84]	@ (8002170 <HAL_UART_MspInit+0x88>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b11      	ldr	r3, [pc, #68]	@ (8002170 <HAL_UART_MspInit+0x88>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	4a10      	ldr	r2, [pc, #64]	@ (8002170 <HAL_UART_MspInit+0x88>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6313      	str	r3, [r2, #48]	@ 0x30
 8002136:	4b0e      	ldr	r3, [pc, #56]	@ (8002170 <HAL_UART_MspInit+0x88>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002142:	230c      	movs	r3, #12
 8002144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214e:	2303      	movs	r3, #3
 8002150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002152:	2307      	movs	r3, #7
 8002154:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002156:	f107 0314 	add.w	r3, r7, #20
 800215a:	4619      	mov	r1, r3
 800215c:	4805      	ldr	r0, [pc, #20]	@ (8002174 <HAL_UART_MspInit+0x8c>)
 800215e:	f000 fa9d 	bl	800269c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002162:	bf00      	nop
 8002164:	3728      	adds	r7, #40	@ 0x28
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40004400 	.word	0x40004400
 8002170:	40023800 	.word	0x40023800
 8002174:	40020000 	.word	0x40020000

08002178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800217c:	bf00      	nop
 800217e:	e7fd      	b.n	800217c <NMI_Handler+0x4>

08002180 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002184:	bf00      	nop
 8002186:	e7fd      	b.n	8002184 <HardFault_Handler+0x4>

08002188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800218c:	bf00      	nop
 800218e:	e7fd      	b.n	800218c <MemManage_Handler+0x4>

08002190 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <BusFault_Handler+0x4>

08002198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800219c:	bf00      	nop
 800219e:	e7fd      	b.n	800219c <UsageFault_Handler+0x4>

080021a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ce:	f000 f93b 	bl	8002448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0
  return 1;
 80021da:	2301      	movs	r3, #1
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <_kill>:

int _kill(int pid, int sig)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021f0:	f003 fae6 	bl	80057c0 <__errno>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2216      	movs	r2, #22
 80021f8:	601a      	str	r2, [r3, #0]
  return -1;
 80021fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <_exit>:

void _exit (int status)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800220e:	f04f 31ff 	mov.w	r1, #4294967295
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff ffe7 	bl	80021e6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002218:	bf00      	nop
 800221a:	e7fd      	b.n	8002218 <_exit+0x12>

0800221c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	e00a      	b.n	8002244 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800222e:	f3af 8000 	nop.w
 8002232:	4601      	mov	r1, r0
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	60ba      	str	r2, [r7, #8]
 800223a:	b2ca      	uxtb	r2, r1
 800223c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	3301      	adds	r3, #1
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	429a      	cmp	r2, r3
 800224a:	dbf0      	blt.n	800222e <_read+0x12>
  }

  return len;
 800224c:	687b      	ldr	r3, [r7, #4]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800225e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800227e:	605a      	str	r2, [r3, #4]
  return 0;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <_isatty>:

int _isatty(int file)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002296:	2301      	movs	r3, #1
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022c8:	4a14      	ldr	r2, [pc, #80]	@ (800231c <_sbrk+0x5c>)
 80022ca:	4b15      	ldr	r3, [pc, #84]	@ (8002320 <_sbrk+0x60>)
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022d4:	4b13      	ldr	r3, [pc, #76]	@ (8002324 <_sbrk+0x64>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d102      	bne.n	80022e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022dc:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <_sbrk+0x64>)
 80022de:	4a12      	ldr	r2, [pc, #72]	@ (8002328 <_sbrk+0x68>)
 80022e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022e2:	4b10      	ldr	r3, [pc, #64]	@ (8002324 <_sbrk+0x64>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d207      	bcs.n	8002300 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022f0:	f003 fa66 	bl	80057c0 <__errno>
 80022f4:	4603      	mov	r3, r0
 80022f6:	220c      	movs	r2, #12
 80022f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022fa:	f04f 33ff 	mov.w	r3, #4294967295
 80022fe:	e009      	b.n	8002314 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002300:	4b08      	ldr	r3, [pc, #32]	@ (8002324 <_sbrk+0x64>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002306:	4b07      	ldr	r3, [pc, #28]	@ (8002324 <_sbrk+0x64>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	4a05      	ldr	r2, [pc, #20]	@ (8002324 <_sbrk+0x64>)
 8002310:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002312:	68fb      	ldr	r3, [r7, #12]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20020000 	.word	0x20020000
 8002320:	00000400 	.word	0x00000400
 8002324:	200002f8 	.word	0x200002f8
 8002328:	20000450 	.word	0x20000450

0800232c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002330:	4b06      	ldr	r3, [pc, #24]	@ (800234c <SystemInit+0x20>)
 8002332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002336:	4a05      	ldr	r2, [pc, #20]	@ (800234c <SystemInit+0x20>)
 8002338:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800233c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002350:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002388 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002354:	f7ff ffea 	bl	800232c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002358:	480c      	ldr	r0, [pc, #48]	@ (800238c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800235a:	490d      	ldr	r1, [pc, #52]	@ (8002390 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800235c:	4a0d      	ldr	r2, [pc, #52]	@ (8002394 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800235e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002360:	e002      	b.n	8002368 <LoopCopyDataInit>

08002362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002366:	3304      	adds	r3, #4

08002368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800236a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800236c:	d3f9      	bcc.n	8002362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800236e:	4a0a      	ldr	r2, [pc, #40]	@ (8002398 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002370:	4c0a      	ldr	r4, [pc, #40]	@ (800239c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002374:	e001      	b.n	800237a <LoopFillZerobss>

08002376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002378:	3204      	adds	r2, #4

0800237a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800237a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800237c:	d3fb      	bcc.n	8002376 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800237e:	f003 fa25 	bl	80057cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002382:	f7fe fe21 	bl	8000fc8 <main>
  bx  lr    
 8002386:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002388:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800238c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002390:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002394:	08009438 	.word	0x08009438
  ldr r2, =_sbss
 8002398:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800239c:	2000044c 	.word	0x2000044c

080023a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023a0:	e7fe      	b.n	80023a0 <ADC_IRQHandler>
	...

080023a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023a8:	4b0e      	ldr	r3, [pc, #56]	@ (80023e4 <HAL_Init+0x40>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a0d      	ldr	r2, [pc, #52]	@ (80023e4 <HAL_Init+0x40>)
 80023ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023b4:	4b0b      	ldr	r3, [pc, #44]	@ (80023e4 <HAL_Init+0x40>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a0a      	ldr	r2, [pc, #40]	@ (80023e4 <HAL_Init+0x40>)
 80023ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023c0:	4b08      	ldr	r3, [pc, #32]	@ (80023e4 <HAL_Init+0x40>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a07      	ldr	r2, [pc, #28]	@ (80023e4 <HAL_Init+0x40>)
 80023c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023cc:	2003      	movs	r0, #3
 80023ce:	f000 f931 	bl	8002634 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023d2:	200f      	movs	r0, #15
 80023d4:	f000 f808 	bl	80023e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023d8:	f7ff fe16 	bl	8002008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40023c00 	.word	0x40023c00

080023e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023f0:	4b12      	ldr	r3, [pc, #72]	@ (800243c <HAL_InitTick+0x54>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4b12      	ldr	r3, [pc, #72]	@ (8002440 <HAL_InitTick+0x58>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	4619      	mov	r1, r3
 80023fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002402:	fbb2 f3f3 	udiv	r3, r2, r3
 8002406:	4618      	mov	r0, r3
 8002408:	f000 f93b 	bl	8002682 <HAL_SYSTICK_Config>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e00e      	b.n	8002434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b0f      	cmp	r3, #15
 800241a:	d80a      	bhi.n	8002432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800241c:	2200      	movs	r2, #0
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	f04f 30ff 	mov.w	r0, #4294967295
 8002424:	f000 f911 	bl	800264a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002428:	4a06      	ldr	r2, [pc, #24]	@ (8002444 <HAL_InitTick+0x5c>)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	e000      	b.n	8002434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
}
 8002434:	4618      	mov	r0, r3
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20000004 	.word	0x20000004
 8002440:	2000000c 	.word	0x2000000c
 8002444:	20000008 	.word	0x20000008

08002448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800244c:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <HAL_IncTick+0x20>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	4b06      	ldr	r3, [pc, #24]	@ (800246c <HAL_IncTick+0x24>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4413      	add	r3, r2
 8002458:	4a04      	ldr	r2, [pc, #16]	@ (800246c <HAL_IncTick+0x24>)
 800245a:	6013      	str	r3, [r2, #0]
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	2000000c 	.word	0x2000000c
 800246c:	200002fc 	.word	0x200002fc

08002470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return uwTick;
 8002474:	4b03      	ldr	r3, [pc, #12]	@ (8002484 <HAL_GetTick+0x14>)
 8002476:	681b      	ldr	r3, [r3, #0]
}
 8002478:	4618      	mov	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	200002fc 	.word	0x200002fc

08002488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002490:	f7ff ffee 	bl	8002470 <HAL_GetTick>
 8002494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a0:	d005      	beq.n	80024ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024a2:	4b0a      	ldr	r3, [pc, #40]	@ (80024cc <HAL_Delay+0x44>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4413      	add	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024ae:	bf00      	nop
 80024b0:	f7ff ffde 	bl	8002470 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d8f7      	bhi.n	80024b0 <HAL_Delay+0x28>
  {
  }
}
 80024c0:	bf00      	nop
 80024c2:	bf00      	nop
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	2000000c 	.word	0x2000000c

080024d0 <__NVIC_SetPriorityGrouping>:
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002514 <__NVIC_SetPriorityGrouping+0x44>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024ec:	4013      	ands	r3, r2
 80024ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002502:	4a04      	ldr	r2, [pc, #16]	@ (8002514 <__NVIC_SetPriorityGrouping+0x44>)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	60d3      	str	r3, [r2, #12]
}
 8002508:	bf00      	nop
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <__NVIC_GetPriorityGrouping>:
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800251c:	4b04      	ldr	r3, [pc, #16]	@ (8002530 <__NVIC_GetPriorityGrouping+0x18>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	0a1b      	lsrs	r3, r3, #8
 8002522:	f003 0307 	and.w	r3, r3, #7
}
 8002526:	4618      	mov	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <__NVIC_SetPriority>:
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	6039      	str	r1, [r7, #0]
 800253e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002544:	2b00      	cmp	r3, #0
 8002546:	db0a      	blt.n	800255e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	490c      	ldr	r1, [pc, #48]	@ (8002580 <__NVIC_SetPriority+0x4c>)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	0112      	lsls	r2, r2, #4
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	440b      	add	r3, r1
 8002558:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800255c:	e00a      	b.n	8002574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4908      	ldr	r1, [pc, #32]	@ (8002584 <__NVIC_SetPriority+0x50>)
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	3b04      	subs	r3, #4
 800256c:	0112      	lsls	r2, r2, #4
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	440b      	add	r3, r1
 8002572:	761a      	strb	r2, [r3, #24]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000e100 	.word	0xe000e100
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <NVIC_EncodePriority>:
{
 8002588:	b480      	push	{r7}
 800258a:	b089      	sub	sp, #36	@ 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f1c3 0307 	rsb	r3, r3, #7
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	bf28      	it	cs
 80025a6:	2304      	movcs	r3, #4
 80025a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3304      	adds	r3, #4
 80025ae:	2b06      	cmp	r3, #6
 80025b0:	d902      	bls.n	80025b8 <NVIC_EncodePriority+0x30>
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3b03      	subs	r3, #3
 80025b6:	e000      	b.n	80025ba <NVIC_EncodePriority+0x32>
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025bc:	f04f 32ff 	mov.w	r2, #4294967295
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43da      	mvns	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	401a      	ands	r2, r3
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d0:	f04f 31ff 	mov.w	r1, #4294967295
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	fa01 f303 	lsl.w	r3, r1, r3
 80025da:	43d9      	mvns	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e0:	4313      	orrs	r3, r2
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3724      	adds	r7, #36	@ 0x24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
	...

080025f0 <SysTick_Config>:
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002600:	d301      	bcc.n	8002606 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002602:	2301      	movs	r3, #1
 8002604:	e00f      	b.n	8002626 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002606:	4a0a      	ldr	r2, [pc, #40]	@ (8002630 <SysTick_Config+0x40>)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3b01      	subs	r3, #1
 800260c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800260e:	210f      	movs	r1, #15
 8002610:	f04f 30ff 	mov.w	r0, #4294967295
 8002614:	f7ff ff8e 	bl	8002534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002618:	4b05      	ldr	r3, [pc, #20]	@ (8002630 <SysTick_Config+0x40>)
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800261e:	4b04      	ldr	r3, [pc, #16]	@ (8002630 <SysTick_Config+0x40>)
 8002620:	2207      	movs	r2, #7
 8002622:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	e000e010 	.word	0xe000e010

08002634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff ff47 	bl	80024d0 <__NVIC_SetPriorityGrouping>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800264a:	b580      	push	{r7, lr}
 800264c:	b086      	sub	sp, #24
 800264e:	af00      	add	r7, sp, #0
 8002650:	4603      	mov	r3, r0
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
 8002656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800265c:	f7ff ff5c 	bl	8002518 <__NVIC_GetPriorityGrouping>
 8002660:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	68b9      	ldr	r1, [r7, #8]
 8002666:	6978      	ldr	r0, [r7, #20]
 8002668:	f7ff ff8e 	bl	8002588 <NVIC_EncodePriority>
 800266c:	4602      	mov	r2, r0
 800266e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002672:	4611      	mov	r1, r2
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff ff5d 	bl	8002534 <__NVIC_SetPriority>
}
 800267a:	bf00      	nop
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff ffb0 	bl	80025f0 <SysTick_Config>
 8002690:	4603      	mov	r3, r0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800269c:	b480      	push	{r7}
 800269e:	b089      	sub	sp, #36	@ 0x24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
 80026b6:	e165      	b.n	8002984 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026b8:	2201      	movs	r2, #1
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	f040 8154 	bne.w	800297e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d005      	beq.n	80026ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d130      	bne.n	8002750 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	2203      	movs	r2, #3
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002724:	2201      	movs	r2, #1
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 0201 	and.w	r2, r3, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	2b03      	cmp	r3, #3
 800275a:	d017      	beq.n	800278c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	2203      	movs	r2, #3
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d123      	bne.n	80027e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	08da      	lsrs	r2, r3, #3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3208      	adds	r2, #8
 80027a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	220f      	movs	r2, #15
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	08da      	lsrs	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3208      	adds	r2, #8
 80027da:	69b9      	ldr	r1, [r7, #24]
 80027dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	2203      	movs	r2, #3
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 0203 	and.w	r2, r3, #3
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80ae 	beq.w	800297e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	4b5d      	ldr	r3, [pc, #372]	@ (800299c <HAL_GPIO_Init+0x300>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282a:	4a5c      	ldr	r2, [pc, #368]	@ (800299c <HAL_GPIO_Init+0x300>)
 800282c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002830:	6453      	str	r3, [r2, #68]	@ 0x44
 8002832:	4b5a      	ldr	r3, [pc, #360]	@ (800299c <HAL_GPIO_Init+0x300>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800283e:	4a58      	ldr	r2, [pc, #352]	@ (80029a0 <HAL_GPIO_Init+0x304>)
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	089b      	lsrs	r3, r3, #2
 8002844:	3302      	adds	r3, #2
 8002846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	220f      	movs	r2, #15
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43db      	mvns	r3, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4013      	ands	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a4f      	ldr	r2, [pc, #316]	@ (80029a4 <HAL_GPIO_Init+0x308>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d025      	beq.n	80028b6 <HAL_GPIO_Init+0x21a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a4e      	ldr	r2, [pc, #312]	@ (80029a8 <HAL_GPIO_Init+0x30c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d01f      	beq.n	80028b2 <HAL_GPIO_Init+0x216>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a4d      	ldr	r2, [pc, #308]	@ (80029ac <HAL_GPIO_Init+0x310>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d019      	beq.n	80028ae <HAL_GPIO_Init+0x212>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a4c      	ldr	r2, [pc, #304]	@ (80029b0 <HAL_GPIO_Init+0x314>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d013      	beq.n	80028aa <HAL_GPIO_Init+0x20e>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a4b      	ldr	r2, [pc, #300]	@ (80029b4 <HAL_GPIO_Init+0x318>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00d      	beq.n	80028a6 <HAL_GPIO_Init+0x20a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4a      	ldr	r2, [pc, #296]	@ (80029b8 <HAL_GPIO_Init+0x31c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d007      	beq.n	80028a2 <HAL_GPIO_Init+0x206>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a49      	ldr	r2, [pc, #292]	@ (80029bc <HAL_GPIO_Init+0x320>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d101      	bne.n	800289e <HAL_GPIO_Init+0x202>
 800289a:	2306      	movs	r3, #6
 800289c:	e00c      	b.n	80028b8 <HAL_GPIO_Init+0x21c>
 800289e:	2307      	movs	r3, #7
 80028a0:	e00a      	b.n	80028b8 <HAL_GPIO_Init+0x21c>
 80028a2:	2305      	movs	r3, #5
 80028a4:	e008      	b.n	80028b8 <HAL_GPIO_Init+0x21c>
 80028a6:	2304      	movs	r3, #4
 80028a8:	e006      	b.n	80028b8 <HAL_GPIO_Init+0x21c>
 80028aa:	2303      	movs	r3, #3
 80028ac:	e004      	b.n	80028b8 <HAL_GPIO_Init+0x21c>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e002      	b.n	80028b8 <HAL_GPIO_Init+0x21c>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <HAL_GPIO_Init+0x21c>
 80028b6:	2300      	movs	r3, #0
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	f002 0203 	and.w	r2, r2, #3
 80028be:	0092      	lsls	r2, r2, #2
 80028c0:	4093      	lsls	r3, r2
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028c8:	4935      	ldr	r1, [pc, #212]	@ (80029a0 <HAL_GPIO_Init+0x304>)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	089b      	lsrs	r3, r3, #2
 80028ce:	3302      	adds	r3, #2
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028d6:	4b3a      	ldr	r3, [pc, #232]	@ (80029c0 <HAL_GPIO_Init+0x324>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028fa:	4a31      	ldr	r2, [pc, #196]	@ (80029c0 <HAL_GPIO_Init+0x324>)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002900:	4b2f      	ldr	r3, [pc, #188]	@ (80029c0 <HAL_GPIO_Init+0x324>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002924:	4a26      	ldr	r2, [pc, #152]	@ (80029c0 <HAL_GPIO_Init+0x324>)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800292a:	4b25      	ldr	r3, [pc, #148]	@ (80029c0 <HAL_GPIO_Init+0x324>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800294e:	4a1c      	ldr	r2, [pc, #112]	@ (80029c0 <HAL_GPIO_Init+0x324>)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002954:	4b1a      	ldr	r3, [pc, #104]	@ (80029c0 <HAL_GPIO_Init+0x324>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002978:	4a11      	ldr	r2, [pc, #68]	@ (80029c0 <HAL_GPIO_Init+0x324>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3301      	adds	r3, #1
 8002982:	61fb      	str	r3, [r7, #28]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b0f      	cmp	r3, #15
 8002988:	f67f ae96 	bls.w	80026b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	3724      	adds	r7, #36	@ 0x24
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800
 80029a0:	40013800 	.word	0x40013800
 80029a4:	40020000 	.word	0x40020000
 80029a8:	40020400 	.word	0x40020400
 80029ac:	40020800 	.word	0x40020800
 80029b0:	40020c00 	.word	0x40020c00
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40021400 	.word	0x40021400
 80029bc:	40021800 	.word	0x40021800
 80029c0:	40013c00 	.word	0x40013c00

080029c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e12b      	b.n	8002c2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d106      	bne.n	80029f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7ff fb34 	bl	8002058 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2224      	movs	r2, #36	@ 0x24
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0201 	bic.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a28:	f001 f8e2 	bl	8003bf0 <HAL_RCC_GetPCLK1Freq>
 8002a2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	4a81      	ldr	r2, [pc, #516]	@ (8002c38 <HAL_I2C_Init+0x274>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d807      	bhi.n	8002a48 <HAL_I2C_Init+0x84>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4a80      	ldr	r2, [pc, #512]	@ (8002c3c <HAL_I2C_Init+0x278>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	bf94      	ite	ls
 8002a40:	2301      	movls	r3, #1
 8002a42:	2300      	movhi	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	e006      	b.n	8002a56 <HAL_I2C_Init+0x92>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4a7d      	ldr	r2, [pc, #500]	@ (8002c40 <HAL_I2C_Init+0x27c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	bf94      	ite	ls
 8002a50:	2301      	movls	r3, #1
 8002a52:	2300      	movhi	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e0e7      	b.n	8002c2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4a78      	ldr	r2, [pc, #480]	@ (8002c44 <HAL_I2C_Init+0x280>)
 8002a62:	fba2 2303 	umull	r2, r3, r2, r3
 8002a66:	0c9b      	lsrs	r3, r3, #18
 8002a68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	4a6a      	ldr	r2, [pc, #424]	@ (8002c38 <HAL_I2C_Init+0x274>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d802      	bhi.n	8002a98 <HAL_I2C_Init+0xd4>
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	3301      	adds	r3, #1
 8002a96:	e009      	b.n	8002aac <HAL_I2C_Init+0xe8>
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a9e:	fb02 f303 	mul.w	r3, r2, r3
 8002aa2:	4a69      	ldr	r2, [pc, #420]	@ (8002c48 <HAL_I2C_Init+0x284>)
 8002aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa8:	099b      	lsrs	r3, r3, #6
 8002aaa:	3301      	adds	r3, #1
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002abe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	495c      	ldr	r1, [pc, #368]	@ (8002c38 <HAL_I2C_Init+0x274>)
 8002ac8:	428b      	cmp	r3, r1
 8002aca:	d819      	bhi.n	8002b00 <HAL_I2C_Init+0x13c>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	1e59      	subs	r1, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ada:	1c59      	adds	r1, r3, #1
 8002adc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ae0:	400b      	ands	r3, r1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00a      	beq.n	8002afc <HAL_I2C_Init+0x138>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1e59      	subs	r1, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002af4:	3301      	adds	r3, #1
 8002af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002afa:	e051      	b.n	8002ba0 <HAL_I2C_Init+0x1dc>
 8002afc:	2304      	movs	r3, #4
 8002afe:	e04f      	b.n	8002ba0 <HAL_I2C_Init+0x1dc>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d111      	bne.n	8002b2c <HAL_I2C_Init+0x168>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1e58      	subs	r0, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6859      	ldr	r1, [r3, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	440b      	add	r3, r1
 8002b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	e012      	b.n	8002b52 <HAL_I2C_Init+0x18e>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1e58      	subs	r0, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6859      	ldr	r1, [r3, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	0099      	lsls	r1, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b42:	3301      	adds	r3, #1
 8002b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_I2C_Init+0x196>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e022      	b.n	8002ba0 <HAL_I2C_Init+0x1dc>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10e      	bne.n	8002b80 <HAL_I2C_Init+0x1bc>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	1e58      	subs	r0, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6859      	ldr	r1, [r3, #4]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	440b      	add	r3, r1
 8002b70:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b74:	3301      	adds	r3, #1
 8002b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b7e:	e00f      	b.n	8002ba0 <HAL_I2C_Init+0x1dc>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	1e58      	subs	r0, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6859      	ldr	r1, [r3, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	0099      	lsls	r1, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b96:	3301      	adds	r3, #1
 8002b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	6809      	ldr	r1, [r1, #0]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69da      	ldr	r2, [r3, #28]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002bce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6911      	ldr	r1, [r2, #16]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68d2      	ldr	r2, [r2, #12]
 8002bda:	4311      	orrs	r1, r2
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	430b      	orrs	r3, r1
 8002be2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	000186a0 	.word	0x000186a0
 8002c3c:	001e847f 	.word	0x001e847f
 8002c40:	003d08ff 	.word	0x003d08ff
 8002c44:	431bde83 	.word	0x431bde83
 8002c48:	10624dd3 	.word	0x10624dd3

08002c4c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	4608      	mov	r0, r1
 8002c56:	4611      	mov	r1, r2
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	817b      	strh	r3, [r7, #10]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	813b      	strh	r3, [r7, #8]
 8002c62:	4613      	mov	r3, r2
 8002c64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c66:	f7ff fc03 	bl	8002470 <HAL_GetTick>
 8002c6a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	f040 80d9 	bne.w	8002e2c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	2319      	movs	r3, #25
 8002c80:	2201      	movs	r2, #1
 8002c82:	496d      	ldr	r1, [pc, #436]	@ (8002e38 <HAL_I2C_Mem_Write+0x1ec>)
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 fc8b 	bl	80035a0 <I2C_WaitOnFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c90:	2302      	movs	r3, #2
 8002c92:	e0cc      	b.n	8002e2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d101      	bne.n	8002ca2 <HAL_I2C_Mem_Write+0x56>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e0c5      	b.n	8002e2e <HAL_I2C_Mem_Write+0x1e2>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d007      	beq.n	8002cc8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0201 	orr.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cd6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2221      	movs	r2, #33	@ 0x21
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2240      	movs	r2, #64	@ 0x40
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a3a      	ldr	r2, [r7, #32]
 8002cf2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002cf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4a4d      	ldr	r2, [pc, #308]	@ (8002e3c <HAL_I2C_Mem_Write+0x1f0>)
 8002d08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d0a:	88f8      	ldrh	r0, [r7, #6]
 8002d0c:	893a      	ldrh	r2, [r7, #8]
 8002d0e:	8979      	ldrh	r1, [r7, #10]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	9301      	str	r3, [sp, #4]
 8002d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	4603      	mov	r3, r0
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 fac2 	bl	80032a4 <I2C_RequestMemoryWrite>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d052      	beq.n	8002dcc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e081      	b.n	8002e2e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 fd50 	bl	80037d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00d      	beq.n	8002d56 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d107      	bne.n	8002d52 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e06b      	b.n	8002e2e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5a:	781a      	ldrb	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d11b      	bne.n	8002dcc <HAL_I2C_Mem_Write+0x180>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d017      	beq.n	8002dcc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	781a      	ldrb	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1aa      	bne.n	8002d2a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 fd43 	bl	8003864 <I2C_WaitOnBTFFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00d      	beq.n	8002e00 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d107      	bne.n	8002dfc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dfa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e016      	b.n	8002e2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e000      	b.n	8002e2e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e2c:	2302      	movs	r3, #2
  }
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	00100002 	.word	0x00100002
 8002e3c:	ffff0000 	.word	0xffff0000

08002e40 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08c      	sub	sp, #48	@ 0x30
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	4608      	mov	r0, r1
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4603      	mov	r3, r0
 8002e50:	817b      	strh	r3, [r7, #10]
 8002e52:	460b      	mov	r3, r1
 8002e54:	813b      	strh	r3, [r7, #8]
 8002e56:	4613      	mov	r3, r2
 8002e58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e5a:	f7ff fb09 	bl	8002470 <HAL_GetTick>
 8002e5e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	f040 8214 	bne.w	8003296 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	2319      	movs	r3, #25
 8002e74:	2201      	movs	r2, #1
 8002e76:	497b      	ldr	r1, [pc, #492]	@ (8003064 <HAL_I2C_Mem_Read+0x224>)
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 fb91 	bl	80035a0 <I2C_WaitOnFlagUntilTimeout>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002e84:	2302      	movs	r3, #2
 8002e86:	e207      	b.n	8003298 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_I2C_Mem_Read+0x56>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e200      	b.n	8003298 <HAL_I2C_Mem_Read+0x458>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d007      	beq.n	8002ebc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002eca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2222      	movs	r2, #34	@ 0x22
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2240      	movs	r2, #64	@ 0x40
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ee6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002eec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4a5b      	ldr	r2, [pc, #364]	@ (8003068 <HAL_I2C_Mem_Read+0x228>)
 8002efc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002efe:	88f8      	ldrh	r0, [r7, #6]
 8002f00:	893a      	ldrh	r2, [r7, #8]
 8002f02:	8979      	ldrh	r1, [r7, #10]
 8002f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 fa5e 	bl	80033d0 <I2C_RequestMemoryRead>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e1bc      	b.n	8003298 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d113      	bne.n	8002f4e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f26:	2300      	movs	r3, #0
 8002f28:	623b      	str	r3, [r7, #32]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	623b      	str	r3, [r7, #32]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	623b      	str	r3, [r7, #32]
 8002f3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	e190      	b.n	8003270 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d11b      	bne.n	8002f8e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	61fb      	str	r3, [r7, #28]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	61fb      	str	r3, [r7, #28]
 8002f7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	e170      	b.n	8003270 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d11b      	bne.n	8002fce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fa4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61bb      	str	r3, [r7, #24]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	61bb      	str	r3, [r7, #24]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	e150      	b.n	8003270 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fce:	2300      	movs	r3, #0
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002fe4:	e144      	b.n	8003270 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	f200 80f1 	bhi.w	80031d2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d123      	bne.n	8003040 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ffa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 fc79 	bl	80038f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e145      	b.n	8003298 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	691a      	ldr	r2, [r3, #16]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003028:	3b01      	subs	r3, #1
 800302a:	b29a      	uxth	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003034:	b29b      	uxth	r3, r3
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800303e:	e117      	b.n	8003270 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003044:	2b02      	cmp	r3, #2
 8003046:	d14e      	bne.n	80030e6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800304e:	2200      	movs	r2, #0
 8003050:	4906      	ldr	r1, [pc, #24]	@ (800306c <HAL_I2C_Mem_Read+0x22c>)
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 faa4 	bl	80035a0 <I2C_WaitOnFlagUntilTimeout>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d008      	beq.n	8003070 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e11a      	b.n	8003298 <HAL_I2C_Mem_Read+0x458>
 8003062:	bf00      	nop
 8003064:	00100002 	.word	0x00100002
 8003068:	ffff0000 	.word	0xffff0000
 800306c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800307e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003092:	1c5a      	adds	r2, r3, #1
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030da:	b29b      	uxth	r3, r3
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030e4:	e0c4      	b.n	8003270 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ec:	2200      	movs	r2, #0
 80030ee:	496c      	ldr	r1, [pc, #432]	@ (80032a0 <HAL_I2C_Mem_Read+0x460>)
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 fa55 	bl	80035a0 <I2C_WaitOnFlagUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0cb      	b.n	8003298 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800310e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691a      	ldr	r2, [r3, #16]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003138:	b29b      	uxth	r3, r3
 800313a:	3b01      	subs	r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003148:	2200      	movs	r2, #0
 800314a:	4955      	ldr	r1, [pc, #340]	@ (80032a0 <HAL_I2C_Mem_Read+0x460>)
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 fa27 	bl	80035a0 <I2C_WaitOnFlagUntilTimeout>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e09d      	b.n	8003298 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800316a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691a      	ldr	r2, [r3, #16]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317e:	1c5a      	adds	r2, r3, #1
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003194:	b29b      	uxth	r3, r3
 8003196:	3b01      	subs	r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031d0:	e04e      	b.n	8003270 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031d4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 fb8c 	bl	80038f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e058      	b.n	8003298 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	691a      	ldr	r2, [r3, #16]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003202:	3b01      	subs	r3, #1
 8003204:	b29a      	uxth	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320e:	b29b      	uxth	r3, r3
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	2b04      	cmp	r3, #4
 8003224:	d124      	bne.n	8003270 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322a:	2b03      	cmp	r3, #3
 800322c:	d107      	bne.n	800323e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800323c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800325a:	3b01      	subs	r3, #1
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003266:	b29b      	uxth	r3, r3
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003274:	2b00      	cmp	r3, #0
 8003276:	f47f aeb6 	bne.w	8002fe6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003292:	2300      	movs	r3, #0
 8003294:	e000      	b.n	8003298 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003296:	2302      	movs	r3, #2
  }
}
 8003298:	4618      	mov	r0, r3
 800329a:	3728      	adds	r7, #40	@ 0x28
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	00010004 	.word	0x00010004

080032a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b088      	sub	sp, #32
 80032a8:	af02      	add	r7, sp, #8
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	4608      	mov	r0, r1
 80032ae:	4611      	mov	r1, r2
 80032b0:	461a      	mov	r2, r3
 80032b2:	4603      	mov	r3, r0
 80032b4:	817b      	strh	r3, [r7, #10]
 80032b6:	460b      	mov	r3, r1
 80032b8:	813b      	strh	r3, [r7, #8]
 80032ba:	4613      	mov	r3, r2
 80032bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 f960 	bl	80035a0 <I2C_WaitOnFlagUntilTimeout>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00d      	beq.n	8003302 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032f4:	d103      	bne.n	80032fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e05f      	b.n	80033c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003302:	897b      	ldrh	r3, [r7, #10]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	461a      	mov	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003310:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003314:	6a3a      	ldr	r2, [r7, #32]
 8003316:	492d      	ldr	r1, [pc, #180]	@ (80033cc <I2C_RequestMemoryWrite+0x128>)
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f9bb 	bl	8003694 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e04c      	b.n	80033c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800333e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003340:	6a39      	ldr	r1, [r7, #32]
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 fa46 	bl	80037d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00d      	beq.n	800336a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003352:	2b04      	cmp	r3, #4
 8003354:	d107      	bne.n	8003366 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003364:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e02b      	b.n	80033c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800336a:	88fb      	ldrh	r3, [r7, #6]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d105      	bne.n	800337c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003370:	893b      	ldrh	r3, [r7, #8]
 8003372:	b2da      	uxtb	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	611a      	str	r2, [r3, #16]
 800337a:	e021      	b.n	80033c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800337c:	893b      	ldrh	r3, [r7, #8]
 800337e:	0a1b      	lsrs	r3, r3, #8
 8003380:	b29b      	uxth	r3, r3
 8003382:	b2da      	uxtb	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800338a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800338c:	6a39      	ldr	r1, [r7, #32]
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 fa20 	bl	80037d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00d      	beq.n	80033b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d107      	bne.n	80033b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e005      	b.n	80033c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033b6:	893b      	ldrh	r3, [r7, #8]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	00010002 	.word	0x00010002

080033d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af02      	add	r7, sp, #8
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	4608      	mov	r0, r1
 80033da:	4611      	mov	r1, r2
 80033dc:	461a      	mov	r2, r3
 80033de:	4603      	mov	r3, r0
 80033e0:	817b      	strh	r3, [r7, #10]
 80033e2:	460b      	mov	r3, r1
 80033e4:	813b      	strh	r3, [r7, #8]
 80033e6:	4613      	mov	r3, r2
 80033e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003408:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800340a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	2200      	movs	r2, #0
 8003412:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f8c2 	bl	80035a0 <I2C_WaitOnFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00d      	beq.n	800343e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800342c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003430:	d103      	bne.n	800343a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003438:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e0aa      	b.n	8003594 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800343e:	897b      	ldrh	r3, [r7, #10]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	461a      	mov	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800344c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800344e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003450:	6a3a      	ldr	r2, [r7, #32]
 8003452:	4952      	ldr	r1, [pc, #328]	@ (800359c <I2C_RequestMemoryRead+0x1cc>)
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f91d 	bl	8003694 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e097      	b.n	8003594 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800347a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800347c:	6a39      	ldr	r1, [r7, #32]
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 f9a8 	bl	80037d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00d      	beq.n	80034a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	2b04      	cmp	r3, #4
 8003490:	d107      	bne.n	80034a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e076      	b.n	8003594 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034a6:	88fb      	ldrh	r3, [r7, #6]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d105      	bne.n	80034b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034ac:	893b      	ldrh	r3, [r7, #8]
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	611a      	str	r2, [r3, #16]
 80034b6:	e021      	b.n	80034fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034b8:	893b      	ldrh	r3, [r7, #8]
 80034ba:	0a1b      	lsrs	r3, r3, #8
 80034bc:	b29b      	uxth	r3, r3
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034c8:	6a39      	ldr	r1, [r7, #32]
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 f982 	bl	80037d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00d      	beq.n	80034f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d107      	bne.n	80034ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e050      	b.n	8003594 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034f2:	893b      	ldrh	r3, [r7, #8]
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034fe:	6a39      	ldr	r1, [r7, #32]
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 f967 	bl	80037d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00d      	beq.n	8003528 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003510:	2b04      	cmp	r3, #4
 8003512:	d107      	bne.n	8003524 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003522:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e035      	b.n	8003594 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003536:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	2200      	movs	r2, #0
 8003540:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f82b 	bl	80035a0 <I2C_WaitOnFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00d      	beq.n	800356c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800355a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800355e:	d103      	bne.n	8003568 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003566:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e013      	b.n	8003594 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800356c:	897b      	ldrh	r3, [r7, #10]
 800356e:	b2db      	uxtb	r3, r3
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	b2da      	uxtb	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800357c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357e:	6a3a      	ldr	r2, [r7, #32]
 8003580:	4906      	ldr	r1, [pc, #24]	@ (800359c <I2C_RequestMemoryRead+0x1cc>)
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 f886 	bl	8003694 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	00010002 	.word	0x00010002

080035a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	4613      	mov	r3, r2
 80035ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035b0:	e048      	b.n	8003644 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b8:	d044      	beq.n	8003644 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ba:	f7fe ff59 	bl	8002470 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d302      	bcc.n	80035d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d139      	bne.n	8003644 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	0c1b      	lsrs	r3, r3, #16
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d10d      	bne.n	80035f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	43da      	mvns	r2, r3
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	4013      	ands	r3, r2
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bf0c      	ite	eq
 80035ec:	2301      	moveq	r3, #1
 80035ee:	2300      	movne	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	461a      	mov	r2, r3
 80035f4:	e00c      	b.n	8003610 <I2C_WaitOnFlagUntilTimeout+0x70>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	43da      	mvns	r2, r3
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	4013      	ands	r3, r2
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	bf0c      	ite	eq
 8003608:	2301      	moveq	r3, #1
 800360a:	2300      	movne	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	461a      	mov	r2, r3
 8003610:	79fb      	ldrb	r3, [r7, #7]
 8003612:	429a      	cmp	r2, r3
 8003614:	d116      	bne.n	8003644 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003630:	f043 0220 	orr.w	r2, r3, #32
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e023      	b.n	800368c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	0c1b      	lsrs	r3, r3, #16
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b01      	cmp	r3, #1
 800364c:	d10d      	bne.n	800366a <I2C_WaitOnFlagUntilTimeout+0xca>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	43da      	mvns	r2, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	4013      	ands	r3, r2
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	bf0c      	ite	eq
 8003660:	2301      	moveq	r3, #1
 8003662:	2300      	movne	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	461a      	mov	r2, r3
 8003668:	e00c      	b.n	8003684 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	43da      	mvns	r2, r3
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	4013      	ands	r3, r2
 8003676:	b29b      	uxth	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	bf0c      	ite	eq
 800367c:	2301      	moveq	r3, #1
 800367e:	2300      	movne	r3, #0
 8003680:	b2db      	uxtb	r3, r3
 8003682:	461a      	mov	r2, r3
 8003684:	79fb      	ldrb	r3, [r7, #7]
 8003686:	429a      	cmp	r2, r3
 8003688:	d093      	beq.n	80035b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
 80036a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036a2:	e071      	b.n	8003788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036b2:	d123      	bne.n	80036fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e8:	f043 0204 	orr.w	r2, r3, #4
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e067      	b.n	80037cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003702:	d041      	beq.n	8003788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003704:	f7fe feb4 	bl	8002470 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	429a      	cmp	r2, r3
 8003712:	d302      	bcc.n	800371a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d136      	bne.n	8003788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	0c1b      	lsrs	r3, r3, #16
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b01      	cmp	r3, #1
 8003722:	d10c      	bne.n	800373e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	43da      	mvns	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4013      	ands	r3, r2
 8003730:	b29b      	uxth	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	bf14      	ite	ne
 8003736:	2301      	movne	r3, #1
 8003738:	2300      	moveq	r3, #0
 800373a:	b2db      	uxtb	r3, r3
 800373c:	e00b      	b.n	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	43da      	mvns	r2, r3
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	4013      	ands	r3, r2
 800374a:	b29b      	uxth	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	bf14      	ite	ne
 8003750:	2301      	movne	r3, #1
 8003752:	2300      	moveq	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d016      	beq.n	8003788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	f043 0220 	orr.w	r2, r3, #32
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e021      	b.n	80037cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	0c1b      	lsrs	r3, r3, #16
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b01      	cmp	r3, #1
 8003790:	d10c      	bne.n	80037ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	43da      	mvns	r2, r3
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	4013      	ands	r3, r2
 800379e:	b29b      	uxth	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	bf14      	ite	ne
 80037a4:	2301      	movne	r3, #1
 80037a6:	2300      	moveq	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	e00b      	b.n	80037c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	43da      	mvns	r2, r3
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	4013      	ands	r3, r2
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	bf14      	ite	ne
 80037be:	2301      	movne	r3, #1
 80037c0:	2300      	moveq	r3, #0
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f47f af6d 	bne.w	80036a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037e0:	e034      	b.n	800384c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 f8e3 	bl	80039ae <I2C_IsAcknowledgeFailed>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e034      	b.n	800385c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f8:	d028      	beq.n	800384c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fa:	f7fe fe39 	bl	8002470 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	429a      	cmp	r2, r3
 8003808:	d302      	bcc.n	8003810 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d11d      	bne.n	800384c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800381a:	2b80      	cmp	r3, #128	@ 0x80
 800381c:	d016      	beq.n	800384c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003838:	f043 0220 	orr.w	r2, r3, #32
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e007      	b.n	800385c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003856:	2b80      	cmp	r3, #128	@ 0x80
 8003858:	d1c3      	bne.n	80037e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003870:	e034      	b.n	80038dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 f89b 	bl	80039ae <I2C_IsAcknowledgeFailed>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e034      	b.n	80038ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003888:	d028      	beq.n	80038dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388a:	f7fe fdf1 	bl	8002470 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	429a      	cmp	r2, r3
 8003898:	d302      	bcc.n	80038a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d11d      	bne.n	80038dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d016      	beq.n	80038dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c8:	f043 0220 	orr.w	r2, r3, #32
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e007      	b.n	80038ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	f003 0304 	and.w	r3, r3, #4
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d1c3      	bne.n	8003872 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003900:	e049      	b.n	8003996 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	f003 0310 	and.w	r3, r3, #16
 800390c:	2b10      	cmp	r3, #16
 800390e:	d119      	bne.n	8003944 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f06f 0210 	mvn.w	r2, #16
 8003918:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e030      	b.n	80039a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003944:	f7fe fd94 	bl	8002470 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	429a      	cmp	r2, r3
 8003952:	d302      	bcc.n	800395a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d11d      	bne.n	8003996 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003964:	2b40      	cmp	r3, #64	@ 0x40
 8003966:	d016      	beq.n	8003996 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2220      	movs	r2, #32
 8003972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003982:	f043 0220 	orr.w	r2, r3, #32
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e007      	b.n	80039a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a0:	2b40      	cmp	r3, #64	@ 0x40
 80039a2:	d1ae      	bne.n	8003902 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039c4:	d11b      	bne.n	80039fe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039ce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2220      	movs	r2, #32
 80039da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ea:	f043 0204 	orr.w	r2, r3, #4
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e0cc      	b.n	8003bba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a20:	4b68      	ldr	r3, [pc, #416]	@ (8003bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 030f 	and.w	r3, r3, #15
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d90c      	bls.n	8003a48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2e:	4b65      	ldr	r3, [pc, #404]	@ (8003bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a36:	4b63      	ldr	r3, [pc, #396]	@ (8003bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d001      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e0b8      	b.n	8003bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d020      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a60:	4b59      	ldr	r3, [pc, #356]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	4a58      	ldr	r2, [pc, #352]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a78:	4b53      	ldr	r3, [pc, #332]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	4a52      	ldr	r2, [pc, #328]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a84:	4b50      	ldr	r3, [pc, #320]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	494d      	ldr	r1, [pc, #308]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d044      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d107      	bne.n	8003aba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aaa:	4b47      	ldr	r3, [pc, #284]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d119      	bne.n	8003aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e07f      	b.n	8003bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d003      	beq.n	8003aca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	d107      	bne.n	8003ada <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aca:	4b3f      	ldr	r3, [pc, #252]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d109      	bne.n	8003aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e06f      	b.n	8003bba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ada:	4b3b      	ldr	r3, [pc, #236]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e067      	b.n	8003bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aea:	4b37      	ldr	r3, [pc, #220]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f023 0203 	bic.w	r2, r3, #3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	4934      	ldr	r1, [pc, #208]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003afc:	f7fe fcb8 	bl	8002470 <HAL_GetTick>
 8003b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b02:	e00a      	b.n	8003b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b04:	f7fe fcb4 	bl	8002470 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e04f      	b.n	8003bba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 020c 	and.w	r2, r3, #12
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d1eb      	bne.n	8003b04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b2c:	4b25      	ldr	r3, [pc, #148]	@ (8003bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 030f 	and.w	r3, r3, #15
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d20c      	bcs.n	8003b54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3a:	4b22      	ldr	r3, [pc, #136]	@ (8003bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b42:	4b20      	ldr	r3, [pc, #128]	@ (8003bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d001      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e032      	b.n	8003bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d008      	beq.n	8003b72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b60:	4b19      	ldr	r3, [pc, #100]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	4916      	ldr	r1, [pc, #88]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d009      	beq.n	8003b92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b7e:	4b12      	ldr	r3, [pc, #72]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	490e      	ldr	r1, [pc, #56]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b92:	f000 f855 	bl	8003c40 <HAL_RCC_GetSysClockFreq>
 8003b96:	4602      	mov	r2, r0
 8003b98:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	091b      	lsrs	r3, r3, #4
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	490a      	ldr	r1, [pc, #40]	@ (8003bcc <HAL_RCC_ClockConfig+0x1c0>)
 8003ba4:	5ccb      	ldrb	r3, [r1, r3]
 8003ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8003baa:	4a09      	ldr	r2, [pc, #36]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003bae:	4b09      	ldr	r3, [pc, #36]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fe fc18 	bl	80023e8 <HAL_InitTick>

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40023c00 	.word	0x40023c00
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	08008e58 	.word	0x08008e58
 8003bd0:	20000004 	.word	0x20000004
 8003bd4:	20000008 	.word	0x20000008

08003bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bdc:	4b03      	ldr	r3, [pc, #12]	@ (8003bec <HAL_RCC_GetHCLKFreq+0x14>)
 8003bde:	681b      	ldr	r3, [r3, #0]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20000004 	.word	0x20000004

08003bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bf4:	f7ff fff0 	bl	8003bd8 <HAL_RCC_GetHCLKFreq>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	4b05      	ldr	r3, [pc, #20]	@ (8003c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	0a9b      	lsrs	r3, r3, #10
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	4903      	ldr	r1, [pc, #12]	@ (8003c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c06:	5ccb      	ldrb	r3, [r1, r3]
 8003c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40023800 	.word	0x40023800
 8003c14:	08008e68 	.word	0x08008e68

08003c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c1c:	f7ff ffdc 	bl	8003bd8 <HAL_RCC_GetHCLKFreq>
 8003c20:	4602      	mov	r2, r0
 8003c22:	4b05      	ldr	r3, [pc, #20]	@ (8003c38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	0b5b      	lsrs	r3, r3, #13
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	4903      	ldr	r1, [pc, #12]	@ (8003c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c2e:	5ccb      	ldrb	r3, [r1, r3]
 8003c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	08008e68 	.word	0x08008e68

08003c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c44:	b0a6      	sub	sp, #152	@ 0x98
 8003c46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c66:	4bc8      	ldr	r3, [pc, #800]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 030c 	and.w	r3, r3, #12
 8003c6e:	2b0c      	cmp	r3, #12
 8003c70:	f200 817e 	bhi.w	8003f70 <HAL_RCC_GetSysClockFreq+0x330>
 8003c74:	a201      	add	r2, pc, #4	@ (adr r2, 8003c7c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7a:	bf00      	nop
 8003c7c:	08003cb1 	.word	0x08003cb1
 8003c80:	08003f71 	.word	0x08003f71
 8003c84:	08003f71 	.word	0x08003f71
 8003c88:	08003f71 	.word	0x08003f71
 8003c8c:	08003cb9 	.word	0x08003cb9
 8003c90:	08003f71 	.word	0x08003f71
 8003c94:	08003f71 	.word	0x08003f71
 8003c98:	08003f71 	.word	0x08003f71
 8003c9c:	08003cc1 	.word	0x08003cc1
 8003ca0:	08003f71 	.word	0x08003f71
 8003ca4:	08003f71 	.word	0x08003f71
 8003ca8:	08003f71 	.word	0x08003f71
 8003cac:	08003e2b 	.word	0x08003e2b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cb0:	4bb6      	ldr	r3, [pc, #728]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003cb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003cb6:	e15f      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cb8:	4bb5      	ldr	r3, [pc, #724]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x350>)
 8003cba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003cbe:	e15b      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cc0:	4bb1      	ldr	r3, [pc, #708]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cc8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ccc:	4bae      	ldr	r3, [pc, #696]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d031      	beq.n	8003d3c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cd8:	4bab      	ldr	r3, [pc, #684]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	099b      	lsrs	r3, r3, #6
 8003cde:	2200      	movs	r2, #0
 8003ce0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ce2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ce4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cea:	663b      	str	r3, [r7, #96]	@ 0x60
 8003cec:	2300      	movs	r3, #0
 8003cee:	667b      	str	r3, [r7, #100]	@ 0x64
 8003cf0:	4ba7      	ldr	r3, [pc, #668]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x350>)
 8003cf2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003cf6:	462a      	mov	r2, r5
 8003cf8:	fb03 f202 	mul.w	r2, r3, r2
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	4621      	mov	r1, r4
 8003d00:	fb01 f303 	mul.w	r3, r1, r3
 8003d04:	4413      	add	r3, r2
 8003d06:	4aa2      	ldr	r2, [pc, #648]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x350>)
 8003d08:	4621      	mov	r1, r4
 8003d0a:	fba1 1202 	umull	r1, r2, r1, r2
 8003d0e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d10:	460a      	mov	r2, r1
 8003d12:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003d14:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003d16:	4413      	add	r3, r2
 8003d18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d1e:	2200      	movs	r2, #0
 8003d20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d22:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003d24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d28:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003d2c:	f7fc ffac 	bl	8000c88 <__aeabi_uldivmod>
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	4613      	mov	r3, r2
 8003d36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d3a:	e064      	b.n	8003e06 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d3c:	4b92      	ldr	r3, [pc, #584]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	099b      	lsrs	r3, r3, #6
 8003d42:	2200      	movs	r2, #0
 8003d44:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d46:	657a      	str	r2, [r7, #84]	@ 0x54
 8003d48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d50:	2300      	movs	r3, #0
 8003d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d54:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003d58:	4622      	mov	r2, r4
 8003d5a:	462b      	mov	r3, r5
 8003d5c:	f04f 0000 	mov.w	r0, #0
 8003d60:	f04f 0100 	mov.w	r1, #0
 8003d64:	0159      	lsls	r1, r3, #5
 8003d66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d6a:	0150      	lsls	r0, r2, #5
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4621      	mov	r1, r4
 8003d72:	1a51      	subs	r1, r2, r1
 8003d74:	6139      	str	r1, [r7, #16]
 8003d76:	4629      	mov	r1, r5
 8003d78:	eb63 0301 	sbc.w	r3, r3, r1
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d8a:	4659      	mov	r1, fp
 8003d8c:	018b      	lsls	r3, r1, #6
 8003d8e:	4651      	mov	r1, sl
 8003d90:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d94:	4651      	mov	r1, sl
 8003d96:	018a      	lsls	r2, r1, #6
 8003d98:	4651      	mov	r1, sl
 8003d9a:	ebb2 0801 	subs.w	r8, r2, r1
 8003d9e:	4659      	mov	r1, fp
 8003da0:	eb63 0901 	sbc.w	r9, r3, r1
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003db0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003db4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003db8:	4690      	mov	r8, r2
 8003dba:	4699      	mov	r9, r3
 8003dbc:	4623      	mov	r3, r4
 8003dbe:	eb18 0303 	adds.w	r3, r8, r3
 8003dc2:	60bb      	str	r3, [r7, #8]
 8003dc4:	462b      	mov	r3, r5
 8003dc6:	eb49 0303 	adc.w	r3, r9, r3
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003dd8:	4629      	mov	r1, r5
 8003dda:	028b      	lsls	r3, r1, #10
 8003ddc:	4621      	mov	r1, r4
 8003dde:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003de2:	4621      	mov	r1, r4
 8003de4:	028a      	lsls	r2, r1, #10
 8003de6:	4610      	mov	r0, r2
 8003de8:	4619      	mov	r1, r3
 8003dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dee:	2200      	movs	r2, #0
 8003df0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003df2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003df4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003df8:	f7fc ff46 	bl	8000c88 <__aeabi_uldivmod>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4613      	mov	r3, r2
 8003e02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003e06:	4b60      	ldr	r3, [pc, #384]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	0c1b      	lsrs	r3, r3, #16
 8003e0c:	f003 0303 	and.w	r3, r3, #3
 8003e10:	3301      	adds	r3, #1
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003e18:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003e28:	e0a6      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e2a:	4b57      	ldr	r3, [pc, #348]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e36:	4b54      	ldr	r3, [pc, #336]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d02a      	beq.n	8003e98 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e42:	4b51      	ldr	r3, [pc, #324]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	099b      	lsrs	r3, r3, #6
 8003e48:	2200      	movs	r2, #0
 8003e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e54:	2100      	movs	r1, #0
 8003e56:	4b4e      	ldr	r3, [pc, #312]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x350>)
 8003e58:	fb03 f201 	mul.w	r2, r3, r1
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	fb00 f303 	mul.w	r3, r0, r3
 8003e62:	4413      	add	r3, r2
 8003e64:	4a4a      	ldr	r2, [pc, #296]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x350>)
 8003e66:	fba0 1202 	umull	r1, r2, r0, r2
 8003e6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e6c:	460a      	mov	r2, r1
 8003e6e:	673a      	str	r2, [r7, #112]	@ 0x70
 8003e70:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003e72:	4413      	add	r3, r2
 8003e74:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e7e:	637a      	str	r2, [r7, #52]	@ 0x34
 8003e80:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003e84:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003e88:	f7fc fefe 	bl	8000c88 <__aeabi_uldivmod>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4613      	mov	r3, r2
 8003e92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e96:	e05b      	b.n	8003f50 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e98:	4b3b      	ldr	r3, [pc, #236]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	099b      	lsrs	r3, r3, #6
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ea2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eaa:	623b      	str	r3, [r7, #32]
 8003eac:	2300      	movs	r3, #0
 8003eae:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003eb4:	4642      	mov	r2, r8
 8003eb6:	464b      	mov	r3, r9
 8003eb8:	f04f 0000 	mov.w	r0, #0
 8003ebc:	f04f 0100 	mov.w	r1, #0
 8003ec0:	0159      	lsls	r1, r3, #5
 8003ec2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ec6:	0150      	lsls	r0, r2, #5
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4641      	mov	r1, r8
 8003ece:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ed2:	4649      	mov	r1, r9
 8003ed4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ee4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ee8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003eec:	ebb2 040a 	subs.w	r4, r2, sl
 8003ef0:	eb63 050b 	sbc.w	r5, r3, fp
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	00eb      	lsls	r3, r5, #3
 8003efe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f02:	00e2      	lsls	r2, r4, #3
 8003f04:	4614      	mov	r4, r2
 8003f06:	461d      	mov	r5, r3
 8003f08:	4643      	mov	r3, r8
 8003f0a:	18e3      	adds	r3, r4, r3
 8003f0c:	603b      	str	r3, [r7, #0]
 8003f0e:	464b      	mov	r3, r9
 8003f10:	eb45 0303 	adc.w	r3, r5, r3
 8003f14:	607b      	str	r3, [r7, #4]
 8003f16:	f04f 0200 	mov.w	r2, #0
 8003f1a:	f04f 0300 	mov.w	r3, #0
 8003f1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f22:	4629      	mov	r1, r5
 8003f24:	028b      	lsls	r3, r1, #10
 8003f26:	4621      	mov	r1, r4
 8003f28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f2c:	4621      	mov	r1, r4
 8003f2e:	028a      	lsls	r2, r1, #10
 8003f30:	4610      	mov	r0, r2
 8003f32:	4619      	mov	r1, r3
 8003f34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f38:	2200      	movs	r2, #0
 8003f3a:	61bb      	str	r3, [r7, #24]
 8003f3c:	61fa      	str	r2, [r7, #28]
 8003f3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f42:	f7fc fea1 	bl	8000c88 <__aeabi_uldivmod>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f50:	4b0d      	ldr	r3, [pc, #52]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x348>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	0f1b      	lsrs	r3, r3, #28
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003f5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003f6e:	e003      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f70:	4b06      	ldr	r3, [pc, #24]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003f72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003f76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f78:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3798      	adds	r7, #152	@ 0x98
 8003f80:	46bd      	mov	sp, r7
 8003f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f86:	bf00      	nop
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	00f42400 	.word	0x00f42400
 8003f90:	017d7840 	.word	0x017d7840

08003f94 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e28d      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 8083 	beq.w	80040ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003fb4:	4b94      	ldr	r3, [pc, #592]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 030c 	and.w	r3, r3, #12
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d019      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003fc0:	4b91      	ldr	r3, [pc, #580]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 030c 	and.w	r3, r3, #12
        || \
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d106      	bne.n	8003fda <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003fcc:	4b8e      	ldr	r3, [pc, #568]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fd8:	d00c      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fda:	4b8b      	ldr	r3, [pc, #556]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003fe2:	2b0c      	cmp	r3, #12
 8003fe4:	d112      	bne.n	800400c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fe6:	4b88      	ldr	r3, [pc, #544]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ff2:	d10b      	bne.n	800400c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff4:	4b84      	ldr	r3, [pc, #528]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d05b      	beq.n	80040b8 <HAL_RCC_OscConfig+0x124>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d157      	bne.n	80040b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e25a      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004014:	d106      	bne.n	8004024 <HAL_RCC_OscConfig+0x90>
 8004016:	4b7c      	ldr	r3, [pc, #496]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a7b      	ldr	r2, [pc, #492]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 800401c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004020:	6013      	str	r3, [r2, #0]
 8004022:	e01d      	b.n	8004060 <HAL_RCC_OscConfig+0xcc>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800402c:	d10c      	bne.n	8004048 <HAL_RCC_OscConfig+0xb4>
 800402e:	4b76      	ldr	r3, [pc, #472]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a75      	ldr	r2, [pc, #468]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8004034:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	4b73      	ldr	r3, [pc, #460]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a72      	ldr	r2, [pc, #456]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8004040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	e00b      	b.n	8004060 <HAL_RCC_OscConfig+0xcc>
 8004048:	4b6f      	ldr	r3, [pc, #444]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a6e      	ldr	r2, [pc, #440]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 800404e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	4b6c      	ldr	r3, [pc, #432]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a6b      	ldr	r2, [pc, #428]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 800405a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800405e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d013      	beq.n	8004090 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004068:	f7fe fa02 	bl	8002470 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004070:	f7fe f9fe 	bl	8002470 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b64      	cmp	r3, #100	@ 0x64
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e21f      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004082:	4b61      	ldr	r3, [pc, #388]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0xdc>
 800408e:	e014      	b.n	80040ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004090:	f7fe f9ee 	bl	8002470 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004098:	f7fe f9ea 	bl	8002470 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b64      	cmp	r3, #100	@ 0x64
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e20b      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040aa:	4b57      	ldr	r3, [pc, #348]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f0      	bne.n	8004098 <HAL_RCC_OscConfig+0x104>
 80040b6:	e000      	b.n	80040ba <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d06f      	beq.n	80041a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80040c6:	4b50      	ldr	r3, [pc, #320]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 030c 	and.w	r3, r3, #12
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d017      	beq.n	8004102 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80040d2:	4b4d      	ldr	r3, [pc, #308]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 030c 	and.w	r3, r3, #12
        || \
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d105      	bne.n	80040ea <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80040de:	4b4a      	ldr	r3, [pc, #296]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00b      	beq.n	8004102 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ea:	4b47      	ldr	r3, [pc, #284]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80040f2:	2b0c      	cmp	r3, #12
 80040f4:	d11c      	bne.n	8004130 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040f6:	4b44      	ldr	r3, [pc, #272]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d116      	bne.n	8004130 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004102:	4b41      	ldr	r3, [pc, #260]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d005      	beq.n	800411a <HAL_RCC_OscConfig+0x186>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d001      	beq.n	800411a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e1d3      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411a:	4b3b      	ldr	r3, [pc, #236]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	4937      	ldr	r1, [pc, #220]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 800412a:	4313      	orrs	r3, r2
 800412c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800412e:	e03a      	b.n	80041a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d020      	beq.n	800417a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004138:	4b34      	ldr	r3, [pc, #208]	@ (800420c <HAL_RCC_OscConfig+0x278>)
 800413a:	2201      	movs	r2, #1
 800413c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413e:	f7fe f997 	bl	8002470 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004146:	f7fe f993 	bl	8002470 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e1b4      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004158:	4b2b      	ldr	r3, [pc, #172]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0f0      	beq.n	8004146 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004164:	4b28      	ldr	r3, [pc, #160]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	4925      	ldr	r1, [pc, #148]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 8004174:	4313      	orrs	r3, r2
 8004176:	600b      	str	r3, [r1, #0]
 8004178:	e015      	b.n	80041a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800417a:	4b24      	ldr	r3, [pc, #144]	@ (800420c <HAL_RCC_OscConfig+0x278>)
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004180:	f7fe f976 	bl	8002470 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004188:	f7fe f972 	bl	8002470 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e193      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800419a:	4b1b      	ldr	r3, [pc, #108]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d036      	beq.n	8004220 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d016      	beq.n	80041e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ba:	4b15      	ldr	r3, [pc, #84]	@ (8004210 <HAL_RCC_OscConfig+0x27c>)
 80041bc:	2201      	movs	r2, #1
 80041be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c0:	f7fe f956 	bl	8002470 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c8:	f7fe f952 	bl	8002470 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e173      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041da:	4b0b      	ldr	r3, [pc, #44]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 80041dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0f0      	beq.n	80041c8 <HAL_RCC_OscConfig+0x234>
 80041e6:	e01b      	b.n	8004220 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041e8:	4b09      	ldr	r3, [pc, #36]	@ (8004210 <HAL_RCC_OscConfig+0x27c>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ee:	f7fe f93f 	bl	8002470 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f4:	e00e      	b.n	8004214 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f6:	f7fe f93b 	bl	8002470 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d907      	bls.n	8004214 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e15c      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
 8004208:	40023800 	.word	0x40023800
 800420c:	42470000 	.word	0x42470000
 8004210:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004214:	4b8a      	ldr	r3, [pc, #552]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 8004216:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1ea      	bne.n	80041f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 8097 	beq.w	800435c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800422e:	2300      	movs	r3, #0
 8004230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004232:	4b83      	ldr	r3, [pc, #524]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10f      	bne.n	800425e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800423e:	2300      	movs	r3, #0
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	4b7f      	ldr	r3, [pc, #508]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004246:	4a7e      	ldr	r2, [pc, #504]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 8004248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800424c:	6413      	str	r3, [r2, #64]	@ 0x40
 800424e:	4b7c      	ldr	r3, [pc, #496]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 8004250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004256:	60bb      	str	r3, [r7, #8]
 8004258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800425a:	2301      	movs	r3, #1
 800425c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800425e:	4b79      	ldr	r3, [pc, #484]	@ (8004444 <HAL_RCC_OscConfig+0x4b0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004266:	2b00      	cmp	r3, #0
 8004268:	d118      	bne.n	800429c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800426a:	4b76      	ldr	r3, [pc, #472]	@ (8004444 <HAL_RCC_OscConfig+0x4b0>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a75      	ldr	r2, [pc, #468]	@ (8004444 <HAL_RCC_OscConfig+0x4b0>)
 8004270:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004276:	f7fe f8fb 	bl	8002470 <HAL_GetTick>
 800427a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800427c:	e008      	b.n	8004290 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800427e:	f7fe f8f7 	bl	8002470 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e118      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004290:	4b6c      	ldr	r3, [pc, #432]	@ (8004444 <HAL_RCC_OscConfig+0x4b0>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0f0      	beq.n	800427e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d106      	bne.n	80042b2 <HAL_RCC_OscConfig+0x31e>
 80042a4:	4b66      	ldr	r3, [pc, #408]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 80042a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042a8:	4a65      	ldr	r2, [pc, #404]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 80042aa:	f043 0301 	orr.w	r3, r3, #1
 80042ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80042b0:	e01c      	b.n	80042ec <HAL_RCC_OscConfig+0x358>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	2b05      	cmp	r3, #5
 80042b8:	d10c      	bne.n	80042d4 <HAL_RCC_OscConfig+0x340>
 80042ba:	4b61      	ldr	r3, [pc, #388]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 80042bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042be:	4a60      	ldr	r2, [pc, #384]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 80042c0:	f043 0304 	orr.w	r3, r3, #4
 80042c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80042c6:	4b5e      	ldr	r3, [pc, #376]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ca:	4a5d      	ldr	r2, [pc, #372]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 80042cc:	f043 0301 	orr.w	r3, r3, #1
 80042d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80042d2:	e00b      	b.n	80042ec <HAL_RCC_OscConfig+0x358>
 80042d4:	4b5a      	ldr	r3, [pc, #360]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 80042d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d8:	4a59      	ldr	r2, [pc, #356]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 80042da:	f023 0301 	bic.w	r3, r3, #1
 80042de:	6713      	str	r3, [r2, #112]	@ 0x70
 80042e0:	4b57      	ldr	r3, [pc, #348]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 80042e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e4:	4a56      	ldr	r2, [pc, #344]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 80042e6:	f023 0304 	bic.w	r3, r3, #4
 80042ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d015      	beq.n	8004320 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f4:	f7fe f8bc 	bl	8002470 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042fa:	e00a      	b.n	8004312 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fc:	f7fe f8b8 	bl	8002470 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800430a:	4293      	cmp	r3, r2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e0d7      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004312:	4b4b      	ldr	r3, [pc, #300]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 8004314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0ee      	beq.n	80042fc <HAL_RCC_OscConfig+0x368>
 800431e:	e014      	b.n	800434a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004320:	f7fe f8a6 	bl	8002470 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004326:	e00a      	b.n	800433e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004328:	f7fe f8a2 	bl	8002470 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004336:	4293      	cmp	r3, r2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e0c1      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800433e:	4b40      	ldr	r3, [pc, #256]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 8004340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1ee      	bne.n	8004328 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800434a:	7dfb      	ldrb	r3, [r7, #23]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d105      	bne.n	800435c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004350:	4b3b      	ldr	r3, [pc, #236]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 8004352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004354:	4a3a      	ldr	r2, [pc, #232]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 8004356:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800435a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 80ad 	beq.w	80044c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004366:	4b36      	ldr	r3, [pc, #216]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	2b08      	cmp	r3, #8
 8004370:	d060      	beq.n	8004434 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	2b02      	cmp	r3, #2
 8004378:	d145      	bne.n	8004406 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800437a:	4b33      	ldr	r3, [pc, #204]	@ (8004448 <HAL_RCC_OscConfig+0x4b4>)
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004380:	f7fe f876 	bl	8002470 <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004388:	f7fe f872 	bl	8002470 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e093      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800439a:	4b29      	ldr	r3, [pc, #164]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1f0      	bne.n	8004388 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69da      	ldr	r2, [r3, #28]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b4:	019b      	lsls	r3, r3, #6
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043bc:	085b      	lsrs	r3, r3, #1
 80043be:	3b01      	subs	r3, #1
 80043c0:	041b      	lsls	r3, r3, #16
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c8:	061b      	lsls	r3, r3, #24
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d0:	071b      	lsls	r3, r3, #28
 80043d2:	491b      	ldr	r1, [pc, #108]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004448 <HAL_RCC_OscConfig+0x4b4>)
 80043da:	2201      	movs	r2, #1
 80043dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043de:	f7fe f847 	bl	8002470 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e4:	e008      	b.n	80043f8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e6:	f7fe f843 	bl	8002470 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e064      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043f8:	4b11      	ldr	r3, [pc, #68]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0f0      	beq.n	80043e6 <HAL_RCC_OscConfig+0x452>
 8004404:	e05c      	b.n	80044c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004406:	4b10      	ldr	r3, [pc, #64]	@ (8004448 <HAL_RCC_OscConfig+0x4b4>)
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fe f830 	bl	8002470 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004414:	f7fe f82c 	bl	8002470 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e04d      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004426:	4b06      	ldr	r3, [pc, #24]	@ (8004440 <HAL_RCC_OscConfig+0x4ac>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0x480>
 8004432:	e045      	b.n	80044c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d107      	bne.n	800444c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e040      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
 8004440:	40023800 	.word	0x40023800
 8004444:	40007000 	.word	0x40007000
 8004448:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800444c:	4b1f      	ldr	r3, [pc, #124]	@ (80044cc <HAL_RCC_OscConfig+0x538>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d030      	beq.n	80044bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004464:	429a      	cmp	r2, r3
 8004466:	d129      	bne.n	80044bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004472:	429a      	cmp	r2, r3
 8004474:	d122      	bne.n	80044bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800447c:	4013      	ands	r3, r2
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004482:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004484:	4293      	cmp	r3, r2
 8004486:	d119      	bne.n	80044bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004492:	085b      	lsrs	r3, r3, #1
 8004494:	3b01      	subs	r3, #1
 8004496:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004498:	429a      	cmp	r2, r3
 800449a:	d10f      	bne.n	80044bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d107      	bne.n	80044bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d001      	beq.n	80044c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	40023800 	.word	0x40023800

080044d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e042      	b.n	8004568 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fd fdf6 	bl	80020e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2224      	movs	r2, #36	@ 0x24
 8004500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004512:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f82b 	bl	8004570 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004528:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	695a      	ldr	r2, [r3, #20]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004538:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004548:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004574:	b0c0      	sub	sp, #256	@ 0x100
 8004576:	af00      	add	r7, sp, #0
 8004578:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458c:	68d9      	ldr	r1, [r3, #12]
 800458e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	ea40 0301 	orr.w	r3, r0, r1
 8004598:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800459a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	431a      	orrs	r2, r3
 80045a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	431a      	orrs	r2, r3
 80045b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80045c8:	f021 010c 	bic.w	r1, r1, #12
 80045cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80045d6:	430b      	orrs	r3, r1
 80045d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80045e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ea:	6999      	ldr	r1, [r3, #24]
 80045ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	ea40 0301 	orr.w	r3, r0, r1
 80045f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	4b8f      	ldr	r3, [pc, #572]	@ (800483c <UART_SetConfig+0x2cc>)
 8004600:	429a      	cmp	r2, r3
 8004602:	d005      	beq.n	8004610 <UART_SetConfig+0xa0>
 8004604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	4b8d      	ldr	r3, [pc, #564]	@ (8004840 <UART_SetConfig+0x2d0>)
 800460c:	429a      	cmp	r2, r3
 800460e:	d104      	bne.n	800461a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004610:	f7ff fb02 	bl	8003c18 <HAL_RCC_GetPCLK2Freq>
 8004614:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004618:	e003      	b.n	8004622 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800461a:	f7ff fae9 	bl	8003bf0 <HAL_RCC_GetPCLK1Freq>
 800461e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800462c:	f040 810c 	bne.w	8004848 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004634:	2200      	movs	r2, #0
 8004636:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800463a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800463e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004642:	4622      	mov	r2, r4
 8004644:	462b      	mov	r3, r5
 8004646:	1891      	adds	r1, r2, r2
 8004648:	65b9      	str	r1, [r7, #88]	@ 0x58
 800464a:	415b      	adcs	r3, r3
 800464c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800464e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004652:	4621      	mov	r1, r4
 8004654:	eb12 0801 	adds.w	r8, r2, r1
 8004658:	4629      	mov	r1, r5
 800465a:	eb43 0901 	adc.w	r9, r3, r1
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	f04f 0300 	mov.w	r3, #0
 8004666:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800466a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800466e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004672:	4690      	mov	r8, r2
 8004674:	4699      	mov	r9, r3
 8004676:	4623      	mov	r3, r4
 8004678:	eb18 0303 	adds.w	r3, r8, r3
 800467c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004680:	462b      	mov	r3, r5
 8004682:	eb49 0303 	adc.w	r3, r9, r3
 8004686:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800468a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004696:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800469a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800469e:	460b      	mov	r3, r1
 80046a0:	18db      	adds	r3, r3, r3
 80046a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80046a4:	4613      	mov	r3, r2
 80046a6:	eb42 0303 	adc.w	r3, r2, r3
 80046aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80046ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80046b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80046b4:	f7fc fae8 	bl	8000c88 <__aeabi_uldivmod>
 80046b8:	4602      	mov	r2, r0
 80046ba:	460b      	mov	r3, r1
 80046bc:	4b61      	ldr	r3, [pc, #388]	@ (8004844 <UART_SetConfig+0x2d4>)
 80046be:	fba3 2302 	umull	r2, r3, r3, r2
 80046c2:	095b      	lsrs	r3, r3, #5
 80046c4:	011c      	lsls	r4, r3, #4
 80046c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046ca:	2200      	movs	r2, #0
 80046cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80046d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80046d8:	4642      	mov	r2, r8
 80046da:	464b      	mov	r3, r9
 80046dc:	1891      	adds	r1, r2, r2
 80046de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80046e0:	415b      	adcs	r3, r3
 80046e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046e8:	4641      	mov	r1, r8
 80046ea:	eb12 0a01 	adds.w	sl, r2, r1
 80046ee:	4649      	mov	r1, r9
 80046f0:	eb43 0b01 	adc.w	fp, r3, r1
 80046f4:	f04f 0200 	mov.w	r2, #0
 80046f8:	f04f 0300 	mov.w	r3, #0
 80046fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004700:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004704:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004708:	4692      	mov	sl, r2
 800470a:	469b      	mov	fp, r3
 800470c:	4643      	mov	r3, r8
 800470e:	eb1a 0303 	adds.w	r3, sl, r3
 8004712:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004716:	464b      	mov	r3, r9
 8004718:	eb4b 0303 	adc.w	r3, fp, r3
 800471c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800472c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004730:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004734:	460b      	mov	r3, r1
 8004736:	18db      	adds	r3, r3, r3
 8004738:	643b      	str	r3, [r7, #64]	@ 0x40
 800473a:	4613      	mov	r3, r2
 800473c:	eb42 0303 	adc.w	r3, r2, r3
 8004740:	647b      	str	r3, [r7, #68]	@ 0x44
 8004742:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004746:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800474a:	f7fc fa9d 	bl	8000c88 <__aeabi_uldivmod>
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	4611      	mov	r1, r2
 8004754:	4b3b      	ldr	r3, [pc, #236]	@ (8004844 <UART_SetConfig+0x2d4>)
 8004756:	fba3 2301 	umull	r2, r3, r3, r1
 800475a:	095b      	lsrs	r3, r3, #5
 800475c:	2264      	movs	r2, #100	@ 0x64
 800475e:	fb02 f303 	mul.w	r3, r2, r3
 8004762:	1acb      	subs	r3, r1, r3
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800476a:	4b36      	ldr	r3, [pc, #216]	@ (8004844 <UART_SetConfig+0x2d4>)
 800476c:	fba3 2302 	umull	r2, r3, r3, r2
 8004770:	095b      	lsrs	r3, r3, #5
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004778:	441c      	add	r4, r3
 800477a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800477e:	2200      	movs	r2, #0
 8004780:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004784:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004788:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800478c:	4642      	mov	r2, r8
 800478e:	464b      	mov	r3, r9
 8004790:	1891      	adds	r1, r2, r2
 8004792:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004794:	415b      	adcs	r3, r3
 8004796:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004798:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800479c:	4641      	mov	r1, r8
 800479e:	1851      	adds	r1, r2, r1
 80047a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80047a2:	4649      	mov	r1, r9
 80047a4:	414b      	adcs	r3, r1
 80047a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80047a8:	f04f 0200 	mov.w	r2, #0
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80047b4:	4659      	mov	r1, fp
 80047b6:	00cb      	lsls	r3, r1, #3
 80047b8:	4651      	mov	r1, sl
 80047ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047be:	4651      	mov	r1, sl
 80047c0:	00ca      	lsls	r2, r1, #3
 80047c2:	4610      	mov	r0, r2
 80047c4:	4619      	mov	r1, r3
 80047c6:	4603      	mov	r3, r0
 80047c8:	4642      	mov	r2, r8
 80047ca:	189b      	adds	r3, r3, r2
 80047cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047d0:	464b      	mov	r3, r9
 80047d2:	460a      	mov	r2, r1
 80047d4:	eb42 0303 	adc.w	r3, r2, r3
 80047d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80047ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80047f0:	460b      	mov	r3, r1
 80047f2:	18db      	adds	r3, r3, r3
 80047f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047f6:	4613      	mov	r3, r2
 80047f8:	eb42 0303 	adc.w	r3, r2, r3
 80047fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004802:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004806:	f7fc fa3f 	bl	8000c88 <__aeabi_uldivmod>
 800480a:	4602      	mov	r2, r0
 800480c:	460b      	mov	r3, r1
 800480e:	4b0d      	ldr	r3, [pc, #52]	@ (8004844 <UART_SetConfig+0x2d4>)
 8004810:	fba3 1302 	umull	r1, r3, r3, r2
 8004814:	095b      	lsrs	r3, r3, #5
 8004816:	2164      	movs	r1, #100	@ 0x64
 8004818:	fb01 f303 	mul.w	r3, r1, r3
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	3332      	adds	r3, #50	@ 0x32
 8004822:	4a08      	ldr	r2, [pc, #32]	@ (8004844 <UART_SetConfig+0x2d4>)
 8004824:	fba2 2303 	umull	r2, r3, r2, r3
 8004828:	095b      	lsrs	r3, r3, #5
 800482a:	f003 0207 	and.w	r2, r3, #7
 800482e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4422      	add	r2, r4
 8004836:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004838:	e106      	b.n	8004a48 <UART_SetConfig+0x4d8>
 800483a:	bf00      	nop
 800483c:	40011000 	.word	0x40011000
 8004840:	40011400 	.word	0x40011400
 8004844:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004848:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800484c:	2200      	movs	r2, #0
 800484e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004852:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004856:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800485a:	4642      	mov	r2, r8
 800485c:	464b      	mov	r3, r9
 800485e:	1891      	adds	r1, r2, r2
 8004860:	6239      	str	r1, [r7, #32]
 8004862:	415b      	adcs	r3, r3
 8004864:	627b      	str	r3, [r7, #36]	@ 0x24
 8004866:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800486a:	4641      	mov	r1, r8
 800486c:	1854      	adds	r4, r2, r1
 800486e:	4649      	mov	r1, r9
 8004870:	eb43 0501 	adc.w	r5, r3, r1
 8004874:	f04f 0200 	mov.w	r2, #0
 8004878:	f04f 0300 	mov.w	r3, #0
 800487c:	00eb      	lsls	r3, r5, #3
 800487e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004882:	00e2      	lsls	r2, r4, #3
 8004884:	4614      	mov	r4, r2
 8004886:	461d      	mov	r5, r3
 8004888:	4643      	mov	r3, r8
 800488a:	18e3      	adds	r3, r4, r3
 800488c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004890:	464b      	mov	r3, r9
 8004892:	eb45 0303 	adc.w	r3, r5, r3
 8004896:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800489a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048aa:	f04f 0200 	mov.w	r2, #0
 80048ae:	f04f 0300 	mov.w	r3, #0
 80048b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048b6:	4629      	mov	r1, r5
 80048b8:	008b      	lsls	r3, r1, #2
 80048ba:	4621      	mov	r1, r4
 80048bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048c0:	4621      	mov	r1, r4
 80048c2:	008a      	lsls	r2, r1, #2
 80048c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80048c8:	f7fc f9de 	bl	8000c88 <__aeabi_uldivmod>
 80048cc:	4602      	mov	r2, r0
 80048ce:	460b      	mov	r3, r1
 80048d0:	4b60      	ldr	r3, [pc, #384]	@ (8004a54 <UART_SetConfig+0x4e4>)
 80048d2:	fba3 2302 	umull	r2, r3, r3, r2
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	011c      	lsls	r4, r3, #4
 80048da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048de:	2200      	movs	r2, #0
 80048e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80048e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80048ec:	4642      	mov	r2, r8
 80048ee:	464b      	mov	r3, r9
 80048f0:	1891      	adds	r1, r2, r2
 80048f2:	61b9      	str	r1, [r7, #24]
 80048f4:	415b      	adcs	r3, r3
 80048f6:	61fb      	str	r3, [r7, #28]
 80048f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048fc:	4641      	mov	r1, r8
 80048fe:	1851      	adds	r1, r2, r1
 8004900:	6139      	str	r1, [r7, #16]
 8004902:	4649      	mov	r1, r9
 8004904:	414b      	adcs	r3, r1
 8004906:	617b      	str	r3, [r7, #20]
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004914:	4659      	mov	r1, fp
 8004916:	00cb      	lsls	r3, r1, #3
 8004918:	4651      	mov	r1, sl
 800491a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800491e:	4651      	mov	r1, sl
 8004920:	00ca      	lsls	r2, r1, #3
 8004922:	4610      	mov	r0, r2
 8004924:	4619      	mov	r1, r3
 8004926:	4603      	mov	r3, r0
 8004928:	4642      	mov	r2, r8
 800492a:	189b      	adds	r3, r3, r2
 800492c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004930:	464b      	mov	r3, r9
 8004932:	460a      	mov	r2, r1
 8004934:	eb42 0303 	adc.w	r3, r2, r3
 8004938:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800493c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004946:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004948:	f04f 0200 	mov.w	r2, #0
 800494c:	f04f 0300 	mov.w	r3, #0
 8004950:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004954:	4649      	mov	r1, r9
 8004956:	008b      	lsls	r3, r1, #2
 8004958:	4641      	mov	r1, r8
 800495a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800495e:	4641      	mov	r1, r8
 8004960:	008a      	lsls	r2, r1, #2
 8004962:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004966:	f7fc f98f 	bl	8000c88 <__aeabi_uldivmod>
 800496a:	4602      	mov	r2, r0
 800496c:	460b      	mov	r3, r1
 800496e:	4611      	mov	r1, r2
 8004970:	4b38      	ldr	r3, [pc, #224]	@ (8004a54 <UART_SetConfig+0x4e4>)
 8004972:	fba3 2301 	umull	r2, r3, r3, r1
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	2264      	movs	r2, #100	@ 0x64
 800497a:	fb02 f303 	mul.w	r3, r2, r3
 800497e:	1acb      	subs	r3, r1, r3
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	3332      	adds	r3, #50	@ 0x32
 8004984:	4a33      	ldr	r2, [pc, #204]	@ (8004a54 <UART_SetConfig+0x4e4>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004990:	441c      	add	r4, r3
 8004992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004996:	2200      	movs	r2, #0
 8004998:	673b      	str	r3, [r7, #112]	@ 0x70
 800499a:	677a      	str	r2, [r7, #116]	@ 0x74
 800499c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80049a0:	4642      	mov	r2, r8
 80049a2:	464b      	mov	r3, r9
 80049a4:	1891      	adds	r1, r2, r2
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	415b      	adcs	r3, r3
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049b0:	4641      	mov	r1, r8
 80049b2:	1851      	adds	r1, r2, r1
 80049b4:	6039      	str	r1, [r7, #0]
 80049b6:	4649      	mov	r1, r9
 80049b8:	414b      	adcs	r3, r1
 80049ba:	607b      	str	r3, [r7, #4]
 80049bc:	f04f 0200 	mov.w	r2, #0
 80049c0:	f04f 0300 	mov.w	r3, #0
 80049c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049c8:	4659      	mov	r1, fp
 80049ca:	00cb      	lsls	r3, r1, #3
 80049cc:	4651      	mov	r1, sl
 80049ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049d2:	4651      	mov	r1, sl
 80049d4:	00ca      	lsls	r2, r1, #3
 80049d6:	4610      	mov	r0, r2
 80049d8:	4619      	mov	r1, r3
 80049da:	4603      	mov	r3, r0
 80049dc:	4642      	mov	r2, r8
 80049de:	189b      	adds	r3, r3, r2
 80049e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049e2:	464b      	mov	r3, r9
 80049e4:	460a      	mov	r2, r1
 80049e6:	eb42 0303 	adc.w	r3, r2, r3
 80049ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80049f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	f04f 0300 	mov.w	r3, #0
 8004a00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a04:	4649      	mov	r1, r9
 8004a06:	008b      	lsls	r3, r1, #2
 8004a08:	4641      	mov	r1, r8
 8004a0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a0e:	4641      	mov	r1, r8
 8004a10:	008a      	lsls	r2, r1, #2
 8004a12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a16:	f7fc f937 	bl	8000c88 <__aeabi_uldivmod>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a54 <UART_SetConfig+0x4e4>)
 8004a20:	fba3 1302 	umull	r1, r3, r3, r2
 8004a24:	095b      	lsrs	r3, r3, #5
 8004a26:	2164      	movs	r1, #100	@ 0x64
 8004a28:	fb01 f303 	mul.w	r3, r1, r3
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	011b      	lsls	r3, r3, #4
 8004a30:	3332      	adds	r3, #50	@ 0x32
 8004a32:	4a08      	ldr	r2, [pc, #32]	@ (8004a54 <UART_SetConfig+0x4e4>)
 8004a34:	fba2 2303 	umull	r2, r3, r2, r3
 8004a38:	095b      	lsrs	r3, r3, #5
 8004a3a:	f003 020f 	and.w	r2, r3, #15
 8004a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4422      	add	r2, r4
 8004a46:	609a      	str	r2, [r3, #8]
}
 8004a48:	bf00      	nop
 8004a4a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a54:	51eb851f 	.word	0x51eb851f

08004a58 <__cvt>:
 8004a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a5c:	ec57 6b10 	vmov	r6, r7, d0
 8004a60:	2f00      	cmp	r7, #0
 8004a62:	460c      	mov	r4, r1
 8004a64:	4619      	mov	r1, r3
 8004a66:	463b      	mov	r3, r7
 8004a68:	bfbb      	ittet	lt
 8004a6a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004a6e:	461f      	movlt	r7, r3
 8004a70:	2300      	movge	r3, #0
 8004a72:	232d      	movlt	r3, #45	@ 0x2d
 8004a74:	700b      	strb	r3, [r1, #0]
 8004a76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a78:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004a7c:	4691      	mov	r9, r2
 8004a7e:	f023 0820 	bic.w	r8, r3, #32
 8004a82:	bfbc      	itt	lt
 8004a84:	4632      	movlt	r2, r6
 8004a86:	4616      	movlt	r6, r2
 8004a88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004a8c:	d005      	beq.n	8004a9a <__cvt+0x42>
 8004a8e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004a92:	d100      	bne.n	8004a96 <__cvt+0x3e>
 8004a94:	3401      	adds	r4, #1
 8004a96:	2102      	movs	r1, #2
 8004a98:	e000      	b.n	8004a9c <__cvt+0x44>
 8004a9a:	2103      	movs	r1, #3
 8004a9c:	ab03      	add	r3, sp, #12
 8004a9e:	9301      	str	r3, [sp, #4]
 8004aa0:	ab02      	add	r3, sp, #8
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	ec47 6b10 	vmov	d0, r6, r7
 8004aa8:	4653      	mov	r3, sl
 8004aaa:	4622      	mov	r2, r4
 8004aac:	f000 ff40 	bl	8005930 <_dtoa_r>
 8004ab0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004ab4:	4605      	mov	r5, r0
 8004ab6:	d119      	bne.n	8004aec <__cvt+0x94>
 8004ab8:	f019 0f01 	tst.w	r9, #1
 8004abc:	d00e      	beq.n	8004adc <__cvt+0x84>
 8004abe:	eb00 0904 	add.w	r9, r0, r4
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	4630      	mov	r0, r6
 8004ac8:	4639      	mov	r1, r7
 8004aca:	f7fc f81d 	bl	8000b08 <__aeabi_dcmpeq>
 8004ace:	b108      	cbz	r0, 8004ad4 <__cvt+0x7c>
 8004ad0:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ad4:	2230      	movs	r2, #48	@ 0x30
 8004ad6:	9b03      	ldr	r3, [sp, #12]
 8004ad8:	454b      	cmp	r3, r9
 8004ada:	d31e      	bcc.n	8004b1a <__cvt+0xc2>
 8004adc:	9b03      	ldr	r3, [sp, #12]
 8004ade:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004ae0:	1b5b      	subs	r3, r3, r5
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	b004      	add	sp, #16
 8004ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004af0:	eb00 0904 	add.w	r9, r0, r4
 8004af4:	d1e5      	bne.n	8004ac2 <__cvt+0x6a>
 8004af6:	7803      	ldrb	r3, [r0, #0]
 8004af8:	2b30      	cmp	r3, #48	@ 0x30
 8004afa:	d10a      	bne.n	8004b12 <__cvt+0xba>
 8004afc:	2200      	movs	r2, #0
 8004afe:	2300      	movs	r3, #0
 8004b00:	4630      	mov	r0, r6
 8004b02:	4639      	mov	r1, r7
 8004b04:	f7fc f800 	bl	8000b08 <__aeabi_dcmpeq>
 8004b08:	b918      	cbnz	r0, 8004b12 <__cvt+0xba>
 8004b0a:	f1c4 0401 	rsb	r4, r4, #1
 8004b0e:	f8ca 4000 	str.w	r4, [sl]
 8004b12:	f8da 3000 	ldr.w	r3, [sl]
 8004b16:	4499      	add	r9, r3
 8004b18:	e7d3      	b.n	8004ac2 <__cvt+0x6a>
 8004b1a:	1c59      	adds	r1, r3, #1
 8004b1c:	9103      	str	r1, [sp, #12]
 8004b1e:	701a      	strb	r2, [r3, #0]
 8004b20:	e7d9      	b.n	8004ad6 <__cvt+0x7e>

08004b22 <__exponent>:
 8004b22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b24:	2900      	cmp	r1, #0
 8004b26:	bfba      	itte	lt
 8004b28:	4249      	neglt	r1, r1
 8004b2a:	232d      	movlt	r3, #45	@ 0x2d
 8004b2c:	232b      	movge	r3, #43	@ 0x2b
 8004b2e:	2909      	cmp	r1, #9
 8004b30:	7002      	strb	r2, [r0, #0]
 8004b32:	7043      	strb	r3, [r0, #1]
 8004b34:	dd29      	ble.n	8004b8a <__exponent+0x68>
 8004b36:	f10d 0307 	add.w	r3, sp, #7
 8004b3a:	461d      	mov	r5, r3
 8004b3c:	270a      	movs	r7, #10
 8004b3e:	461a      	mov	r2, r3
 8004b40:	fbb1 f6f7 	udiv	r6, r1, r7
 8004b44:	fb07 1416 	mls	r4, r7, r6, r1
 8004b48:	3430      	adds	r4, #48	@ 0x30
 8004b4a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004b4e:	460c      	mov	r4, r1
 8004b50:	2c63      	cmp	r4, #99	@ 0x63
 8004b52:	f103 33ff 	add.w	r3, r3, #4294967295
 8004b56:	4631      	mov	r1, r6
 8004b58:	dcf1      	bgt.n	8004b3e <__exponent+0x1c>
 8004b5a:	3130      	adds	r1, #48	@ 0x30
 8004b5c:	1e94      	subs	r4, r2, #2
 8004b5e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004b62:	1c41      	adds	r1, r0, #1
 8004b64:	4623      	mov	r3, r4
 8004b66:	42ab      	cmp	r3, r5
 8004b68:	d30a      	bcc.n	8004b80 <__exponent+0x5e>
 8004b6a:	f10d 0309 	add.w	r3, sp, #9
 8004b6e:	1a9b      	subs	r3, r3, r2
 8004b70:	42ac      	cmp	r4, r5
 8004b72:	bf88      	it	hi
 8004b74:	2300      	movhi	r3, #0
 8004b76:	3302      	adds	r3, #2
 8004b78:	4403      	add	r3, r0
 8004b7a:	1a18      	subs	r0, r3, r0
 8004b7c:	b003      	add	sp, #12
 8004b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b80:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004b84:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004b88:	e7ed      	b.n	8004b66 <__exponent+0x44>
 8004b8a:	2330      	movs	r3, #48	@ 0x30
 8004b8c:	3130      	adds	r1, #48	@ 0x30
 8004b8e:	7083      	strb	r3, [r0, #2]
 8004b90:	70c1      	strb	r1, [r0, #3]
 8004b92:	1d03      	adds	r3, r0, #4
 8004b94:	e7f1      	b.n	8004b7a <__exponent+0x58>
	...

08004b98 <_printf_float>:
 8004b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b9c:	b08d      	sub	sp, #52	@ 0x34
 8004b9e:	460c      	mov	r4, r1
 8004ba0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004ba4:	4616      	mov	r6, r2
 8004ba6:	461f      	mov	r7, r3
 8004ba8:	4605      	mov	r5, r0
 8004baa:	f000 fdbf 	bl	800572c <_localeconv_r>
 8004bae:	6803      	ldr	r3, [r0, #0]
 8004bb0:	9304      	str	r3, [sp, #16]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fb fb7c 	bl	80002b0 <strlen>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	930a      	str	r3, [sp, #40]	@ 0x28
 8004bbc:	f8d8 3000 	ldr.w	r3, [r8]
 8004bc0:	9005      	str	r0, [sp, #20]
 8004bc2:	3307      	adds	r3, #7
 8004bc4:	f023 0307 	bic.w	r3, r3, #7
 8004bc8:	f103 0208 	add.w	r2, r3, #8
 8004bcc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004bd0:	f8d4 b000 	ldr.w	fp, [r4]
 8004bd4:	f8c8 2000 	str.w	r2, [r8]
 8004bd8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004bdc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004be0:	9307      	str	r3, [sp, #28]
 8004be2:	f8cd 8018 	str.w	r8, [sp, #24]
 8004be6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004bea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bee:	4b9c      	ldr	r3, [pc, #624]	@ (8004e60 <_printf_float+0x2c8>)
 8004bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf4:	f7fb ffba 	bl	8000b6c <__aeabi_dcmpun>
 8004bf8:	bb70      	cbnz	r0, 8004c58 <_printf_float+0xc0>
 8004bfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bfe:	4b98      	ldr	r3, [pc, #608]	@ (8004e60 <_printf_float+0x2c8>)
 8004c00:	f04f 32ff 	mov.w	r2, #4294967295
 8004c04:	f7fb ff94 	bl	8000b30 <__aeabi_dcmple>
 8004c08:	bb30      	cbnz	r0, 8004c58 <_printf_float+0xc0>
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	4640      	mov	r0, r8
 8004c10:	4649      	mov	r1, r9
 8004c12:	f7fb ff83 	bl	8000b1c <__aeabi_dcmplt>
 8004c16:	b110      	cbz	r0, 8004c1e <_printf_float+0x86>
 8004c18:	232d      	movs	r3, #45	@ 0x2d
 8004c1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c1e:	4a91      	ldr	r2, [pc, #580]	@ (8004e64 <_printf_float+0x2cc>)
 8004c20:	4b91      	ldr	r3, [pc, #580]	@ (8004e68 <_printf_float+0x2d0>)
 8004c22:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004c26:	bf94      	ite	ls
 8004c28:	4690      	movls	r8, r2
 8004c2a:	4698      	movhi	r8, r3
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	6123      	str	r3, [r4, #16]
 8004c30:	f02b 0304 	bic.w	r3, fp, #4
 8004c34:	6023      	str	r3, [r4, #0]
 8004c36:	f04f 0900 	mov.w	r9, #0
 8004c3a:	9700      	str	r7, [sp, #0]
 8004c3c:	4633      	mov	r3, r6
 8004c3e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004c40:	4621      	mov	r1, r4
 8004c42:	4628      	mov	r0, r5
 8004c44:	f000 f9d2 	bl	8004fec <_printf_common>
 8004c48:	3001      	adds	r0, #1
 8004c4a:	f040 808d 	bne.w	8004d68 <_printf_float+0x1d0>
 8004c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c52:	b00d      	add	sp, #52	@ 0x34
 8004c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c58:	4642      	mov	r2, r8
 8004c5a:	464b      	mov	r3, r9
 8004c5c:	4640      	mov	r0, r8
 8004c5e:	4649      	mov	r1, r9
 8004c60:	f7fb ff84 	bl	8000b6c <__aeabi_dcmpun>
 8004c64:	b140      	cbz	r0, 8004c78 <_printf_float+0xe0>
 8004c66:	464b      	mov	r3, r9
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	bfbc      	itt	lt
 8004c6c:	232d      	movlt	r3, #45	@ 0x2d
 8004c6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004c72:	4a7e      	ldr	r2, [pc, #504]	@ (8004e6c <_printf_float+0x2d4>)
 8004c74:	4b7e      	ldr	r3, [pc, #504]	@ (8004e70 <_printf_float+0x2d8>)
 8004c76:	e7d4      	b.n	8004c22 <_printf_float+0x8a>
 8004c78:	6863      	ldr	r3, [r4, #4]
 8004c7a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004c7e:	9206      	str	r2, [sp, #24]
 8004c80:	1c5a      	adds	r2, r3, #1
 8004c82:	d13b      	bne.n	8004cfc <_printf_float+0x164>
 8004c84:	2306      	movs	r3, #6
 8004c86:	6063      	str	r3, [r4, #4]
 8004c88:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	6022      	str	r2, [r4, #0]
 8004c90:	9303      	str	r3, [sp, #12]
 8004c92:	ab0a      	add	r3, sp, #40	@ 0x28
 8004c94:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004c98:	ab09      	add	r3, sp, #36	@ 0x24
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	6861      	ldr	r1, [r4, #4]
 8004c9e:	ec49 8b10 	vmov	d0, r8, r9
 8004ca2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	f7ff fed6 	bl	8004a58 <__cvt>
 8004cac:	9b06      	ldr	r3, [sp, #24]
 8004cae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004cb0:	2b47      	cmp	r3, #71	@ 0x47
 8004cb2:	4680      	mov	r8, r0
 8004cb4:	d129      	bne.n	8004d0a <_printf_float+0x172>
 8004cb6:	1cc8      	adds	r0, r1, #3
 8004cb8:	db02      	blt.n	8004cc0 <_printf_float+0x128>
 8004cba:	6863      	ldr	r3, [r4, #4]
 8004cbc:	4299      	cmp	r1, r3
 8004cbe:	dd41      	ble.n	8004d44 <_printf_float+0x1ac>
 8004cc0:	f1aa 0a02 	sub.w	sl, sl, #2
 8004cc4:	fa5f fa8a 	uxtb.w	sl, sl
 8004cc8:	3901      	subs	r1, #1
 8004cca:	4652      	mov	r2, sl
 8004ccc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004cd0:	9109      	str	r1, [sp, #36]	@ 0x24
 8004cd2:	f7ff ff26 	bl	8004b22 <__exponent>
 8004cd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004cd8:	1813      	adds	r3, r2, r0
 8004cda:	2a01      	cmp	r2, #1
 8004cdc:	4681      	mov	r9, r0
 8004cde:	6123      	str	r3, [r4, #16]
 8004ce0:	dc02      	bgt.n	8004ce8 <_printf_float+0x150>
 8004ce2:	6822      	ldr	r2, [r4, #0]
 8004ce4:	07d2      	lsls	r2, r2, #31
 8004ce6:	d501      	bpl.n	8004cec <_printf_float+0x154>
 8004ce8:	3301      	adds	r3, #1
 8004cea:	6123      	str	r3, [r4, #16]
 8004cec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0a2      	beq.n	8004c3a <_printf_float+0xa2>
 8004cf4:	232d      	movs	r3, #45	@ 0x2d
 8004cf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cfa:	e79e      	b.n	8004c3a <_printf_float+0xa2>
 8004cfc:	9a06      	ldr	r2, [sp, #24]
 8004cfe:	2a47      	cmp	r2, #71	@ 0x47
 8004d00:	d1c2      	bne.n	8004c88 <_printf_float+0xf0>
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1c0      	bne.n	8004c88 <_printf_float+0xf0>
 8004d06:	2301      	movs	r3, #1
 8004d08:	e7bd      	b.n	8004c86 <_printf_float+0xee>
 8004d0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d0e:	d9db      	bls.n	8004cc8 <_printf_float+0x130>
 8004d10:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004d14:	d118      	bne.n	8004d48 <_printf_float+0x1b0>
 8004d16:	2900      	cmp	r1, #0
 8004d18:	6863      	ldr	r3, [r4, #4]
 8004d1a:	dd0b      	ble.n	8004d34 <_printf_float+0x19c>
 8004d1c:	6121      	str	r1, [r4, #16]
 8004d1e:	b913      	cbnz	r3, 8004d26 <_printf_float+0x18e>
 8004d20:	6822      	ldr	r2, [r4, #0]
 8004d22:	07d0      	lsls	r0, r2, #31
 8004d24:	d502      	bpl.n	8004d2c <_printf_float+0x194>
 8004d26:	3301      	adds	r3, #1
 8004d28:	440b      	add	r3, r1
 8004d2a:	6123      	str	r3, [r4, #16]
 8004d2c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004d2e:	f04f 0900 	mov.w	r9, #0
 8004d32:	e7db      	b.n	8004cec <_printf_float+0x154>
 8004d34:	b913      	cbnz	r3, 8004d3c <_printf_float+0x1a4>
 8004d36:	6822      	ldr	r2, [r4, #0]
 8004d38:	07d2      	lsls	r2, r2, #31
 8004d3a:	d501      	bpl.n	8004d40 <_printf_float+0x1a8>
 8004d3c:	3302      	adds	r3, #2
 8004d3e:	e7f4      	b.n	8004d2a <_printf_float+0x192>
 8004d40:	2301      	movs	r3, #1
 8004d42:	e7f2      	b.n	8004d2a <_printf_float+0x192>
 8004d44:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004d48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d4a:	4299      	cmp	r1, r3
 8004d4c:	db05      	blt.n	8004d5a <_printf_float+0x1c2>
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	6121      	str	r1, [r4, #16]
 8004d52:	07d8      	lsls	r0, r3, #31
 8004d54:	d5ea      	bpl.n	8004d2c <_printf_float+0x194>
 8004d56:	1c4b      	adds	r3, r1, #1
 8004d58:	e7e7      	b.n	8004d2a <_printf_float+0x192>
 8004d5a:	2900      	cmp	r1, #0
 8004d5c:	bfd4      	ite	le
 8004d5e:	f1c1 0202 	rsble	r2, r1, #2
 8004d62:	2201      	movgt	r2, #1
 8004d64:	4413      	add	r3, r2
 8004d66:	e7e0      	b.n	8004d2a <_printf_float+0x192>
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	055a      	lsls	r2, r3, #21
 8004d6c:	d407      	bmi.n	8004d7e <_printf_float+0x1e6>
 8004d6e:	6923      	ldr	r3, [r4, #16]
 8004d70:	4642      	mov	r2, r8
 8004d72:	4631      	mov	r1, r6
 8004d74:	4628      	mov	r0, r5
 8004d76:	47b8      	blx	r7
 8004d78:	3001      	adds	r0, #1
 8004d7a:	d12b      	bne.n	8004dd4 <_printf_float+0x23c>
 8004d7c:	e767      	b.n	8004c4e <_printf_float+0xb6>
 8004d7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d82:	f240 80dd 	bls.w	8004f40 <_printf_float+0x3a8>
 8004d86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f7fb febb 	bl	8000b08 <__aeabi_dcmpeq>
 8004d92:	2800      	cmp	r0, #0
 8004d94:	d033      	beq.n	8004dfe <_printf_float+0x266>
 8004d96:	4a37      	ldr	r2, [pc, #220]	@ (8004e74 <_printf_float+0x2dc>)
 8004d98:	2301      	movs	r3, #1
 8004d9a:	4631      	mov	r1, r6
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	47b8      	blx	r7
 8004da0:	3001      	adds	r0, #1
 8004da2:	f43f af54 	beq.w	8004c4e <_printf_float+0xb6>
 8004da6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004daa:	4543      	cmp	r3, r8
 8004dac:	db02      	blt.n	8004db4 <_printf_float+0x21c>
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	07d8      	lsls	r0, r3, #31
 8004db2:	d50f      	bpl.n	8004dd4 <_printf_float+0x23c>
 8004db4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004db8:	4631      	mov	r1, r6
 8004dba:	4628      	mov	r0, r5
 8004dbc:	47b8      	blx	r7
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	f43f af45 	beq.w	8004c4e <_printf_float+0xb6>
 8004dc4:	f04f 0900 	mov.w	r9, #0
 8004dc8:	f108 38ff 	add.w	r8, r8, #4294967295
 8004dcc:	f104 0a1a 	add.w	sl, r4, #26
 8004dd0:	45c8      	cmp	r8, r9
 8004dd2:	dc09      	bgt.n	8004de8 <_printf_float+0x250>
 8004dd4:	6823      	ldr	r3, [r4, #0]
 8004dd6:	079b      	lsls	r3, r3, #30
 8004dd8:	f100 8103 	bmi.w	8004fe2 <_printf_float+0x44a>
 8004ddc:	68e0      	ldr	r0, [r4, #12]
 8004dde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004de0:	4298      	cmp	r0, r3
 8004de2:	bfb8      	it	lt
 8004de4:	4618      	movlt	r0, r3
 8004de6:	e734      	b.n	8004c52 <_printf_float+0xba>
 8004de8:	2301      	movs	r3, #1
 8004dea:	4652      	mov	r2, sl
 8004dec:	4631      	mov	r1, r6
 8004dee:	4628      	mov	r0, r5
 8004df0:	47b8      	blx	r7
 8004df2:	3001      	adds	r0, #1
 8004df4:	f43f af2b 	beq.w	8004c4e <_printf_float+0xb6>
 8004df8:	f109 0901 	add.w	r9, r9, #1
 8004dfc:	e7e8      	b.n	8004dd0 <_printf_float+0x238>
 8004dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	dc39      	bgt.n	8004e78 <_printf_float+0x2e0>
 8004e04:	4a1b      	ldr	r2, [pc, #108]	@ (8004e74 <_printf_float+0x2dc>)
 8004e06:	2301      	movs	r3, #1
 8004e08:	4631      	mov	r1, r6
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	47b8      	blx	r7
 8004e0e:	3001      	adds	r0, #1
 8004e10:	f43f af1d 	beq.w	8004c4e <_printf_float+0xb6>
 8004e14:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004e18:	ea59 0303 	orrs.w	r3, r9, r3
 8004e1c:	d102      	bne.n	8004e24 <_printf_float+0x28c>
 8004e1e:	6823      	ldr	r3, [r4, #0]
 8004e20:	07d9      	lsls	r1, r3, #31
 8004e22:	d5d7      	bpl.n	8004dd4 <_printf_float+0x23c>
 8004e24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e28:	4631      	mov	r1, r6
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	47b8      	blx	r7
 8004e2e:	3001      	adds	r0, #1
 8004e30:	f43f af0d 	beq.w	8004c4e <_printf_float+0xb6>
 8004e34:	f04f 0a00 	mov.w	sl, #0
 8004e38:	f104 0b1a 	add.w	fp, r4, #26
 8004e3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e3e:	425b      	negs	r3, r3
 8004e40:	4553      	cmp	r3, sl
 8004e42:	dc01      	bgt.n	8004e48 <_printf_float+0x2b0>
 8004e44:	464b      	mov	r3, r9
 8004e46:	e793      	b.n	8004d70 <_printf_float+0x1d8>
 8004e48:	2301      	movs	r3, #1
 8004e4a:	465a      	mov	r2, fp
 8004e4c:	4631      	mov	r1, r6
 8004e4e:	4628      	mov	r0, r5
 8004e50:	47b8      	blx	r7
 8004e52:	3001      	adds	r0, #1
 8004e54:	f43f aefb 	beq.w	8004c4e <_printf_float+0xb6>
 8004e58:	f10a 0a01 	add.w	sl, sl, #1
 8004e5c:	e7ee      	b.n	8004e3c <_printf_float+0x2a4>
 8004e5e:	bf00      	nop
 8004e60:	7fefffff 	.word	0x7fefffff
 8004e64:	08008e70 	.word	0x08008e70
 8004e68:	08008e74 	.word	0x08008e74
 8004e6c:	08008e78 	.word	0x08008e78
 8004e70:	08008e7c 	.word	0x08008e7c
 8004e74:	08008e80 	.word	0x08008e80
 8004e78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e7a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004e7e:	4553      	cmp	r3, sl
 8004e80:	bfa8      	it	ge
 8004e82:	4653      	movge	r3, sl
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	4699      	mov	r9, r3
 8004e88:	dc36      	bgt.n	8004ef8 <_printf_float+0x360>
 8004e8a:	f04f 0b00 	mov.w	fp, #0
 8004e8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e92:	f104 021a 	add.w	r2, r4, #26
 8004e96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e98:	9306      	str	r3, [sp, #24]
 8004e9a:	eba3 0309 	sub.w	r3, r3, r9
 8004e9e:	455b      	cmp	r3, fp
 8004ea0:	dc31      	bgt.n	8004f06 <_printf_float+0x36e>
 8004ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ea4:	459a      	cmp	sl, r3
 8004ea6:	dc3a      	bgt.n	8004f1e <_printf_float+0x386>
 8004ea8:	6823      	ldr	r3, [r4, #0]
 8004eaa:	07da      	lsls	r2, r3, #31
 8004eac:	d437      	bmi.n	8004f1e <_printf_float+0x386>
 8004eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004eb0:	ebaa 0903 	sub.w	r9, sl, r3
 8004eb4:	9b06      	ldr	r3, [sp, #24]
 8004eb6:	ebaa 0303 	sub.w	r3, sl, r3
 8004eba:	4599      	cmp	r9, r3
 8004ebc:	bfa8      	it	ge
 8004ebe:	4699      	movge	r9, r3
 8004ec0:	f1b9 0f00 	cmp.w	r9, #0
 8004ec4:	dc33      	bgt.n	8004f2e <_printf_float+0x396>
 8004ec6:	f04f 0800 	mov.w	r8, #0
 8004eca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ece:	f104 0b1a 	add.w	fp, r4, #26
 8004ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ed4:	ebaa 0303 	sub.w	r3, sl, r3
 8004ed8:	eba3 0309 	sub.w	r3, r3, r9
 8004edc:	4543      	cmp	r3, r8
 8004ede:	f77f af79 	ble.w	8004dd4 <_printf_float+0x23c>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	465a      	mov	r2, fp
 8004ee6:	4631      	mov	r1, r6
 8004ee8:	4628      	mov	r0, r5
 8004eea:	47b8      	blx	r7
 8004eec:	3001      	adds	r0, #1
 8004eee:	f43f aeae 	beq.w	8004c4e <_printf_float+0xb6>
 8004ef2:	f108 0801 	add.w	r8, r8, #1
 8004ef6:	e7ec      	b.n	8004ed2 <_printf_float+0x33a>
 8004ef8:	4642      	mov	r2, r8
 8004efa:	4631      	mov	r1, r6
 8004efc:	4628      	mov	r0, r5
 8004efe:	47b8      	blx	r7
 8004f00:	3001      	adds	r0, #1
 8004f02:	d1c2      	bne.n	8004e8a <_printf_float+0x2f2>
 8004f04:	e6a3      	b.n	8004c4e <_printf_float+0xb6>
 8004f06:	2301      	movs	r3, #1
 8004f08:	4631      	mov	r1, r6
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	9206      	str	r2, [sp, #24]
 8004f0e:	47b8      	blx	r7
 8004f10:	3001      	adds	r0, #1
 8004f12:	f43f ae9c 	beq.w	8004c4e <_printf_float+0xb6>
 8004f16:	9a06      	ldr	r2, [sp, #24]
 8004f18:	f10b 0b01 	add.w	fp, fp, #1
 8004f1c:	e7bb      	b.n	8004e96 <_printf_float+0x2fe>
 8004f1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f22:	4631      	mov	r1, r6
 8004f24:	4628      	mov	r0, r5
 8004f26:	47b8      	blx	r7
 8004f28:	3001      	adds	r0, #1
 8004f2a:	d1c0      	bne.n	8004eae <_printf_float+0x316>
 8004f2c:	e68f      	b.n	8004c4e <_printf_float+0xb6>
 8004f2e:	9a06      	ldr	r2, [sp, #24]
 8004f30:	464b      	mov	r3, r9
 8004f32:	4442      	add	r2, r8
 8004f34:	4631      	mov	r1, r6
 8004f36:	4628      	mov	r0, r5
 8004f38:	47b8      	blx	r7
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	d1c3      	bne.n	8004ec6 <_printf_float+0x32e>
 8004f3e:	e686      	b.n	8004c4e <_printf_float+0xb6>
 8004f40:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004f44:	f1ba 0f01 	cmp.w	sl, #1
 8004f48:	dc01      	bgt.n	8004f4e <_printf_float+0x3b6>
 8004f4a:	07db      	lsls	r3, r3, #31
 8004f4c:	d536      	bpl.n	8004fbc <_printf_float+0x424>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	4642      	mov	r2, r8
 8004f52:	4631      	mov	r1, r6
 8004f54:	4628      	mov	r0, r5
 8004f56:	47b8      	blx	r7
 8004f58:	3001      	adds	r0, #1
 8004f5a:	f43f ae78 	beq.w	8004c4e <_printf_float+0xb6>
 8004f5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f62:	4631      	mov	r1, r6
 8004f64:	4628      	mov	r0, r5
 8004f66:	47b8      	blx	r7
 8004f68:	3001      	adds	r0, #1
 8004f6a:	f43f ae70 	beq.w	8004c4e <_printf_float+0xb6>
 8004f6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004f72:	2200      	movs	r2, #0
 8004f74:	2300      	movs	r3, #0
 8004f76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f7a:	f7fb fdc5 	bl	8000b08 <__aeabi_dcmpeq>
 8004f7e:	b9c0      	cbnz	r0, 8004fb2 <_printf_float+0x41a>
 8004f80:	4653      	mov	r3, sl
 8004f82:	f108 0201 	add.w	r2, r8, #1
 8004f86:	4631      	mov	r1, r6
 8004f88:	4628      	mov	r0, r5
 8004f8a:	47b8      	blx	r7
 8004f8c:	3001      	adds	r0, #1
 8004f8e:	d10c      	bne.n	8004faa <_printf_float+0x412>
 8004f90:	e65d      	b.n	8004c4e <_printf_float+0xb6>
 8004f92:	2301      	movs	r3, #1
 8004f94:	465a      	mov	r2, fp
 8004f96:	4631      	mov	r1, r6
 8004f98:	4628      	mov	r0, r5
 8004f9a:	47b8      	blx	r7
 8004f9c:	3001      	adds	r0, #1
 8004f9e:	f43f ae56 	beq.w	8004c4e <_printf_float+0xb6>
 8004fa2:	f108 0801 	add.w	r8, r8, #1
 8004fa6:	45d0      	cmp	r8, sl
 8004fa8:	dbf3      	blt.n	8004f92 <_printf_float+0x3fa>
 8004faa:	464b      	mov	r3, r9
 8004fac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004fb0:	e6df      	b.n	8004d72 <_printf_float+0x1da>
 8004fb2:	f04f 0800 	mov.w	r8, #0
 8004fb6:	f104 0b1a 	add.w	fp, r4, #26
 8004fba:	e7f4      	b.n	8004fa6 <_printf_float+0x40e>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	4642      	mov	r2, r8
 8004fc0:	e7e1      	b.n	8004f86 <_printf_float+0x3ee>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	464a      	mov	r2, r9
 8004fc6:	4631      	mov	r1, r6
 8004fc8:	4628      	mov	r0, r5
 8004fca:	47b8      	blx	r7
 8004fcc:	3001      	adds	r0, #1
 8004fce:	f43f ae3e 	beq.w	8004c4e <_printf_float+0xb6>
 8004fd2:	f108 0801 	add.w	r8, r8, #1
 8004fd6:	68e3      	ldr	r3, [r4, #12]
 8004fd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004fda:	1a5b      	subs	r3, r3, r1
 8004fdc:	4543      	cmp	r3, r8
 8004fde:	dcf0      	bgt.n	8004fc2 <_printf_float+0x42a>
 8004fe0:	e6fc      	b.n	8004ddc <_printf_float+0x244>
 8004fe2:	f04f 0800 	mov.w	r8, #0
 8004fe6:	f104 0919 	add.w	r9, r4, #25
 8004fea:	e7f4      	b.n	8004fd6 <_printf_float+0x43e>

08004fec <_printf_common>:
 8004fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff0:	4616      	mov	r6, r2
 8004ff2:	4698      	mov	r8, r3
 8004ff4:	688a      	ldr	r2, [r1, #8]
 8004ff6:	690b      	ldr	r3, [r1, #16]
 8004ff8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	bfb8      	it	lt
 8005000:	4613      	movlt	r3, r2
 8005002:	6033      	str	r3, [r6, #0]
 8005004:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005008:	4607      	mov	r7, r0
 800500a:	460c      	mov	r4, r1
 800500c:	b10a      	cbz	r2, 8005012 <_printf_common+0x26>
 800500e:	3301      	adds	r3, #1
 8005010:	6033      	str	r3, [r6, #0]
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	0699      	lsls	r1, r3, #26
 8005016:	bf42      	ittt	mi
 8005018:	6833      	ldrmi	r3, [r6, #0]
 800501a:	3302      	addmi	r3, #2
 800501c:	6033      	strmi	r3, [r6, #0]
 800501e:	6825      	ldr	r5, [r4, #0]
 8005020:	f015 0506 	ands.w	r5, r5, #6
 8005024:	d106      	bne.n	8005034 <_printf_common+0x48>
 8005026:	f104 0a19 	add.w	sl, r4, #25
 800502a:	68e3      	ldr	r3, [r4, #12]
 800502c:	6832      	ldr	r2, [r6, #0]
 800502e:	1a9b      	subs	r3, r3, r2
 8005030:	42ab      	cmp	r3, r5
 8005032:	dc26      	bgt.n	8005082 <_printf_common+0x96>
 8005034:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005038:	6822      	ldr	r2, [r4, #0]
 800503a:	3b00      	subs	r3, #0
 800503c:	bf18      	it	ne
 800503e:	2301      	movne	r3, #1
 8005040:	0692      	lsls	r2, r2, #26
 8005042:	d42b      	bmi.n	800509c <_printf_common+0xb0>
 8005044:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005048:	4641      	mov	r1, r8
 800504a:	4638      	mov	r0, r7
 800504c:	47c8      	blx	r9
 800504e:	3001      	adds	r0, #1
 8005050:	d01e      	beq.n	8005090 <_printf_common+0xa4>
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	6922      	ldr	r2, [r4, #16]
 8005056:	f003 0306 	and.w	r3, r3, #6
 800505a:	2b04      	cmp	r3, #4
 800505c:	bf02      	ittt	eq
 800505e:	68e5      	ldreq	r5, [r4, #12]
 8005060:	6833      	ldreq	r3, [r6, #0]
 8005062:	1aed      	subeq	r5, r5, r3
 8005064:	68a3      	ldr	r3, [r4, #8]
 8005066:	bf0c      	ite	eq
 8005068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800506c:	2500      	movne	r5, #0
 800506e:	4293      	cmp	r3, r2
 8005070:	bfc4      	itt	gt
 8005072:	1a9b      	subgt	r3, r3, r2
 8005074:	18ed      	addgt	r5, r5, r3
 8005076:	2600      	movs	r6, #0
 8005078:	341a      	adds	r4, #26
 800507a:	42b5      	cmp	r5, r6
 800507c:	d11a      	bne.n	80050b4 <_printf_common+0xc8>
 800507e:	2000      	movs	r0, #0
 8005080:	e008      	b.n	8005094 <_printf_common+0xa8>
 8005082:	2301      	movs	r3, #1
 8005084:	4652      	mov	r2, sl
 8005086:	4641      	mov	r1, r8
 8005088:	4638      	mov	r0, r7
 800508a:	47c8      	blx	r9
 800508c:	3001      	adds	r0, #1
 800508e:	d103      	bne.n	8005098 <_printf_common+0xac>
 8005090:	f04f 30ff 	mov.w	r0, #4294967295
 8005094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005098:	3501      	adds	r5, #1
 800509a:	e7c6      	b.n	800502a <_printf_common+0x3e>
 800509c:	18e1      	adds	r1, r4, r3
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	2030      	movs	r0, #48	@ 0x30
 80050a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050a6:	4422      	add	r2, r4
 80050a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80050ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80050b0:	3302      	adds	r3, #2
 80050b2:	e7c7      	b.n	8005044 <_printf_common+0x58>
 80050b4:	2301      	movs	r3, #1
 80050b6:	4622      	mov	r2, r4
 80050b8:	4641      	mov	r1, r8
 80050ba:	4638      	mov	r0, r7
 80050bc:	47c8      	blx	r9
 80050be:	3001      	adds	r0, #1
 80050c0:	d0e6      	beq.n	8005090 <_printf_common+0xa4>
 80050c2:	3601      	adds	r6, #1
 80050c4:	e7d9      	b.n	800507a <_printf_common+0x8e>
	...

080050c8 <_printf_i>:
 80050c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050cc:	7e0f      	ldrb	r7, [r1, #24]
 80050ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80050d0:	2f78      	cmp	r7, #120	@ 0x78
 80050d2:	4691      	mov	r9, r2
 80050d4:	4680      	mov	r8, r0
 80050d6:	460c      	mov	r4, r1
 80050d8:	469a      	mov	sl, r3
 80050da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80050de:	d807      	bhi.n	80050f0 <_printf_i+0x28>
 80050e0:	2f62      	cmp	r7, #98	@ 0x62
 80050e2:	d80a      	bhi.n	80050fa <_printf_i+0x32>
 80050e4:	2f00      	cmp	r7, #0
 80050e6:	f000 80d2 	beq.w	800528e <_printf_i+0x1c6>
 80050ea:	2f58      	cmp	r7, #88	@ 0x58
 80050ec:	f000 80b9 	beq.w	8005262 <_printf_i+0x19a>
 80050f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80050f8:	e03a      	b.n	8005170 <_printf_i+0xa8>
 80050fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80050fe:	2b15      	cmp	r3, #21
 8005100:	d8f6      	bhi.n	80050f0 <_printf_i+0x28>
 8005102:	a101      	add	r1, pc, #4	@ (adr r1, 8005108 <_printf_i+0x40>)
 8005104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005108:	08005161 	.word	0x08005161
 800510c:	08005175 	.word	0x08005175
 8005110:	080050f1 	.word	0x080050f1
 8005114:	080050f1 	.word	0x080050f1
 8005118:	080050f1 	.word	0x080050f1
 800511c:	080050f1 	.word	0x080050f1
 8005120:	08005175 	.word	0x08005175
 8005124:	080050f1 	.word	0x080050f1
 8005128:	080050f1 	.word	0x080050f1
 800512c:	080050f1 	.word	0x080050f1
 8005130:	080050f1 	.word	0x080050f1
 8005134:	08005275 	.word	0x08005275
 8005138:	0800519f 	.word	0x0800519f
 800513c:	0800522f 	.word	0x0800522f
 8005140:	080050f1 	.word	0x080050f1
 8005144:	080050f1 	.word	0x080050f1
 8005148:	08005297 	.word	0x08005297
 800514c:	080050f1 	.word	0x080050f1
 8005150:	0800519f 	.word	0x0800519f
 8005154:	080050f1 	.word	0x080050f1
 8005158:	080050f1 	.word	0x080050f1
 800515c:	08005237 	.word	0x08005237
 8005160:	6833      	ldr	r3, [r6, #0]
 8005162:	1d1a      	adds	r2, r3, #4
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6032      	str	r2, [r6, #0]
 8005168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800516c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005170:	2301      	movs	r3, #1
 8005172:	e09d      	b.n	80052b0 <_printf_i+0x1e8>
 8005174:	6833      	ldr	r3, [r6, #0]
 8005176:	6820      	ldr	r0, [r4, #0]
 8005178:	1d19      	adds	r1, r3, #4
 800517a:	6031      	str	r1, [r6, #0]
 800517c:	0606      	lsls	r6, r0, #24
 800517e:	d501      	bpl.n	8005184 <_printf_i+0xbc>
 8005180:	681d      	ldr	r5, [r3, #0]
 8005182:	e003      	b.n	800518c <_printf_i+0xc4>
 8005184:	0645      	lsls	r5, r0, #25
 8005186:	d5fb      	bpl.n	8005180 <_printf_i+0xb8>
 8005188:	f9b3 5000 	ldrsh.w	r5, [r3]
 800518c:	2d00      	cmp	r5, #0
 800518e:	da03      	bge.n	8005198 <_printf_i+0xd0>
 8005190:	232d      	movs	r3, #45	@ 0x2d
 8005192:	426d      	negs	r5, r5
 8005194:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005198:	4859      	ldr	r0, [pc, #356]	@ (8005300 <_printf_i+0x238>)
 800519a:	230a      	movs	r3, #10
 800519c:	e011      	b.n	80051c2 <_printf_i+0xfa>
 800519e:	6821      	ldr	r1, [r4, #0]
 80051a0:	6833      	ldr	r3, [r6, #0]
 80051a2:	0608      	lsls	r0, r1, #24
 80051a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80051a8:	d402      	bmi.n	80051b0 <_printf_i+0xe8>
 80051aa:	0649      	lsls	r1, r1, #25
 80051ac:	bf48      	it	mi
 80051ae:	b2ad      	uxthmi	r5, r5
 80051b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80051b2:	4853      	ldr	r0, [pc, #332]	@ (8005300 <_printf_i+0x238>)
 80051b4:	6033      	str	r3, [r6, #0]
 80051b6:	bf14      	ite	ne
 80051b8:	230a      	movne	r3, #10
 80051ba:	2308      	moveq	r3, #8
 80051bc:	2100      	movs	r1, #0
 80051be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80051c2:	6866      	ldr	r6, [r4, #4]
 80051c4:	60a6      	str	r6, [r4, #8]
 80051c6:	2e00      	cmp	r6, #0
 80051c8:	bfa2      	ittt	ge
 80051ca:	6821      	ldrge	r1, [r4, #0]
 80051cc:	f021 0104 	bicge.w	r1, r1, #4
 80051d0:	6021      	strge	r1, [r4, #0]
 80051d2:	b90d      	cbnz	r5, 80051d8 <_printf_i+0x110>
 80051d4:	2e00      	cmp	r6, #0
 80051d6:	d04b      	beq.n	8005270 <_printf_i+0x1a8>
 80051d8:	4616      	mov	r6, r2
 80051da:	fbb5 f1f3 	udiv	r1, r5, r3
 80051de:	fb03 5711 	mls	r7, r3, r1, r5
 80051e2:	5dc7      	ldrb	r7, [r0, r7]
 80051e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051e8:	462f      	mov	r7, r5
 80051ea:	42bb      	cmp	r3, r7
 80051ec:	460d      	mov	r5, r1
 80051ee:	d9f4      	bls.n	80051da <_printf_i+0x112>
 80051f0:	2b08      	cmp	r3, #8
 80051f2:	d10b      	bne.n	800520c <_printf_i+0x144>
 80051f4:	6823      	ldr	r3, [r4, #0]
 80051f6:	07df      	lsls	r7, r3, #31
 80051f8:	d508      	bpl.n	800520c <_printf_i+0x144>
 80051fa:	6923      	ldr	r3, [r4, #16]
 80051fc:	6861      	ldr	r1, [r4, #4]
 80051fe:	4299      	cmp	r1, r3
 8005200:	bfde      	ittt	le
 8005202:	2330      	movle	r3, #48	@ 0x30
 8005204:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005208:	f106 36ff 	addle.w	r6, r6, #4294967295
 800520c:	1b92      	subs	r2, r2, r6
 800520e:	6122      	str	r2, [r4, #16]
 8005210:	f8cd a000 	str.w	sl, [sp]
 8005214:	464b      	mov	r3, r9
 8005216:	aa03      	add	r2, sp, #12
 8005218:	4621      	mov	r1, r4
 800521a:	4640      	mov	r0, r8
 800521c:	f7ff fee6 	bl	8004fec <_printf_common>
 8005220:	3001      	adds	r0, #1
 8005222:	d14a      	bne.n	80052ba <_printf_i+0x1f2>
 8005224:	f04f 30ff 	mov.w	r0, #4294967295
 8005228:	b004      	add	sp, #16
 800522a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	f043 0320 	orr.w	r3, r3, #32
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	4833      	ldr	r0, [pc, #204]	@ (8005304 <_printf_i+0x23c>)
 8005238:	2778      	movs	r7, #120	@ 0x78
 800523a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800523e:	6823      	ldr	r3, [r4, #0]
 8005240:	6831      	ldr	r1, [r6, #0]
 8005242:	061f      	lsls	r7, r3, #24
 8005244:	f851 5b04 	ldr.w	r5, [r1], #4
 8005248:	d402      	bmi.n	8005250 <_printf_i+0x188>
 800524a:	065f      	lsls	r7, r3, #25
 800524c:	bf48      	it	mi
 800524e:	b2ad      	uxthmi	r5, r5
 8005250:	6031      	str	r1, [r6, #0]
 8005252:	07d9      	lsls	r1, r3, #31
 8005254:	bf44      	itt	mi
 8005256:	f043 0320 	orrmi.w	r3, r3, #32
 800525a:	6023      	strmi	r3, [r4, #0]
 800525c:	b11d      	cbz	r5, 8005266 <_printf_i+0x19e>
 800525e:	2310      	movs	r3, #16
 8005260:	e7ac      	b.n	80051bc <_printf_i+0xf4>
 8005262:	4827      	ldr	r0, [pc, #156]	@ (8005300 <_printf_i+0x238>)
 8005264:	e7e9      	b.n	800523a <_printf_i+0x172>
 8005266:	6823      	ldr	r3, [r4, #0]
 8005268:	f023 0320 	bic.w	r3, r3, #32
 800526c:	6023      	str	r3, [r4, #0]
 800526e:	e7f6      	b.n	800525e <_printf_i+0x196>
 8005270:	4616      	mov	r6, r2
 8005272:	e7bd      	b.n	80051f0 <_printf_i+0x128>
 8005274:	6833      	ldr	r3, [r6, #0]
 8005276:	6825      	ldr	r5, [r4, #0]
 8005278:	6961      	ldr	r1, [r4, #20]
 800527a:	1d18      	adds	r0, r3, #4
 800527c:	6030      	str	r0, [r6, #0]
 800527e:	062e      	lsls	r6, r5, #24
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	d501      	bpl.n	8005288 <_printf_i+0x1c0>
 8005284:	6019      	str	r1, [r3, #0]
 8005286:	e002      	b.n	800528e <_printf_i+0x1c6>
 8005288:	0668      	lsls	r0, r5, #25
 800528a:	d5fb      	bpl.n	8005284 <_printf_i+0x1bc>
 800528c:	8019      	strh	r1, [r3, #0]
 800528e:	2300      	movs	r3, #0
 8005290:	6123      	str	r3, [r4, #16]
 8005292:	4616      	mov	r6, r2
 8005294:	e7bc      	b.n	8005210 <_printf_i+0x148>
 8005296:	6833      	ldr	r3, [r6, #0]
 8005298:	1d1a      	adds	r2, r3, #4
 800529a:	6032      	str	r2, [r6, #0]
 800529c:	681e      	ldr	r6, [r3, #0]
 800529e:	6862      	ldr	r2, [r4, #4]
 80052a0:	2100      	movs	r1, #0
 80052a2:	4630      	mov	r0, r6
 80052a4:	f7fa ffb4 	bl	8000210 <memchr>
 80052a8:	b108      	cbz	r0, 80052ae <_printf_i+0x1e6>
 80052aa:	1b80      	subs	r0, r0, r6
 80052ac:	6060      	str	r0, [r4, #4]
 80052ae:	6863      	ldr	r3, [r4, #4]
 80052b0:	6123      	str	r3, [r4, #16]
 80052b2:	2300      	movs	r3, #0
 80052b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052b8:	e7aa      	b.n	8005210 <_printf_i+0x148>
 80052ba:	6923      	ldr	r3, [r4, #16]
 80052bc:	4632      	mov	r2, r6
 80052be:	4649      	mov	r1, r9
 80052c0:	4640      	mov	r0, r8
 80052c2:	47d0      	blx	sl
 80052c4:	3001      	adds	r0, #1
 80052c6:	d0ad      	beq.n	8005224 <_printf_i+0x15c>
 80052c8:	6823      	ldr	r3, [r4, #0]
 80052ca:	079b      	lsls	r3, r3, #30
 80052cc:	d413      	bmi.n	80052f6 <_printf_i+0x22e>
 80052ce:	68e0      	ldr	r0, [r4, #12]
 80052d0:	9b03      	ldr	r3, [sp, #12]
 80052d2:	4298      	cmp	r0, r3
 80052d4:	bfb8      	it	lt
 80052d6:	4618      	movlt	r0, r3
 80052d8:	e7a6      	b.n	8005228 <_printf_i+0x160>
 80052da:	2301      	movs	r3, #1
 80052dc:	4632      	mov	r2, r6
 80052de:	4649      	mov	r1, r9
 80052e0:	4640      	mov	r0, r8
 80052e2:	47d0      	blx	sl
 80052e4:	3001      	adds	r0, #1
 80052e6:	d09d      	beq.n	8005224 <_printf_i+0x15c>
 80052e8:	3501      	adds	r5, #1
 80052ea:	68e3      	ldr	r3, [r4, #12]
 80052ec:	9903      	ldr	r1, [sp, #12]
 80052ee:	1a5b      	subs	r3, r3, r1
 80052f0:	42ab      	cmp	r3, r5
 80052f2:	dcf2      	bgt.n	80052da <_printf_i+0x212>
 80052f4:	e7eb      	b.n	80052ce <_printf_i+0x206>
 80052f6:	2500      	movs	r5, #0
 80052f8:	f104 0619 	add.w	r6, r4, #25
 80052fc:	e7f5      	b.n	80052ea <_printf_i+0x222>
 80052fe:	bf00      	nop
 8005300:	08008e82 	.word	0x08008e82
 8005304:	08008e93 	.word	0x08008e93

08005308 <std>:
 8005308:	2300      	movs	r3, #0
 800530a:	b510      	push	{r4, lr}
 800530c:	4604      	mov	r4, r0
 800530e:	e9c0 3300 	strd	r3, r3, [r0]
 8005312:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005316:	6083      	str	r3, [r0, #8]
 8005318:	8181      	strh	r1, [r0, #12]
 800531a:	6643      	str	r3, [r0, #100]	@ 0x64
 800531c:	81c2      	strh	r2, [r0, #14]
 800531e:	6183      	str	r3, [r0, #24]
 8005320:	4619      	mov	r1, r3
 8005322:	2208      	movs	r2, #8
 8005324:	305c      	adds	r0, #92	@ 0x5c
 8005326:	f000 f9f9 	bl	800571c <memset>
 800532a:	4b0d      	ldr	r3, [pc, #52]	@ (8005360 <std+0x58>)
 800532c:	6263      	str	r3, [r4, #36]	@ 0x24
 800532e:	4b0d      	ldr	r3, [pc, #52]	@ (8005364 <std+0x5c>)
 8005330:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005332:	4b0d      	ldr	r3, [pc, #52]	@ (8005368 <std+0x60>)
 8005334:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005336:	4b0d      	ldr	r3, [pc, #52]	@ (800536c <std+0x64>)
 8005338:	6323      	str	r3, [r4, #48]	@ 0x30
 800533a:	4b0d      	ldr	r3, [pc, #52]	@ (8005370 <std+0x68>)
 800533c:	6224      	str	r4, [r4, #32]
 800533e:	429c      	cmp	r4, r3
 8005340:	d006      	beq.n	8005350 <std+0x48>
 8005342:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005346:	4294      	cmp	r4, r2
 8005348:	d002      	beq.n	8005350 <std+0x48>
 800534a:	33d0      	adds	r3, #208	@ 0xd0
 800534c:	429c      	cmp	r4, r3
 800534e:	d105      	bne.n	800535c <std+0x54>
 8005350:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005358:	f000 ba5c 	b.w	8005814 <__retarget_lock_init_recursive>
 800535c:	bd10      	pop	{r4, pc}
 800535e:	bf00      	nop
 8005360:	0800556d 	.word	0x0800556d
 8005364:	0800558f 	.word	0x0800558f
 8005368:	080055c7 	.word	0x080055c7
 800536c:	080055eb 	.word	0x080055eb
 8005370:	20000300 	.word	0x20000300

08005374 <stdio_exit_handler>:
 8005374:	4a02      	ldr	r2, [pc, #8]	@ (8005380 <stdio_exit_handler+0xc>)
 8005376:	4903      	ldr	r1, [pc, #12]	@ (8005384 <stdio_exit_handler+0x10>)
 8005378:	4803      	ldr	r0, [pc, #12]	@ (8005388 <stdio_exit_handler+0x14>)
 800537a:	f000 b869 	b.w	8005450 <_fwalk_sglue>
 800537e:	bf00      	nop
 8005380:	20000010 	.word	0x20000010
 8005384:	08007149 	.word	0x08007149
 8005388:	20000020 	.word	0x20000020

0800538c <cleanup_stdio>:
 800538c:	6841      	ldr	r1, [r0, #4]
 800538e:	4b0c      	ldr	r3, [pc, #48]	@ (80053c0 <cleanup_stdio+0x34>)
 8005390:	4299      	cmp	r1, r3
 8005392:	b510      	push	{r4, lr}
 8005394:	4604      	mov	r4, r0
 8005396:	d001      	beq.n	800539c <cleanup_stdio+0x10>
 8005398:	f001 fed6 	bl	8007148 <_fflush_r>
 800539c:	68a1      	ldr	r1, [r4, #8]
 800539e:	4b09      	ldr	r3, [pc, #36]	@ (80053c4 <cleanup_stdio+0x38>)
 80053a0:	4299      	cmp	r1, r3
 80053a2:	d002      	beq.n	80053aa <cleanup_stdio+0x1e>
 80053a4:	4620      	mov	r0, r4
 80053a6:	f001 fecf 	bl	8007148 <_fflush_r>
 80053aa:	68e1      	ldr	r1, [r4, #12]
 80053ac:	4b06      	ldr	r3, [pc, #24]	@ (80053c8 <cleanup_stdio+0x3c>)
 80053ae:	4299      	cmp	r1, r3
 80053b0:	d004      	beq.n	80053bc <cleanup_stdio+0x30>
 80053b2:	4620      	mov	r0, r4
 80053b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053b8:	f001 bec6 	b.w	8007148 <_fflush_r>
 80053bc:	bd10      	pop	{r4, pc}
 80053be:	bf00      	nop
 80053c0:	20000300 	.word	0x20000300
 80053c4:	20000368 	.word	0x20000368
 80053c8:	200003d0 	.word	0x200003d0

080053cc <global_stdio_init.part.0>:
 80053cc:	b510      	push	{r4, lr}
 80053ce:	4b0b      	ldr	r3, [pc, #44]	@ (80053fc <global_stdio_init.part.0+0x30>)
 80053d0:	4c0b      	ldr	r4, [pc, #44]	@ (8005400 <global_stdio_init.part.0+0x34>)
 80053d2:	4a0c      	ldr	r2, [pc, #48]	@ (8005404 <global_stdio_init.part.0+0x38>)
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	4620      	mov	r0, r4
 80053d8:	2200      	movs	r2, #0
 80053da:	2104      	movs	r1, #4
 80053dc:	f7ff ff94 	bl	8005308 <std>
 80053e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80053e4:	2201      	movs	r2, #1
 80053e6:	2109      	movs	r1, #9
 80053e8:	f7ff ff8e 	bl	8005308 <std>
 80053ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80053f0:	2202      	movs	r2, #2
 80053f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053f6:	2112      	movs	r1, #18
 80053f8:	f7ff bf86 	b.w	8005308 <std>
 80053fc:	20000438 	.word	0x20000438
 8005400:	20000300 	.word	0x20000300
 8005404:	08005375 	.word	0x08005375

08005408 <__sfp_lock_acquire>:
 8005408:	4801      	ldr	r0, [pc, #4]	@ (8005410 <__sfp_lock_acquire+0x8>)
 800540a:	f000 ba04 	b.w	8005816 <__retarget_lock_acquire_recursive>
 800540e:	bf00      	nop
 8005410:	20000441 	.word	0x20000441

08005414 <__sfp_lock_release>:
 8005414:	4801      	ldr	r0, [pc, #4]	@ (800541c <__sfp_lock_release+0x8>)
 8005416:	f000 b9ff 	b.w	8005818 <__retarget_lock_release_recursive>
 800541a:	bf00      	nop
 800541c:	20000441 	.word	0x20000441

08005420 <__sinit>:
 8005420:	b510      	push	{r4, lr}
 8005422:	4604      	mov	r4, r0
 8005424:	f7ff fff0 	bl	8005408 <__sfp_lock_acquire>
 8005428:	6a23      	ldr	r3, [r4, #32]
 800542a:	b11b      	cbz	r3, 8005434 <__sinit+0x14>
 800542c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005430:	f7ff bff0 	b.w	8005414 <__sfp_lock_release>
 8005434:	4b04      	ldr	r3, [pc, #16]	@ (8005448 <__sinit+0x28>)
 8005436:	6223      	str	r3, [r4, #32]
 8005438:	4b04      	ldr	r3, [pc, #16]	@ (800544c <__sinit+0x2c>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1f5      	bne.n	800542c <__sinit+0xc>
 8005440:	f7ff ffc4 	bl	80053cc <global_stdio_init.part.0>
 8005444:	e7f2      	b.n	800542c <__sinit+0xc>
 8005446:	bf00      	nop
 8005448:	0800538d 	.word	0x0800538d
 800544c:	20000438 	.word	0x20000438

08005450 <_fwalk_sglue>:
 8005450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005454:	4607      	mov	r7, r0
 8005456:	4688      	mov	r8, r1
 8005458:	4614      	mov	r4, r2
 800545a:	2600      	movs	r6, #0
 800545c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005460:	f1b9 0901 	subs.w	r9, r9, #1
 8005464:	d505      	bpl.n	8005472 <_fwalk_sglue+0x22>
 8005466:	6824      	ldr	r4, [r4, #0]
 8005468:	2c00      	cmp	r4, #0
 800546a:	d1f7      	bne.n	800545c <_fwalk_sglue+0xc>
 800546c:	4630      	mov	r0, r6
 800546e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005472:	89ab      	ldrh	r3, [r5, #12]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d907      	bls.n	8005488 <_fwalk_sglue+0x38>
 8005478:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800547c:	3301      	adds	r3, #1
 800547e:	d003      	beq.n	8005488 <_fwalk_sglue+0x38>
 8005480:	4629      	mov	r1, r5
 8005482:	4638      	mov	r0, r7
 8005484:	47c0      	blx	r8
 8005486:	4306      	orrs	r6, r0
 8005488:	3568      	adds	r5, #104	@ 0x68
 800548a:	e7e9      	b.n	8005460 <_fwalk_sglue+0x10>

0800548c <iprintf>:
 800548c:	b40f      	push	{r0, r1, r2, r3}
 800548e:	b507      	push	{r0, r1, r2, lr}
 8005490:	4906      	ldr	r1, [pc, #24]	@ (80054ac <iprintf+0x20>)
 8005492:	ab04      	add	r3, sp, #16
 8005494:	6808      	ldr	r0, [r1, #0]
 8005496:	f853 2b04 	ldr.w	r2, [r3], #4
 800549a:	6881      	ldr	r1, [r0, #8]
 800549c:	9301      	str	r3, [sp, #4]
 800549e:	f001 fcb7 	bl	8006e10 <_vfiprintf_r>
 80054a2:	b003      	add	sp, #12
 80054a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80054a8:	b004      	add	sp, #16
 80054aa:	4770      	bx	lr
 80054ac:	2000001c 	.word	0x2000001c

080054b0 <_puts_r>:
 80054b0:	6a03      	ldr	r3, [r0, #32]
 80054b2:	b570      	push	{r4, r5, r6, lr}
 80054b4:	6884      	ldr	r4, [r0, #8]
 80054b6:	4605      	mov	r5, r0
 80054b8:	460e      	mov	r6, r1
 80054ba:	b90b      	cbnz	r3, 80054c0 <_puts_r+0x10>
 80054bc:	f7ff ffb0 	bl	8005420 <__sinit>
 80054c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054c2:	07db      	lsls	r3, r3, #31
 80054c4:	d405      	bmi.n	80054d2 <_puts_r+0x22>
 80054c6:	89a3      	ldrh	r3, [r4, #12]
 80054c8:	0598      	lsls	r0, r3, #22
 80054ca:	d402      	bmi.n	80054d2 <_puts_r+0x22>
 80054cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054ce:	f000 f9a2 	bl	8005816 <__retarget_lock_acquire_recursive>
 80054d2:	89a3      	ldrh	r3, [r4, #12]
 80054d4:	0719      	lsls	r1, r3, #28
 80054d6:	d502      	bpl.n	80054de <_puts_r+0x2e>
 80054d8:	6923      	ldr	r3, [r4, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d135      	bne.n	800554a <_puts_r+0x9a>
 80054de:	4621      	mov	r1, r4
 80054e0:	4628      	mov	r0, r5
 80054e2:	f000 f8c5 	bl	8005670 <__swsetup_r>
 80054e6:	b380      	cbz	r0, 800554a <_puts_r+0x9a>
 80054e8:	f04f 35ff 	mov.w	r5, #4294967295
 80054ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054ee:	07da      	lsls	r2, r3, #31
 80054f0:	d405      	bmi.n	80054fe <_puts_r+0x4e>
 80054f2:	89a3      	ldrh	r3, [r4, #12]
 80054f4:	059b      	lsls	r3, r3, #22
 80054f6:	d402      	bmi.n	80054fe <_puts_r+0x4e>
 80054f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054fa:	f000 f98d 	bl	8005818 <__retarget_lock_release_recursive>
 80054fe:	4628      	mov	r0, r5
 8005500:	bd70      	pop	{r4, r5, r6, pc}
 8005502:	2b00      	cmp	r3, #0
 8005504:	da04      	bge.n	8005510 <_puts_r+0x60>
 8005506:	69a2      	ldr	r2, [r4, #24]
 8005508:	429a      	cmp	r2, r3
 800550a:	dc17      	bgt.n	800553c <_puts_r+0x8c>
 800550c:	290a      	cmp	r1, #10
 800550e:	d015      	beq.n	800553c <_puts_r+0x8c>
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	6022      	str	r2, [r4, #0]
 8005516:	7019      	strb	r1, [r3, #0]
 8005518:	68a3      	ldr	r3, [r4, #8]
 800551a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800551e:	3b01      	subs	r3, #1
 8005520:	60a3      	str	r3, [r4, #8]
 8005522:	2900      	cmp	r1, #0
 8005524:	d1ed      	bne.n	8005502 <_puts_r+0x52>
 8005526:	2b00      	cmp	r3, #0
 8005528:	da11      	bge.n	800554e <_puts_r+0x9e>
 800552a:	4622      	mov	r2, r4
 800552c:	210a      	movs	r1, #10
 800552e:	4628      	mov	r0, r5
 8005530:	f000 f85f 	bl	80055f2 <__swbuf_r>
 8005534:	3001      	adds	r0, #1
 8005536:	d0d7      	beq.n	80054e8 <_puts_r+0x38>
 8005538:	250a      	movs	r5, #10
 800553a:	e7d7      	b.n	80054ec <_puts_r+0x3c>
 800553c:	4622      	mov	r2, r4
 800553e:	4628      	mov	r0, r5
 8005540:	f000 f857 	bl	80055f2 <__swbuf_r>
 8005544:	3001      	adds	r0, #1
 8005546:	d1e7      	bne.n	8005518 <_puts_r+0x68>
 8005548:	e7ce      	b.n	80054e8 <_puts_r+0x38>
 800554a:	3e01      	subs	r6, #1
 800554c:	e7e4      	b.n	8005518 <_puts_r+0x68>
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	6022      	str	r2, [r4, #0]
 8005554:	220a      	movs	r2, #10
 8005556:	701a      	strb	r2, [r3, #0]
 8005558:	e7ee      	b.n	8005538 <_puts_r+0x88>
	...

0800555c <puts>:
 800555c:	4b02      	ldr	r3, [pc, #8]	@ (8005568 <puts+0xc>)
 800555e:	4601      	mov	r1, r0
 8005560:	6818      	ldr	r0, [r3, #0]
 8005562:	f7ff bfa5 	b.w	80054b0 <_puts_r>
 8005566:	bf00      	nop
 8005568:	2000001c 	.word	0x2000001c

0800556c <__sread>:
 800556c:	b510      	push	{r4, lr}
 800556e:	460c      	mov	r4, r1
 8005570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005574:	f000 f900 	bl	8005778 <_read_r>
 8005578:	2800      	cmp	r0, #0
 800557a:	bfab      	itete	ge
 800557c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800557e:	89a3      	ldrhlt	r3, [r4, #12]
 8005580:	181b      	addge	r3, r3, r0
 8005582:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005586:	bfac      	ite	ge
 8005588:	6563      	strge	r3, [r4, #84]	@ 0x54
 800558a:	81a3      	strhlt	r3, [r4, #12]
 800558c:	bd10      	pop	{r4, pc}

0800558e <__swrite>:
 800558e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005592:	461f      	mov	r7, r3
 8005594:	898b      	ldrh	r3, [r1, #12]
 8005596:	05db      	lsls	r3, r3, #23
 8005598:	4605      	mov	r5, r0
 800559a:	460c      	mov	r4, r1
 800559c:	4616      	mov	r6, r2
 800559e:	d505      	bpl.n	80055ac <__swrite+0x1e>
 80055a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055a4:	2302      	movs	r3, #2
 80055a6:	2200      	movs	r2, #0
 80055a8:	f000 f8d4 	bl	8005754 <_lseek_r>
 80055ac:	89a3      	ldrh	r3, [r4, #12]
 80055ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055b6:	81a3      	strh	r3, [r4, #12]
 80055b8:	4632      	mov	r2, r6
 80055ba:	463b      	mov	r3, r7
 80055bc:	4628      	mov	r0, r5
 80055be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055c2:	f000 b8eb 	b.w	800579c <_write_r>

080055c6 <__sseek>:
 80055c6:	b510      	push	{r4, lr}
 80055c8:	460c      	mov	r4, r1
 80055ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ce:	f000 f8c1 	bl	8005754 <_lseek_r>
 80055d2:	1c43      	adds	r3, r0, #1
 80055d4:	89a3      	ldrh	r3, [r4, #12]
 80055d6:	bf15      	itete	ne
 80055d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80055da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80055de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80055e2:	81a3      	strheq	r3, [r4, #12]
 80055e4:	bf18      	it	ne
 80055e6:	81a3      	strhne	r3, [r4, #12]
 80055e8:	bd10      	pop	{r4, pc}

080055ea <__sclose>:
 80055ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ee:	f000 b8a1 	b.w	8005734 <_close_r>

080055f2 <__swbuf_r>:
 80055f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f4:	460e      	mov	r6, r1
 80055f6:	4614      	mov	r4, r2
 80055f8:	4605      	mov	r5, r0
 80055fa:	b118      	cbz	r0, 8005604 <__swbuf_r+0x12>
 80055fc:	6a03      	ldr	r3, [r0, #32]
 80055fe:	b90b      	cbnz	r3, 8005604 <__swbuf_r+0x12>
 8005600:	f7ff ff0e 	bl	8005420 <__sinit>
 8005604:	69a3      	ldr	r3, [r4, #24]
 8005606:	60a3      	str	r3, [r4, #8]
 8005608:	89a3      	ldrh	r3, [r4, #12]
 800560a:	071a      	lsls	r2, r3, #28
 800560c:	d501      	bpl.n	8005612 <__swbuf_r+0x20>
 800560e:	6923      	ldr	r3, [r4, #16]
 8005610:	b943      	cbnz	r3, 8005624 <__swbuf_r+0x32>
 8005612:	4621      	mov	r1, r4
 8005614:	4628      	mov	r0, r5
 8005616:	f000 f82b 	bl	8005670 <__swsetup_r>
 800561a:	b118      	cbz	r0, 8005624 <__swbuf_r+0x32>
 800561c:	f04f 37ff 	mov.w	r7, #4294967295
 8005620:	4638      	mov	r0, r7
 8005622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005624:	6823      	ldr	r3, [r4, #0]
 8005626:	6922      	ldr	r2, [r4, #16]
 8005628:	1a98      	subs	r0, r3, r2
 800562a:	6963      	ldr	r3, [r4, #20]
 800562c:	b2f6      	uxtb	r6, r6
 800562e:	4283      	cmp	r3, r0
 8005630:	4637      	mov	r7, r6
 8005632:	dc05      	bgt.n	8005640 <__swbuf_r+0x4e>
 8005634:	4621      	mov	r1, r4
 8005636:	4628      	mov	r0, r5
 8005638:	f001 fd86 	bl	8007148 <_fflush_r>
 800563c:	2800      	cmp	r0, #0
 800563e:	d1ed      	bne.n	800561c <__swbuf_r+0x2a>
 8005640:	68a3      	ldr	r3, [r4, #8]
 8005642:	3b01      	subs	r3, #1
 8005644:	60a3      	str	r3, [r4, #8]
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	6022      	str	r2, [r4, #0]
 800564c:	701e      	strb	r6, [r3, #0]
 800564e:	6962      	ldr	r2, [r4, #20]
 8005650:	1c43      	adds	r3, r0, #1
 8005652:	429a      	cmp	r2, r3
 8005654:	d004      	beq.n	8005660 <__swbuf_r+0x6e>
 8005656:	89a3      	ldrh	r3, [r4, #12]
 8005658:	07db      	lsls	r3, r3, #31
 800565a:	d5e1      	bpl.n	8005620 <__swbuf_r+0x2e>
 800565c:	2e0a      	cmp	r6, #10
 800565e:	d1df      	bne.n	8005620 <__swbuf_r+0x2e>
 8005660:	4621      	mov	r1, r4
 8005662:	4628      	mov	r0, r5
 8005664:	f001 fd70 	bl	8007148 <_fflush_r>
 8005668:	2800      	cmp	r0, #0
 800566a:	d0d9      	beq.n	8005620 <__swbuf_r+0x2e>
 800566c:	e7d6      	b.n	800561c <__swbuf_r+0x2a>
	...

08005670 <__swsetup_r>:
 8005670:	b538      	push	{r3, r4, r5, lr}
 8005672:	4b29      	ldr	r3, [pc, #164]	@ (8005718 <__swsetup_r+0xa8>)
 8005674:	4605      	mov	r5, r0
 8005676:	6818      	ldr	r0, [r3, #0]
 8005678:	460c      	mov	r4, r1
 800567a:	b118      	cbz	r0, 8005684 <__swsetup_r+0x14>
 800567c:	6a03      	ldr	r3, [r0, #32]
 800567e:	b90b      	cbnz	r3, 8005684 <__swsetup_r+0x14>
 8005680:	f7ff fece 	bl	8005420 <__sinit>
 8005684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005688:	0719      	lsls	r1, r3, #28
 800568a:	d422      	bmi.n	80056d2 <__swsetup_r+0x62>
 800568c:	06da      	lsls	r2, r3, #27
 800568e:	d407      	bmi.n	80056a0 <__swsetup_r+0x30>
 8005690:	2209      	movs	r2, #9
 8005692:	602a      	str	r2, [r5, #0]
 8005694:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005698:	81a3      	strh	r3, [r4, #12]
 800569a:	f04f 30ff 	mov.w	r0, #4294967295
 800569e:	e033      	b.n	8005708 <__swsetup_r+0x98>
 80056a0:	0758      	lsls	r0, r3, #29
 80056a2:	d512      	bpl.n	80056ca <__swsetup_r+0x5a>
 80056a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80056a6:	b141      	cbz	r1, 80056ba <__swsetup_r+0x4a>
 80056a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80056ac:	4299      	cmp	r1, r3
 80056ae:	d002      	beq.n	80056b6 <__swsetup_r+0x46>
 80056b0:	4628      	mov	r0, r5
 80056b2:	f000 ff01 	bl	80064b8 <_free_r>
 80056b6:	2300      	movs	r3, #0
 80056b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80056ba:	89a3      	ldrh	r3, [r4, #12]
 80056bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80056c0:	81a3      	strh	r3, [r4, #12]
 80056c2:	2300      	movs	r3, #0
 80056c4:	6063      	str	r3, [r4, #4]
 80056c6:	6923      	ldr	r3, [r4, #16]
 80056c8:	6023      	str	r3, [r4, #0]
 80056ca:	89a3      	ldrh	r3, [r4, #12]
 80056cc:	f043 0308 	orr.w	r3, r3, #8
 80056d0:	81a3      	strh	r3, [r4, #12]
 80056d2:	6923      	ldr	r3, [r4, #16]
 80056d4:	b94b      	cbnz	r3, 80056ea <__swsetup_r+0x7a>
 80056d6:	89a3      	ldrh	r3, [r4, #12]
 80056d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80056dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056e0:	d003      	beq.n	80056ea <__swsetup_r+0x7a>
 80056e2:	4621      	mov	r1, r4
 80056e4:	4628      	mov	r0, r5
 80056e6:	f001 fd7d 	bl	80071e4 <__smakebuf_r>
 80056ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056ee:	f013 0201 	ands.w	r2, r3, #1
 80056f2:	d00a      	beq.n	800570a <__swsetup_r+0x9a>
 80056f4:	2200      	movs	r2, #0
 80056f6:	60a2      	str	r2, [r4, #8]
 80056f8:	6962      	ldr	r2, [r4, #20]
 80056fa:	4252      	negs	r2, r2
 80056fc:	61a2      	str	r2, [r4, #24]
 80056fe:	6922      	ldr	r2, [r4, #16]
 8005700:	b942      	cbnz	r2, 8005714 <__swsetup_r+0xa4>
 8005702:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005706:	d1c5      	bne.n	8005694 <__swsetup_r+0x24>
 8005708:	bd38      	pop	{r3, r4, r5, pc}
 800570a:	0799      	lsls	r1, r3, #30
 800570c:	bf58      	it	pl
 800570e:	6962      	ldrpl	r2, [r4, #20]
 8005710:	60a2      	str	r2, [r4, #8]
 8005712:	e7f4      	b.n	80056fe <__swsetup_r+0x8e>
 8005714:	2000      	movs	r0, #0
 8005716:	e7f7      	b.n	8005708 <__swsetup_r+0x98>
 8005718:	2000001c 	.word	0x2000001c

0800571c <memset>:
 800571c:	4402      	add	r2, r0
 800571e:	4603      	mov	r3, r0
 8005720:	4293      	cmp	r3, r2
 8005722:	d100      	bne.n	8005726 <memset+0xa>
 8005724:	4770      	bx	lr
 8005726:	f803 1b01 	strb.w	r1, [r3], #1
 800572a:	e7f9      	b.n	8005720 <memset+0x4>

0800572c <_localeconv_r>:
 800572c:	4800      	ldr	r0, [pc, #0]	@ (8005730 <_localeconv_r+0x4>)
 800572e:	4770      	bx	lr
 8005730:	2000015c 	.word	0x2000015c

08005734 <_close_r>:
 8005734:	b538      	push	{r3, r4, r5, lr}
 8005736:	4d06      	ldr	r5, [pc, #24]	@ (8005750 <_close_r+0x1c>)
 8005738:	2300      	movs	r3, #0
 800573a:	4604      	mov	r4, r0
 800573c:	4608      	mov	r0, r1
 800573e:	602b      	str	r3, [r5, #0]
 8005740:	f7fc fd89 	bl	8002256 <_close>
 8005744:	1c43      	adds	r3, r0, #1
 8005746:	d102      	bne.n	800574e <_close_r+0x1a>
 8005748:	682b      	ldr	r3, [r5, #0]
 800574a:	b103      	cbz	r3, 800574e <_close_r+0x1a>
 800574c:	6023      	str	r3, [r4, #0]
 800574e:	bd38      	pop	{r3, r4, r5, pc}
 8005750:	2000043c 	.word	0x2000043c

08005754 <_lseek_r>:
 8005754:	b538      	push	{r3, r4, r5, lr}
 8005756:	4d07      	ldr	r5, [pc, #28]	@ (8005774 <_lseek_r+0x20>)
 8005758:	4604      	mov	r4, r0
 800575a:	4608      	mov	r0, r1
 800575c:	4611      	mov	r1, r2
 800575e:	2200      	movs	r2, #0
 8005760:	602a      	str	r2, [r5, #0]
 8005762:	461a      	mov	r2, r3
 8005764:	f7fc fd9e 	bl	80022a4 <_lseek>
 8005768:	1c43      	adds	r3, r0, #1
 800576a:	d102      	bne.n	8005772 <_lseek_r+0x1e>
 800576c:	682b      	ldr	r3, [r5, #0]
 800576e:	b103      	cbz	r3, 8005772 <_lseek_r+0x1e>
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	bd38      	pop	{r3, r4, r5, pc}
 8005774:	2000043c 	.word	0x2000043c

08005778 <_read_r>:
 8005778:	b538      	push	{r3, r4, r5, lr}
 800577a:	4d07      	ldr	r5, [pc, #28]	@ (8005798 <_read_r+0x20>)
 800577c:	4604      	mov	r4, r0
 800577e:	4608      	mov	r0, r1
 8005780:	4611      	mov	r1, r2
 8005782:	2200      	movs	r2, #0
 8005784:	602a      	str	r2, [r5, #0]
 8005786:	461a      	mov	r2, r3
 8005788:	f7fc fd48 	bl	800221c <_read>
 800578c:	1c43      	adds	r3, r0, #1
 800578e:	d102      	bne.n	8005796 <_read_r+0x1e>
 8005790:	682b      	ldr	r3, [r5, #0]
 8005792:	b103      	cbz	r3, 8005796 <_read_r+0x1e>
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	bd38      	pop	{r3, r4, r5, pc}
 8005798:	2000043c 	.word	0x2000043c

0800579c <_write_r>:
 800579c:	b538      	push	{r3, r4, r5, lr}
 800579e:	4d07      	ldr	r5, [pc, #28]	@ (80057bc <_write_r+0x20>)
 80057a0:	4604      	mov	r4, r0
 80057a2:	4608      	mov	r0, r1
 80057a4:	4611      	mov	r1, r2
 80057a6:	2200      	movs	r2, #0
 80057a8:	602a      	str	r2, [r5, #0]
 80057aa:	461a      	mov	r2, r3
 80057ac:	f7fc fc0a 	bl	8001fc4 <_write>
 80057b0:	1c43      	adds	r3, r0, #1
 80057b2:	d102      	bne.n	80057ba <_write_r+0x1e>
 80057b4:	682b      	ldr	r3, [r5, #0]
 80057b6:	b103      	cbz	r3, 80057ba <_write_r+0x1e>
 80057b8:	6023      	str	r3, [r4, #0]
 80057ba:	bd38      	pop	{r3, r4, r5, pc}
 80057bc:	2000043c 	.word	0x2000043c

080057c0 <__errno>:
 80057c0:	4b01      	ldr	r3, [pc, #4]	@ (80057c8 <__errno+0x8>)
 80057c2:	6818      	ldr	r0, [r3, #0]
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	2000001c 	.word	0x2000001c

080057cc <__libc_init_array>:
 80057cc:	b570      	push	{r4, r5, r6, lr}
 80057ce:	4d0d      	ldr	r5, [pc, #52]	@ (8005804 <__libc_init_array+0x38>)
 80057d0:	4c0d      	ldr	r4, [pc, #52]	@ (8005808 <__libc_init_array+0x3c>)
 80057d2:	1b64      	subs	r4, r4, r5
 80057d4:	10a4      	asrs	r4, r4, #2
 80057d6:	2600      	movs	r6, #0
 80057d8:	42a6      	cmp	r6, r4
 80057da:	d109      	bne.n	80057f0 <__libc_init_array+0x24>
 80057dc:	4d0b      	ldr	r5, [pc, #44]	@ (800580c <__libc_init_array+0x40>)
 80057de:	4c0c      	ldr	r4, [pc, #48]	@ (8005810 <__libc_init_array+0x44>)
 80057e0:	f003 fa1a 	bl	8008c18 <_init>
 80057e4:	1b64      	subs	r4, r4, r5
 80057e6:	10a4      	asrs	r4, r4, #2
 80057e8:	2600      	movs	r6, #0
 80057ea:	42a6      	cmp	r6, r4
 80057ec:	d105      	bne.n	80057fa <__libc_init_array+0x2e>
 80057ee:	bd70      	pop	{r4, r5, r6, pc}
 80057f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057f4:	4798      	blx	r3
 80057f6:	3601      	adds	r6, #1
 80057f8:	e7ee      	b.n	80057d8 <__libc_init_array+0xc>
 80057fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80057fe:	4798      	blx	r3
 8005800:	3601      	adds	r6, #1
 8005802:	e7f2      	b.n	80057ea <__libc_init_array+0x1e>
 8005804:	08009430 	.word	0x08009430
 8005808:	08009430 	.word	0x08009430
 800580c:	08009430 	.word	0x08009430
 8005810:	08009434 	.word	0x08009434

08005814 <__retarget_lock_init_recursive>:
 8005814:	4770      	bx	lr

08005816 <__retarget_lock_acquire_recursive>:
 8005816:	4770      	bx	lr

08005818 <__retarget_lock_release_recursive>:
 8005818:	4770      	bx	lr

0800581a <quorem>:
 800581a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800581e:	6903      	ldr	r3, [r0, #16]
 8005820:	690c      	ldr	r4, [r1, #16]
 8005822:	42a3      	cmp	r3, r4
 8005824:	4607      	mov	r7, r0
 8005826:	db7e      	blt.n	8005926 <quorem+0x10c>
 8005828:	3c01      	subs	r4, #1
 800582a:	f101 0814 	add.w	r8, r1, #20
 800582e:	00a3      	lsls	r3, r4, #2
 8005830:	f100 0514 	add.w	r5, r0, #20
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800583a:	9301      	str	r3, [sp, #4]
 800583c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005840:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005844:	3301      	adds	r3, #1
 8005846:	429a      	cmp	r2, r3
 8005848:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800584c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005850:	d32e      	bcc.n	80058b0 <quorem+0x96>
 8005852:	f04f 0a00 	mov.w	sl, #0
 8005856:	46c4      	mov	ip, r8
 8005858:	46ae      	mov	lr, r5
 800585a:	46d3      	mov	fp, sl
 800585c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005860:	b298      	uxth	r0, r3
 8005862:	fb06 a000 	mla	r0, r6, r0, sl
 8005866:	0c02      	lsrs	r2, r0, #16
 8005868:	0c1b      	lsrs	r3, r3, #16
 800586a:	fb06 2303 	mla	r3, r6, r3, r2
 800586e:	f8de 2000 	ldr.w	r2, [lr]
 8005872:	b280      	uxth	r0, r0
 8005874:	b292      	uxth	r2, r2
 8005876:	1a12      	subs	r2, r2, r0
 8005878:	445a      	add	r2, fp
 800587a:	f8de 0000 	ldr.w	r0, [lr]
 800587e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005882:	b29b      	uxth	r3, r3
 8005884:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005888:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800588c:	b292      	uxth	r2, r2
 800588e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005892:	45e1      	cmp	r9, ip
 8005894:	f84e 2b04 	str.w	r2, [lr], #4
 8005898:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800589c:	d2de      	bcs.n	800585c <quorem+0x42>
 800589e:	9b00      	ldr	r3, [sp, #0]
 80058a0:	58eb      	ldr	r3, [r5, r3]
 80058a2:	b92b      	cbnz	r3, 80058b0 <quorem+0x96>
 80058a4:	9b01      	ldr	r3, [sp, #4]
 80058a6:	3b04      	subs	r3, #4
 80058a8:	429d      	cmp	r5, r3
 80058aa:	461a      	mov	r2, r3
 80058ac:	d32f      	bcc.n	800590e <quorem+0xf4>
 80058ae:	613c      	str	r4, [r7, #16]
 80058b0:	4638      	mov	r0, r7
 80058b2:	f001 f97b 	bl	8006bac <__mcmp>
 80058b6:	2800      	cmp	r0, #0
 80058b8:	db25      	blt.n	8005906 <quorem+0xec>
 80058ba:	4629      	mov	r1, r5
 80058bc:	2000      	movs	r0, #0
 80058be:	f858 2b04 	ldr.w	r2, [r8], #4
 80058c2:	f8d1 c000 	ldr.w	ip, [r1]
 80058c6:	fa1f fe82 	uxth.w	lr, r2
 80058ca:	fa1f f38c 	uxth.w	r3, ip
 80058ce:	eba3 030e 	sub.w	r3, r3, lr
 80058d2:	4403      	add	r3, r0
 80058d4:	0c12      	lsrs	r2, r2, #16
 80058d6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80058da:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80058de:	b29b      	uxth	r3, r3
 80058e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058e4:	45c1      	cmp	r9, r8
 80058e6:	f841 3b04 	str.w	r3, [r1], #4
 80058ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 80058ee:	d2e6      	bcs.n	80058be <quorem+0xa4>
 80058f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058f8:	b922      	cbnz	r2, 8005904 <quorem+0xea>
 80058fa:	3b04      	subs	r3, #4
 80058fc:	429d      	cmp	r5, r3
 80058fe:	461a      	mov	r2, r3
 8005900:	d30b      	bcc.n	800591a <quorem+0x100>
 8005902:	613c      	str	r4, [r7, #16]
 8005904:	3601      	adds	r6, #1
 8005906:	4630      	mov	r0, r6
 8005908:	b003      	add	sp, #12
 800590a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800590e:	6812      	ldr	r2, [r2, #0]
 8005910:	3b04      	subs	r3, #4
 8005912:	2a00      	cmp	r2, #0
 8005914:	d1cb      	bne.n	80058ae <quorem+0x94>
 8005916:	3c01      	subs	r4, #1
 8005918:	e7c6      	b.n	80058a8 <quorem+0x8e>
 800591a:	6812      	ldr	r2, [r2, #0]
 800591c:	3b04      	subs	r3, #4
 800591e:	2a00      	cmp	r2, #0
 8005920:	d1ef      	bne.n	8005902 <quorem+0xe8>
 8005922:	3c01      	subs	r4, #1
 8005924:	e7ea      	b.n	80058fc <quorem+0xe2>
 8005926:	2000      	movs	r0, #0
 8005928:	e7ee      	b.n	8005908 <quorem+0xee>
 800592a:	0000      	movs	r0, r0
 800592c:	0000      	movs	r0, r0
	...

08005930 <_dtoa_r>:
 8005930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005934:	69c7      	ldr	r7, [r0, #28]
 8005936:	b099      	sub	sp, #100	@ 0x64
 8005938:	ed8d 0b02 	vstr	d0, [sp, #8]
 800593c:	ec55 4b10 	vmov	r4, r5, d0
 8005940:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005942:	9109      	str	r1, [sp, #36]	@ 0x24
 8005944:	4683      	mov	fp, r0
 8005946:	920e      	str	r2, [sp, #56]	@ 0x38
 8005948:	9313      	str	r3, [sp, #76]	@ 0x4c
 800594a:	b97f      	cbnz	r7, 800596c <_dtoa_r+0x3c>
 800594c:	2010      	movs	r0, #16
 800594e:	f000 fdfd 	bl	800654c <malloc>
 8005952:	4602      	mov	r2, r0
 8005954:	f8cb 001c 	str.w	r0, [fp, #28]
 8005958:	b920      	cbnz	r0, 8005964 <_dtoa_r+0x34>
 800595a:	4ba7      	ldr	r3, [pc, #668]	@ (8005bf8 <_dtoa_r+0x2c8>)
 800595c:	21ef      	movs	r1, #239	@ 0xef
 800595e:	48a7      	ldr	r0, [pc, #668]	@ (8005bfc <_dtoa_r+0x2cc>)
 8005960:	f001 fcbc 	bl	80072dc <__assert_func>
 8005964:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005968:	6007      	str	r7, [r0, #0]
 800596a:	60c7      	str	r7, [r0, #12]
 800596c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005970:	6819      	ldr	r1, [r3, #0]
 8005972:	b159      	cbz	r1, 800598c <_dtoa_r+0x5c>
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	604a      	str	r2, [r1, #4]
 8005978:	2301      	movs	r3, #1
 800597a:	4093      	lsls	r3, r2
 800597c:	608b      	str	r3, [r1, #8]
 800597e:	4658      	mov	r0, fp
 8005980:	f000 feda 	bl	8006738 <_Bfree>
 8005984:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	1e2b      	subs	r3, r5, #0
 800598e:	bfb9      	ittee	lt
 8005990:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005994:	9303      	strlt	r3, [sp, #12]
 8005996:	2300      	movge	r3, #0
 8005998:	6033      	strge	r3, [r6, #0]
 800599a:	9f03      	ldr	r7, [sp, #12]
 800599c:	4b98      	ldr	r3, [pc, #608]	@ (8005c00 <_dtoa_r+0x2d0>)
 800599e:	bfbc      	itt	lt
 80059a0:	2201      	movlt	r2, #1
 80059a2:	6032      	strlt	r2, [r6, #0]
 80059a4:	43bb      	bics	r3, r7
 80059a6:	d112      	bne.n	80059ce <_dtoa_r+0x9e>
 80059a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80059aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80059ae:	6013      	str	r3, [r2, #0]
 80059b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80059b4:	4323      	orrs	r3, r4
 80059b6:	f000 854d 	beq.w	8006454 <_dtoa_r+0xb24>
 80059ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80059bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005c14 <_dtoa_r+0x2e4>
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 854f 	beq.w	8006464 <_dtoa_r+0xb34>
 80059c6:	f10a 0303 	add.w	r3, sl, #3
 80059ca:	f000 bd49 	b.w	8006460 <_dtoa_r+0xb30>
 80059ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80059d2:	2200      	movs	r2, #0
 80059d4:	ec51 0b17 	vmov	r0, r1, d7
 80059d8:	2300      	movs	r3, #0
 80059da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80059de:	f7fb f893 	bl	8000b08 <__aeabi_dcmpeq>
 80059e2:	4680      	mov	r8, r0
 80059e4:	b158      	cbz	r0, 80059fe <_dtoa_r+0xce>
 80059e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80059e8:	2301      	movs	r3, #1
 80059ea:	6013      	str	r3, [r2, #0]
 80059ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80059ee:	b113      	cbz	r3, 80059f6 <_dtoa_r+0xc6>
 80059f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80059f2:	4b84      	ldr	r3, [pc, #528]	@ (8005c04 <_dtoa_r+0x2d4>)
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005c18 <_dtoa_r+0x2e8>
 80059fa:	f000 bd33 	b.w	8006464 <_dtoa_r+0xb34>
 80059fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005a02:	aa16      	add	r2, sp, #88	@ 0x58
 8005a04:	a917      	add	r1, sp, #92	@ 0x5c
 8005a06:	4658      	mov	r0, fp
 8005a08:	f001 f980 	bl	8006d0c <__d2b>
 8005a0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005a10:	4681      	mov	r9, r0
 8005a12:	2e00      	cmp	r6, #0
 8005a14:	d077      	beq.n	8005b06 <_dtoa_r+0x1d6>
 8005a16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a18:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005a1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005a28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005a2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005a30:	4619      	mov	r1, r3
 8005a32:	2200      	movs	r2, #0
 8005a34:	4b74      	ldr	r3, [pc, #464]	@ (8005c08 <_dtoa_r+0x2d8>)
 8005a36:	f7fa fc47 	bl	80002c8 <__aeabi_dsub>
 8005a3a:	a369      	add	r3, pc, #420	@ (adr r3, 8005be0 <_dtoa_r+0x2b0>)
 8005a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a40:	f7fa fdfa 	bl	8000638 <__aeabi_dmul>
 8005a44:	a368      	add	r3, pc, #416	@ (adr r3, 8005be8 <_dtoa_r+0x2b8>)
 8005a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4a:	f7fa fc3f 	bl	80002cc <__adddf3>
 8005a4e:	4604      	mov	r4, r0
 8005a50:	4630      	mov	r0, r6
 8005a52:	460d      	mov	r5, r1
 8005a54:	f7fa fd86 	bl	8000564 <__aeabi_i2d>
 8005a58:	a365      	add	r3, pc, #404	@ (adr r3, 8005bf0 <_dtoa_r+0x2c0>)
 8005a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5e:	f7fa fdeb 	bl	8000638 <__aeabi_dmul>
 8005a62:	4602      	mov	r2, r0
 8005a64:	460b      	mov	r3, r1
 8005a66:	4620      	mov	r0, r4
 8005a68:	4629      	mov	r1, r5
 8005a6a:	f7fa fc2f 	bl	80002cc <__adddf3>
 8005a6e:	4604      	mov	r4, r0
 8005a70:	460d      	mov	r5, r1
 8005a72:	f7fb f891 	bl	8000b98 <__aeabi_d2iz>
 8005a76:	2200      	movs	r2, #0
 8005a78:	4607      	mov	r7, r0
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	4629      	mov	r1, r5
 8005a80:	f7fb f84c 	bl	8000b1c <__aeabi_dcmplt>
 8005a84:	b140      	cbz	r0, 8005a98 <_dtoa_r+0x168>
 8005a86:	4638      	mov	r0, r7
 8005a88:	f7fa fd6c 	bl	8000564 <__aeabi_i2d>
 8005a8c:	4622      	mov	r2, r4
 8005a8e:	462b      	mov	r3, r5
 8005a90:	f7fb f83a 	bl	8000b08 <__aeabi_dcmpeq>
 8005a94:	b900      	cbnz	r0, 8005a98 <_dtoa_r+0x168>
 8005a96:	3f01      	subs	r7, #1
 8005a98:	2f16      	cmp	r7, #22
 8005a9a:	d851      	bhi.n	8005b40 <_dtoa_r+0x210>
 8005a9c:	4b5b      	ldr	r3, [pc, #364]	@ (8005c0c <_dtoa_r+0x2dc>)
 8005a9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005aaa:	f7fb f837 	bl	8000b1c <__aeabi_dcmplt>
 8005aae:	2800      	cmp	r0, #0
 8005ab0:	d048      	beq.n	8005b44 <_dtoa_r+0x214>
 8005ab2:	3f01      	subs	r7, #1
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	9312      	str	r3, [sp, #72]	@ 0x48
 8005ab8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005aba:	1b9b      	subs	r3, r3, r6
 8005abc:	1e5a      	subs	r2, r3, #1
 8005abe:	bf44      	itt	mi
 8005ac0:	f1c3 0801 	rsbmi	r8, r3, #1
 8005ac4:	2300      	movmi	r3, #0
 8005ac6:	9208      	str	r2, [sp, #32]
 8005ac8:	bf54      	ite	pl
 8005aca:	f04f 0800 	movpl.w	r8, #0
 8005ace:	9308      	strmi	r3, [sp, #32]
 8005ad0:	2f00      	cmp	r7, #0
 8005ad2:	db39      	blt.n	8005b48 <_dtoa_r+0x218>
 8005ad4:	9b08      	ldr	r3, [sp, #32]
 8005ad6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005ad8:	443b      	add	r3, r7
 8005ada:	9308      	str	r3, [sp, #32]
 8005adc:	2300      	movs	r3, #0
 8005ade:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ae2:	2b09      	cmp	r3, #9
 8005ae4:	d864      	bhi.n	8005bb0 <_dtoa_r+0x280>
 8005ae6:	2b05      	cmp	r3, #5
 8005ae8:	bfc4      	itt	gt
 8005aea:	3b04      	subgt	r3, #4
 8005aec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005af0:	f1a3 0302 	sub.w	r3, r3, #2
 8005af4:	bfcc      	ite	gt
 8005af6:	2400      	movgt	r4, #0
 8005af8:	2401      	movle	r4, #1
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	d863      	bhi.n	8005bc6 <_dtoa_r+0x296>
 8005afe:	e8df f003 	tbb	[pc, r3]
 8005b02:	372a      	.short	0x372a
 8005b04:	5535      	.short	0x5535
 8005b06:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005b0a:	441e      	add	r6, r3
 8005b0c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005b10:	2b20      	cmp	r3, #32
 8005b12:	bfc1      	itttt	gt
 8005b14:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005b18:	409f      	lslgt	r7, r3
 8005b1a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005b1e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005b22:	bfd6      	itet	le
 8005b24:	f1c3 0320 	rsble	r3, r3, #32
 8005b28:	ea47 0003 	orrgt.w	r0, r7, r3
 8005b2c:	fa04 f003 	lslle.w	r0, r4, r3
 8005b30:	f7fa fd08 	bl	8000544 <__aeabi_ui2d>
 8005b34:	2201      	movs	r2, #1
 8005b36:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005b3a:	3e01      	subs	r6, #1
 8005b3c:	9214      	str	r2, [sp, #80]	@ 0x50
 8005b3e:	e777      	b.n	8005a30 <_dtoa_r+0x100>
 8005b40:	2301      	movs	r3, #1
 8005b42:	e7b8      	b.n	8005ab6 <_dtoa_r+0x186>
 8005b44:	9012      	str	r0, [sp, #72]	@ 0x48
 8005b46:	e7b7      	b.n	8005ab8 <_dtoa_r+0x188>
 8005b48:	427b      	negs	r3, r7
 8005b4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	eba8 0807 	sub.w	r8, r8, r7
 8005b52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005b54:	e7c4      	b.n	8005ae0 <_dtoa_r+0x1b0>
 8005b56:	2300      	movs	r3, #0
 8005b58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	dc35      	bgt.n	8005bcc <_dtoa_r+0x29c>
 8005b60:	2301      	movs	r3, #1
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	9307      	str	r3, [sp, #28]
 8005b66:	461a      	mov	r2, r3
 8005b68:	920e      	str	r2, [sp, #56]	@ 0x38
 8005b6a:	e00b      	b.n	8005b84 <_dtoa_r+0x254>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e7f3      	b.n	8005b58 <_dtoa_r+0x228>
 8005b70:	2300      	movs	r3, #0
 8005b72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b76:	18fb      	adds	r3, r7, r3
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	9307      	str	r3, [sp, #28]
 8005b80:	bfb8      	it	lt
 8005b82:	2301      	movlt	r3, #1
 8005b84:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005b88:	2100      	movs	r1, #0
 8005b8a:	2204      	movs	r2, #4
 8005b8c:	f102 0514 	add.w	r5, r2, #20
 8005b90:	429d      	cmp	r5, r3
 8005b92:	d91f      	bls.n	8005bd4 <_dtoa_r+0x2a4>
 8005b94:	6041      	str	r1, [r0, #4]
 8005b96:	4658      	mov	r0, fp
 8005b98:	f000 fd8e 	bl	80066b8 <_Balloc>
 8005b9c:	4682      	mov	sl, r0
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	d13c      	bne.n	8005c1c <_dtoa_r+0x2ec>
 8005ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8005c10 <_dtoa_r+0x2e0>)
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	f240 11af 	movw	r1, #431	@ 0x1af
 8005baa:	e6d8      	b.n	800595e <_dtoa_r+0x2e>
 8005bac:	2301      	movs	r3, #1
 8005bae:	e7e0      	b.n	8005b72 <_dtoa_r+0x242>
 8005bb0:	2401      	movs	r4, #1
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bb6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	9307      	str	r3, [sp, #28]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	2312      	movs	r3, #18
 8005bc4:	e7d0      	b.n	8005b68 <_dtoa_r+0x238>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005bca:	e7f5      	b.n	8005bb8 <_dtoa_r+0x288>
 8005bcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	9307      	str	r3, [sp, #28]
 8005bd2:	e7d7      	b.n	8005b84 <_dtoa_r+0x254>
 8005bd4:	3101      	adds	r1, #1
 8005bd6:	0052      	lsls	r2, r2, #1
 8005bd8:	e7d8      	b.n	8005b8c <_dtoa_r+0x25c>
 8005bda:	bf00      	nop
 8005bdc:	f3af 8000 	nop.w
 8005be0:	636f4361 	.word	0x636f4361
 8005be4:	3fd287a7 	.word	0x3fd287a7
 8005be8:	8b60c8b3 	.word	0x8b60c8b3
 8005bec:	3fc68a28 	.word	0x3fc68a28
 8005bf0:	509f79fb 	.word	0x509f79fb
 8005bf4:	3fd34413 	.word	0x3fd34413
 8005bf8:	08008eb1 	.word	0x08008eb1
 8005bfc:	08008ec8 	.word	0x08008ec8
 8005c00:	7ff00000 	.word	0x7ff00000
 8005c04:	08008e81 	.word	0x08008e81
 8005c08:	3ff80000 	.word	0x3ff80000
 8005c0c:	08008fc0 	.word	0x08008fc0
 8005c10:	08008f20 	.word	0x08008f20
 8005c14:	08008ead 	.word	0x08008ead
 8005c18:	08008e80 	.word	0x08008e80
 8005c1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c20:	6018      	str	r0, [r3, #0]
 8005c22:	9b07      	ldr	r3, [sp, #28]
 8005c24:	2b0e      	cmp	r3, #14
 8005c26:	f200 80a4 	bhi.w	8005d72 <_dtoa_r+0x442>
 8005c2a:	2c00      	cmp	r4, #0
 8005c2c:	f000 80a1 	beq.w	8005d72 <_dtoa_r+0x442>
 8005c30:	2f00      	cmp	r7, #0
 8005c32:	dd33      	ble.n	8005c9c <_dtoa_r+0x36c>
 8005c34:	4bad      	ldr	r3, [pc, #692]	@ (8005eec <_dtoa_r+0x5bc>)
 8005c36:	f007 020f 	and.w	r2, r7, #15
 8005c3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c3e:	ed93 7b00 	vldr	d7, [r3]
 8005c42:	05f8      	lsls	r0, r7, #23
 8005c44:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005c48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005c4c:	d516      	bpl.n	8005c7c <_dtoa_r+0x34c>
 8005c4e:	4ba8      	ldr	r3, [pc, #672]	@ (8005ef0 <_dtoa_r+0x5c0>)
 8005c50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c58:	f7fa fe18 	bl	800088c <__aeabi_ddiv>
 8005c5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c60:	f004 040f 	and.w	r4, r4, #15
 8005c64:	2603      	movs	r6, #3
 8005c66:	4da2      	ldr	r5, [pc, #648]	@ (8005ef0 <_dtoa_r+0x5c0>)
 8005c68:	b954      	cbnz	r4, 8005c80 <_dtoa_r+0x350>
 8005c6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c72:	f7fa fe0b 	bl	800088c <__aeabi_ddiv>
 8005c76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c7a:	e028      	b.n	8005cce <_dtoa_r+0x39e>
 8005c7c:	2602      	movs	r6, #2
 8005c7e:	e7f2      	b.n	8005c66 <_dtoa_r+0x336>
 8005c80:	07e1      	lsls	r1, r4, #31
 8005c82:	d508      	bpl.n	8005c96 <_dtoa_r+0x366>
 8005c84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c8c:	f7fa fcd4 	bl	8000638 <__aeabi_dmul>
 8005c90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c94:	3601      	adds	r6, #1
 8005c96:	1064      	asrs	r4, r4, #1
 8005c98:	3508      	adds	r5, #8
 8005c9a:	e7e5      	b.n	8005c68 <_dtoa_r+0x338>
 8005c9c:	f000 80d2 	beq.w	8005e44 <_dtoa_r+0x514>
 8005ca0:	427c      	negs	r4, r7
 8005ca2:	4b92      	ldr	r3, [pc, #584]	@ (8005eec <_dtoa_r+0x5bc>)
 8005ca4:	4d92      	ldr	r5, [pc, #584]	@ (8005ef0 <_dtoa_r+0x5c0>)
 8005ca6:	f004 020f 	and.w	r2, r4, #15
 8005caa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005cb6:	f7fa fcbf 	bl	8000638 <__aeabi_dmul>
 8005cba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cbe:	1124      	asrs	r4, r4, #4
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	2602      	movs	r6, #2
 8005cc4:	2c00      	cmp	r4, #0
 8005cc6:	f040 80b2 	bne.w	8005e2e <_dtoa_r+0x4fe>
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1d3      	bne.n	8005c76 <_dtoa_r+0x346>
 8005cce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005cd0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 80b7 	beq.w	8005e48 <_dtoa_r+0x518>
 8005cda:	4b86      	ldr	r3, [pc, #536]	@ (8005ef4 <_dtoa_r+0x5c4>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	4620      	mov	r0, r4
 8005ce0:	4629      	mov	r1, r5
 8005ce2:	f7fa ff1b 	bl	8000b1c <__aeabi_dcmplt>
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	f000 80ae 	beq.w	8005e48 <_dtoa_r+0x518>
 8005cec:	9b07      	ldr	r3, [sp, #28]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 80aa 	beq.w	8005e48 <_dtoa_r+0x518>
 8005cf4:	9b00      	ldr	r3, [sp, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	dd37      	ble.n	8005d6a <_dtoa_r+0x43a>
 8005cfa:	1e7b      	subs	r3, r7, #1
 8005cfc:	9304      	str	r3, [sp, #16]
 8005cfe:	4620      	mov	r0, r4
 8005d00:	4b7d      	ldr	r3, [pc, #500]	@ (8005ef8 <_dtoa_r+0x5c8>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	4629      	mov	r1, r5
 8005d06:	f7fa fc97 	bl	8000638 <__aeabi_dmul>
 8005d0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d0e:	9c00      	ldr	r4, [sp, #0]
 8005d10:	3601      	adds	r6, #1
 8005d12:	4630      	mov	r0, r6
 8005d14:	f7fa fc26 	bl	8000564 <__aeabi_i2d>
 8005d18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d1c:	f7fa fc8c 	bl	8000638 <__aeabi_dmul>
 8005d20:	4b76      	ldr	r3, [pc, #472]	@ (8005efc <_dtoa_r+0x5cc>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	f7fa fad2 	bl	80002cc <__adddf3>
 8005d28:	4605      	mov	r5, r0
 8005d2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005d2e:	2c00      	cmp	r4, #0
 8005d30:	f040 808d 	bne.w	8005e4e <_dtoa_r+0x51e>
 8005d34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d38:	4b71      	ldr	r3, [pc, #452]	@ (8005f00 <_dtoa_r+0x5d0>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f7fa fac4 	bl	80002c8 <__aeabi_dsub>
 8005d40:	4602      	mov	r2, r0
 8005d42:	460b      	mov	r3, r1
 8005d44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d48:	462a      	mov	r2, r5
 8005d4a:	4633      	mov	r3, r6
 8005d4c:	f7fa ff04 	bl	8000b58 <__aeabi_dcmpgt>
 8005d50:	2800      	cmp	r0, #0
 8005d52:	f040 828b 	bne.w	800626c <_dtoa_r+0x93c>
 8005d56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d5a:	462a      	mov	r2, r5
 8005d5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005d60:	f7fa fedc 	bl	8000b1c <__aeabi_dcmplt>
 8005d64:	2800      	cmp	r0, #0
 8005d66:	f040 8128 	bne.w	8005fba <_dtoa_r+0x68a>
 8005d6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005d6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005d72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f2c0 815a 	blt.w	800602e <_dtoa_r+0x6fe>
 8005d7a:	2f0e      	cmp	r7, #14
 8005d7c:	f300 8157 	bgt.w	800602e <_dtoa_r+0x6fe>
 8005d80:	4b5a      	ldr	r3, [pc, #360]	@ (8005eec <_dtoa_r+0x5bc>)
 8005d82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d86:	ed93 7b00 	vldr	d7, [r3]
 8005d8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	ed8d 7b00 	vstr	d7, [sp]
 8005d92:	da03      	bge.n	8005d9c <_dtoa_r+0x46c>
 8005d94:	9b07      	ldr	r3, [sp, #28]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f340 8101 	ble.w	8005f9e <_dtoa_r+0x66e>
 8005d9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005da0:	4656      	mov	r6, sl
 8005da2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005da6:	4620      	mov	r0, r4
 8005da8:	4629      	mov	r1, r5
 8005daa:	f7fa fd6f 	bl	800088c <__aeabi_ddiv>
 8005dae:	f7fa fef3 	bl	8000b98 <__aeabi_d2iz>
 8005db2:	4680      	mov	r8, r0
 8005db4:	f7fa fbd6 	bl	8000564 <__aeabi_i2d>
 8005db8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005dbc:	f7fa fc3c 	bl	8000638 <__aeabi_dmul>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	4629      	mov	r1, r5
 8005dc8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005dcc:	f7fa fa7c 	bl	80002c8 <__aeabi_dsub>
 8005dd0:	f806 4b01 	strb.w	r4, [r6], #1
 8005dd4:	9d07      	ldr	r5, [sp, #28]
 8005dd6:	eba6 040a 	sub.w	r4, r6, sl
 8005dda:	42a5      	cmp	r5, r4
 8005ddc:	4602      	mov	r2, r0
 8005dde:	460b      	mov	r3, r1
 8005de0:	f040 8117 	bne.w	8006012 <_dtoa_r+0x6e2>
 8005de4:	f7fa fa72 	bl	80002cc <__adddf3>
 8005de8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005dec:	4604      	mov	r4, r0
 8005dee:	460d      	mov	r5, r1
 8005df0:	f7fa feb2 	bl	8000b58 <__aeabi_dcmpgt>
 8005df4:	2800      	cmp	r0, #0
 8005df6:	f040 80f9 	bne.w	8005fec <_dtoa_r+0x6bc>
 8005dfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005dfe:	4620      	mov	r0, r4
 8005e00:	4629      	mov	r1, r5
 8005e02:	f7fa fe81 	bl	8000b08 <__aeabi_dcmpeq>
 8005e06:	b118      	cbz	r0, 8005e10 <_dtoa_r+0x4e0>
 8005e08:	f018 0f01 	tst.w	r8, #1
 8005e0c:	f040 80ee 	bne.w	8005fec <_dtoa_r+0x6bc>
 8005e10:	4649      	mov	r1, r9
 8005e12:	4658      	mov	r0, fp
 8005e14:	f000 fc90 	bl	8006738 <_Bfree>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	7033      	strb	r3, [r6, #0]
 8005e1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005e1e:	3701      	adds	r7, #1
 8005e20:	601f      	str	r7, [r3, #0]
 8005e22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 831d 	beq.w	8006464 <_dtoa_r+0xb34>
 8005e2a:	601e      	str	r6, [r3, #0]
 8005e2c:	e31a      	b.n	8006464 <_dtoa_r+0xb34>
 8005e2e:	07e2      	lsls	r2, r4, #31
 8005e30:	d505      	bpl.n	8005e3e <_dtoa_r+0x50e>
 8005e32:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e36:	f7fa fbff 	bl	8000638 <__aeabi_dmul>
 8005e3a:	3601      	adds	r6, #1
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	1064      	asrs	r4, r4, #1
 8005e40:	3508      	adds	r5, #8
 8005e42:	e73f      	b.n	8005cc4 <_dtoa_r+0x394>
 8005e44:	2602      	movs	r6, #2
 8005e46:	e742      	b.n	8005cce <_dtoa_r+0x39e>
 8005e48:	9c07      	ldr	r4, [sp, #28]
 8005e4a:	9704      	str	r7, [sp, #16]
 8005e4c:	e761      	b.n	8005d12 <_dtoa_r+0x3e2>
 8005e4e:	4b27      	ldr	r3, [pc, #156]	@ (8005eec <_dtoa_r+0x5bc>)
 8005e50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005e52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005e56:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e5a:	4454      	add	r4, sl
 8005e5c:	2900      	cmp	r1, #0
 8005e5e:	d053      	beq.n	8005f08 <_dtoa_r+0x5d8>
 8005e60:	4928      	ldr	r1, [pc, #160]	@ (8005f04 <_dtoa_r+0x5d4>)
 8005e62:	2000      	movs	r0, #0
 8005e64:	f7fa fd12 	bl	800088c <__aeabi_ddiv>
 8005e68:	4633      	mov	r3, r6
 8005e6a:	462a      	mov	r2, r5
 8005e6c:	f7fa fa2c 	bl	80002c8 <__aeabi_dsub>
 8005e70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005e74:	4656      	mov	r6, sl
 8005e76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e7a:	f7fa fe8d 	bl	8000b98 <__aeabi_d2iz>
 8005e7e:	4605      	mov	r5, r0
 8005e80:	f7fa fb70 	bl	8000564 <__aeabi_i2d>
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e8c:	f7fa fa1c 	bl	80002c8 <__aeabi_dsub>
 8005e90:	3530      	adds	r5, #48	@ 0x30
 8005e92:	4602      	mov	r2, r0
 8005e94:	460b      	mov	r3, r1
 8005e96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e9a:	f806 5b01 	strb.w	r5, [r6], #1
 8005e9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005ea2:	f7fa fe3b 	bl	8000b1c <__aeabi_dcmplt>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d171      	bne.n	8005f8e <_dtoa_r+0x65e>
 8005eaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005eae:	4911      	ldr	r1, [pc, #68]	@ (8005ef4 <_dtoa_r+0x5c4>)
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	f7fa fa09 	bl	80002c8 <__aeabi_dsub>
 8005eb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005eba:	f7fa fe2f 	bl	8000b1c <__aeabi_dcmplt>
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	f040 8095 	bne.w	8005fee <_dtoa_r+0x6be>
 8005ec4:	42a6      	cmp	r6, r4
 8005ec6:	f43f af50 	beq.w	8005d6a <_dtoa_r+0x43a>
 8005eca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005ece:	4b0a      	ldr	r3, [pc, #40]	@ (8005ef8 <_dtoa_r+0x5c8>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f7fa fbb1 	bl	8000638 <__aeabi_dmul>
 8005ed6:	4b08      	ldr	r3, [pc, #32]	@ (8005ef8 <_dtoa_r+0x5c8>)
 8005ed8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005edc:	2200      	movs	r2, #0
 8005ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ee2:	f7fa fba9 	bl	8000638 <__aeabi_dmul>
 8005ee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005eea:	e7c4      	b.n	8005e76 <_dtoa_r+0x546>
 8005eec:	08008fc0 	.word	0x08008fc0
 8005ef0:	08008f98 	.word	0x08008f98
 8005ef4:	3ff00000 	.word	0x3ff00000
 8005ef8:	40240000 	.word	0x40240000
 8005efc:	401c0000 	.word	0x401c0000
 8005f00:	40140000 	.word	0x40140000
 8005f04:	3fe00000 	.word	0x3fe00000
 8005f08:	4631      	mov	r1, r6
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	f7fa fb94 	bl	8000638 <__aeabi_dmul>
 8005f10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005f14:	9415      	str	r4, [sp, #84]	@ 0x54
 8005f16:	4656      	mov	r6, sl
 8005f18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f1c:	f7fa fe3c 	bl	8000b98 <__aeabi_d2iz>
 8005f20:	4605      	mov	r5, r0
 8005f22:	f7fa fb1f 	bl	8000564 <__aeabi_i2d>
 8005f26:	4602      	mov	r2, r0
 8005f28:	460b      	mov	r3, r1
 8005f2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f2e:	f7fa f9cb 	bl	80002c8 <__aeabi_dsub>
 8005f32:	3530      	adds	r5, #48	@ 0x30
 8005f34:	f806 5b01 	strb.w	r5, [r6], #1
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	42a6      	cmp	r6, r4
 8005f3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f42:	f04f 0200 	mov.w	r2, #0
 8005f46:	d124      	bne.n	8005f92 <_dtoa_r+0x662>
 8005f48:	4bac      	ldr	r3, [pc, #688]	@ (80061fc <_dtoa_r+0x8cc>)
 8005f4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005f4e:	f7fa f9bd 	bl	80002cc <__adddf3>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f5a:	f7fa fdfd 	bl	8000b58 <__aeabi_dcmpgt>
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	d145      	bne.n	8005fee <_dtoa_r+0x6be>
 8005f62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005f66:	49a5      	ldr	r1, [pc, #660]	@ (80061fc <_dtoa_r+0x8cc>)
 8005f68:	2000      	movs	r0, #0
 8005f6a:	f7fa f9ad 	bl	80002c8 <__aeabi_dsub>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	460b      	mov	r3, r1
 8005f72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f76:	f7fa fdd1 	bl	8000b1c <__aeabi_dcmplt>
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	f43f aef5 	beq.w	8005d6a <_dtoa_r+0x43a>
 8005f80:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005f82:	1e73      	subs	r3, r6, #1
 8005f84:	9315      	str	r3, [sp, #84]	@ 0x54
 8005f86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005f8a:	2b30      	cmp	r3, #48	@ 0x30
 8005f8c:	d0f8      	beq.n	8005f80 <_dtoa_r+0x650>
 8005f8e:	9f04      	ldr	r7, [sp, #16]
 8005f90:	e73e      	b.n	8005e10 <_dtoa_r+0x4e0>
 8005f92:	4b9b      	ldr	r3, [pc, #620]	@ (8006200 <_dtoa_r+0x8d0>)
 8005f94:	f7fa fb50 	bl	8000638 <__aeabi_dmul>
 8005f98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f9c:	e7bc      	b.n	8005f18 <_dtoa_r+0x5e8>
 8005f9e:	d10c      	bne.n	8005fba <_dtoa_r+0x68a>
 8005fa0:	4b98      	ldr	r3, [pc, #608]	@ (8006204 <_dtoa_r+0x8d4>)
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fa8:	f7fa fb46 	bl	8000638 <__aeabi_dmul>
 8005fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fb0:	f7fa fdc8 	bl	8000b44 <__aeabi_dcmpge>
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	f000 8157 	beq.w	8006268 <_dtoa_r+0x938>
 8005fba:	2400      	movs	r4, #0
 8005fbc:	4625      	mov	r5, r4
 8005fbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005fc0:	43db      	mvns	r3, r3
 8005fc2:	9304      	str	r3, [sp, #16]
 8005fc4:	4656      	mov	r6, sl
 8005fc6:	2700      	movs	r7, #0
 8005fc8:	4621      	mov	r1, r4
 8005fca:	4658      	mov	r0, fp
 8005fcc:	f000 fbb4 	bl	8006738 <_Bfree>
 8005fd0:	2d00      	cmp	r5, #0
 8005fd2:	d0dc      	beq.n	8005f8e <_dtoa_r+0x65e>
 8005fd4:	b12f      	cbz	r7, 8005fe2 <_dtoa_r+0x6b2>
 8005fd6:	42af      	cmp	r7, r5
 8005fd8:	d003      	beq.n	8005fe2 <_dtoa_r+0x6b2>
 8005fda:	4639      	mov	r1, r7
 8005fdc:	4658      	mov	r0, fp
 8005fde:	f000 fbab 	bl	8006738 <_Bfree>
 8005fe2:	4629      	mov	r1, r5
 8005fe4:	4658      	mov	r0, fp
 8005fe6:	f000 fba7 	bl	8006738 <_Bfree>
 8005fea:	e7d0      	b.n	8005f8e <_dtoa_r+0x65e>
 8005fec:	9704      	str	r7, [sp, #16]
 8005fee:	4633      	mov	r3, r6
 8005ff0:	461e      	mov	r6, r3
 8005ff2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ff6:	2a39      	cmp	r2, #57	@ 0x39
 8005ff8:	d107      	bne.n	800600a <_dtoa_r+0x6da>
 8005ffa:	459a      	cmp	sl, r3
 8005ffc:	d1f8      	bne.n	8005ff0 <_dtoa_r+0x6c0>
 8005ffe:	9a04      	ldr	r2, [sp, #16]
 8006000:	3201      	adds	r2, #1
 8006002:	9204      	str	r2, [sp, #16]
 8006004:	2230      	movs	r2, #48	@ 0x30
 8006006:	f88a 2000 	strb.w	r2, [sl]
 800600a:	781a      	ldrb	r2, [r3, #0]
 800600c:	3201      	adds	r2, #1
 800600e:	701a      	strb	r2, [r3, #0]
 8006010:	e7bd      	b.n	8005f8e <_dtoa_r+0x65e>
 8006012:	4b7b      	ldr	r3, [pc, #492]	@ (8006200 <_dtoa_r+0x8d0>)
 8006014:	2200      	movs	r2, #0
 8006016:	f7fa fb0f 	bl	8000638 <__aeabi_dmul>
 800601a:	2200      	movs	r2, #0
 800601c:	2300      	movs	r3, #0
 800601e:	4604      	mov	r4, r0
 8006020:	460d      	mov	r5, r1
 8006022:	f7fa fd71 	bl	8000b08 <__aeabi_dcmpeq>
 8006026:	2800      	cmp	r0, #0
 8006028:	f43f aebb 	beq.w	8005da2 <_dtoa_r+0x472>
 800602c:	e6f0      	b.n	8005e10 <_dtoa_r+0x4e0>
 800602e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006030:	2a00      	cmp	r2, #0
 8006032:	f000 80db 	beq.w	80061ec <_dtoa_r+0x8bc>
 8006036:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006038:	2a01      	cmp	r2, #1
 800603a:	f300 80bf 	bgt.w	80061bc <_dtoa_r+0x88c>
 800603e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006040:	2a00      	cmp	r2, #0
 8006042:	f000 80b7 	beq.w	80061b4 <_dtoa_r+0x884>
 8006046:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800604a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800604c:	4646      	mov	r6, r8
 800604e:	9a08      	ldr	r2, [sp, #32]
 8006050:	2101      	movs	r1, #1
 8006052:	441a      	add	r2, r3
 8006054:	4658      	mov	r0, fp
 8006056:	4498      	add	r8, r3
 8006058:	9208      	str	r2, [sp, #32]
 800605a:	f000 fc21 	bl	80068a0 <__i2b>
 800605e:	4605      	mov	r5, r0
 8006060:	b15e      	cbz	r6, 800607a <_dtoa_r+0x74a>
 8006062:	9b08      	ldr	r3, [sp, #32]
 8006064:	2b00      	cmp	r3, #0
 8006066:	dd08      	ble.n	800607a <_dtoa_r+0x74a>
 8006068:	42b3      	cmp	r3, r6
 800606a:	9a08      	ldr	r2, [sp, #32]
 800606c:	bfa8      	it	ge
 800606e:	4633      	movge	r3, r6
 8006070:	eba8 0803 	sub.w	r8, r8, r3
 8006074:	1af6      	subs	r6, r6, r3
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	9308      	str	r3, [sp, #32]
 800607a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800607c:	b1f3      	cbz	r3, 80060bc <_dtoa_r+0x78c>
 800607e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 80b7 	beq.w	80061f4 <_dtoa_r+0x8c4>
 8006086:	b18c      	cbz	r4, 80060ac <_dtoa_r+0x77c>
 8006088:	4629      	mov	r1, r5
 800608a:	4622      	mov	r2, r4
 800608c:	4658      	mov	r0, fp
 800608e:	f000 fcc7 	bl	8006a20 <__pow5mult>
 8006092:	464a      	mov	r2, r9
 8006094:	4601      	mov	r1, r0
 8006096:	4605      	mov	r5, r0
 8006098:	4658      	mov	r0, fp
 800609a:	f000 fc17 	bl	80068cc <__multiply>
 800609e:	4649      	mov	r1, r9
 80060a0:	9004      	str	r0, [sp, #16]
 80060a2:	4658      	mov	r0, fp
 80060a4:	f000 fb48 	bl	8006738 <_Bfree>
 80060a8:	9b04      	ldr	r3, [sp, #16]
 80060aa:	4699      	mov	r9, r3
 80060ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060ae:	1b1a      	subs	r2, r3, r4
 80060b0:	d004      	beq.n	80060bc <_dtoa_r+0x78c>
 80060b2:	4649      	mov	r1, r9
 80060b4:	4658      	mov	r0, fp
 80060b6:	f000 fcb3 	bl	8006a20 <__pow5mult>
 80060ba:	4681      	mov	r9, r0
 80060bc:	2101      	movs	r1, #1
 80060be:	4658      	mov	r0, fp
 80060c0:	f000 fbee 	bl	80068a0 <__i2b>
 80060c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060c6:	4604      	mov	r4, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 81cf 	beq.w	800646c <_dtoa_r+0xb3c>
 80060ce:	461a      	mov	r2, r3
 80060d0:	4601      	mov	r1, r0
 80060d2:	4658      	mov	r0, fp
 80060d4:	f000 fca4 	bl	8006a20 <__pow5mult>
 80060d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060da:	2b01      	cmp	r3, #1
 80060dc:	4604      	mov	r4, r0
 80060de:	f300 8095 	bgt.w	800620c <_dtoa_r+0x8dc>
 80060e2:	9b02      	ldr	r3, [sp, #8]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f040 8087 	bne.w	80061f8 <_dtoa_r+0x8c8>
 80060ea:	9b03      	ldr	r3, [sp, #12]
 80060ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f040 8089 	bne.w	8006208 <_dtoa_r+0x8d8>
 80060f6:	9b03      	ldr	r3, [sp, #12]
 80060f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80060fc:	0d1b      	lsrs	r3, r3, #20
 80060fe:	051b      	lsls	r3, r3, #20
 8006100:	b12b      	cbz	r3, 800610e <_dtoa_r+0x7de>
 8006102:	9b08      	ldr	r3, [sp, #32]
 8006104:	3301      	adds	r3, #1
 8006106:	9308      	str	r3, [sp, #32]
 8006108:	f108 0801 	add.w	r8, r8, #1
 800610c:	2301      	movs	r3, #1
 800610e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006110:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006112:	2b00      	cmp	r3, #0
 8006114:	f000 81b0 	beq.w	8006478 <_dtoa_r+0xb48>
 8006118:	6923      	ldr	r3, [r4, #16]
 800611a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800611e:	6918      	ldr	r0, [r3, #16]
 8006120:	f000 fb72 	bl	8006808 <__hi0bits>
 8006124:	f1c0 0020 	rsb	r0, r0, #32
 8006128:	9b08      	ldr	r3, [sp, #32]
 800612a:	4418      	add	r0, r3
 800612c:	f010 001f 	ands.w	r0, r0, #31
 8006130:	d077      	beq.n	8006222 <_dtoa_r+0x8f2>
 8006132:	f1c0 0320 	rsb	r3, r0, #32
 8006136:	2b04      	cmp	r3, #4
 8006138:	dd6b      	ble.n	8006212 <_dtoa_r+0x8e2>
 800613a:	9b08      	ldr	r3, [sp, #32]
 800613c:	f1c0 001c 	rsb	r0, r0, #28
 8006140:	4403      	add	r3, r0
 8006142:	4480      	add	r8, r0
 8006144:	4406      	add	r6, r0
 8006146:	9308      	str	r3, [sp, #32]
 8006148:	f1b8 0f00 	cmp.w	r8, #0
 800614c:	dd05      	ble.n	800615a <_dtoa_r+0x82a>
 800614e:	4649      	mov	r1, r9
 8006150:	4642      	mov	r2, r8
 8006152:	4658      	mov	r0, fp
 8006154:	f000 fcbe 	bl	8006ad4 <__lshift>
 8006158:	4681      	mov	r9, r0
 800615a:	9b08      	ldr	r3, [sp, #32]
 800615c:	2b00      	cmp	r3, #0
 800615e:	dd05      	ble.n	800616c <_dtoa_r+0x83c>
 8006160:	4621      	mov	r1, r4
 8006162:	461a      	mov	r2, r3
 8006164:	4658      	mov	r0, fp
 8006166:	f000 fcb5 	bl	8006ad4 <__lshift>
 800616a:	4604      	mov	r4, r0
 800616c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800616e:	2b00      	cmp	r3, #0
 8006170:	d059      	beq.n	8006226 <_dtoa_r+0x8f6>
 8006172:	4621      	mov	r1, r4
 8006174:	4648      	mov	r0, r9
 8006176:	f000 fd19 	bl	8006bac <__mcmp>
 800617a:	2800      	cmp	r0, #0
 800617c:	da53      	bge.n	8006226 <_dtoa_r+0x8f6>
 800617e:	1e7b      	subs	r3, r7, #1
 8006180:	9304      	str	r3, [sp, #16]
 8006182:	4649      	mov	r1, r9
 8006184:	2300      	movs	r3, #0
 8006186:	220a      	movs	r2, #10
 8006188:	4658      	mov	r0, fp
 800618a:	f000 faf7 	bl	800677c <__multadd>
 800618e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006190:	4681      	mov	r9, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 8172 	beq.w	800647c <_dtoa_r+0xb4c>
 8006198:	2300      	movs	r3, #0
 800619a:	4629      	mov	r1, r5
 800619c:	220a      	movs	r2, #10
 800619e:	4658      	mov	r0, fp
 80061a0:	f000 faec 	bl	800677c <__multadd>
 80061a4:	9b00      	ldr	r3, [sp, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	4605      	mov	r5, r0
 80061aa:	dc67      	bgt.n	800627c <_dtoa_r+0x94c>
 80061ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	dc41      	bgt.n	8006236 <_dtoa_r+0x906>
 80061b2:	e063      	b.n	800627c <_dtoa_r+0x94c>
 80061b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80061b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80061ba:	e746      	b.n	800604a <_dtoa_r+0x71a>
 80061bc:	9b07      	ldr	r3, [sp, #28]
 80061be:	1e5c      	subs	r4, r3, #1
 80061c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061c2:	42a3      	cmp	r3, r4
 80061c4:	bfbf      	itttt	lt
 80061c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80061c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80061ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80061cc:	1ae3      	sublt	r3, r4, r3
 80061ce:	bfb4      	ite	lt
 80061d0:	18d2      	addlt	r2, r2, r3
 80061d2:	1b1c      	subge	r4, r3, r4
 80061d4:	9b07      	ldr	r3, [sp, #28]
 80061d6:	bfbc      	itt	lt
 80061d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80061da:	2400      	movlt	r4, #0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	bfb5      	itete	lt
 80061e0:	eba8 0603 	sublt.w	r6, r8, r3
 80061e4:	9b07      	ldrge	r3, [sp, #28]
 80061e6:	2300      	movlt	r3, #0
 80061e8:	4646      	movge	r6, r8
 80061ea:	e730      	b.n	800604e <_dtoa_r+0x71e>
 80061ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80061ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80061f0:	4646      	mov	r6, r8
 80061f2:	e735      	b.n	8006060 <_dtoa_r+0x730>
 80061f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80061f6:	e75c      	b.n	80060b2 <_dtoa_r+0x782>
 80061f8:	2300      	movs	r3, #0
 80061fa:	e788      	b.n	800610e <_dtoa_r+0x7de>
 80061fc:	3fe00000 	.word	0x3fe00000
 8006200:	40240000 	.word	0x40240000
 8006204:	40140000 	.word	0x40140000
 8006208:	9b02      	ldr	r3, [sp, #8]
 800620a:	e780      	b.n	800610e <_dtoa_r+0x7de>
 800620c:	2300      	movs	r3, #0
 800620e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006210:	e782      	b.n	8006118 <_dtoa_r+0x7e8>
 8006212:	d099      	beq.n	8006148 <_dtoa_r+0x818>
 8006214:	9a08      	ldr	r2, [sp, #32]
 8006216:	331c      	adds	r3, #28
 8006218:	441a      	add	r2, r3
 800621a:	4498      	add	r8, r3
 800621c:	441e      	add	r6, r3
 800621e:	9208      	str	r2, [sp, #32]
 8006220:	e792      	b.n	8006148 <_dtoa_r+0x818>
 8006222:	4603      	mov	r3, r0
 8006224:	e7f6      	b.n	8006214 <_dtoa_r+0x8e4>
 8006226:	9b07      	ldr	r3, [sp, #28]
 8006228:	9704      	str	r7, [sp, #16]
 800622a:	2b00      	cmp	r3, #0
 800622c:	dc20      	bgt.n	8006270 <_dtoa_r+0x940>
 800622e:	9300      	str	r3, [sp, #0]
 8006230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006232:	2b02      	cmp	r3, #2
 8006234:	dd1e      	ble.n	8006274 <_dtoa_r+0x944>
 8006236:	9b00      	ldr	r3, [sp, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	f47f aec0 	bne.w	8005fbe <_dtoa_r+0x68e>
 800623e:	4621      	mov	r1, r4
 8006240:	2205      	movs	r2, #5
 8006242:	4658      	mov	r0, fp
 8006244:	f000 fa9a 	bl	800677c <__multadd>
 8006248:	4601      	mov	r1, r0
 800624a:	4604      	mov	r4, r0
 800624c:	4648      	mov	r0, r9
 800624e:	f000 fcad 	bl	8006bac <__mcmp>
 8006252:	2800      	cmp	r0, #0
 8006254:	f77f aeb3 	ble.w	8005fbe <_dtoa_r+0x68e>
 8006258:	4656      	mov	r6, sl
 800625a:	2331      	movs	r3, #49	@ 0x31
 800625c:	f806 3b01 	strb.w	r3, [r6], #1
 8006260:	9b04      	ldr	r3, [sp, #16]
 8006262:	3301      	adds	r3, #1
 8006264:	9304      	str	r3, [sp, #16]
 8006266:	e6ae      	b.n	8005fc6 <_dtoa_r+0x696>
 8006268:	9c07      	ldr	r4, [sp, #28]
 800626a:	9704      	str	r7, [sp, #16]
 800626c:	4625      	mov	r5, r4
 800626e:	e7f3      	b.n	8006258 <_dtoa_r+0x928>
 8006270:	9b07      	ldr	r3, [sp, #28]
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006276:	2b00      	cmp	r3, #0
 8006278:	f000 8104 	beq.w	8006484 <_dtoa_r+0xb54>
 800627c:	2e00      	cmp	r6, #0
 800627e:	dd05      	ble.n	800628c <_dtoa_r+0x95c>
 8006280:	4629      	mov	r1, r5
 8006282:	4632      	mov	r2, r6
 8006284:	4658      	mov	r0, fp
 8006286:	f000 fc25 	bl	8006ad4 <__lshift>
 800628a:	4605      	mov	r5, r0
 800628c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800628e:	2b00      	cmp	r3, #0
 8006290:	d05a      	beq.n	8006348 <_dtoa_r+0xa18>
 8006292:	6869      	ldr	r1, [r5, #4]
 8006294:	4658      	mov	r0, fp
 8006296:	f000 fa0f 	bl	80066b8 <_Balloc>
 800629a:	4606      	mov	r6, r0
 800629c:	b928      	cbnz	r0, 80062aa <_dtoa_r+0x97a>
 800629e:	4b84      	ldr	r3, [pc, #528]	@ (80064b0 <_dtoa_r+0xb80>)
 80062a0:	4602      	mov	r2, r0
 80062a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80062a6:	f7ff bb5a 	b.w	800595e <_dtoa_r+0x2e>
 80062aa:	692a      	ldr	r2, [r5, #16]
 80062ac:	3202      	adds	r2, #2
 80062ae:	0092      	lsls	r2, r2, #2
 80062b0:	f105 010c 	add.w	r1, r5, #12
 80062b4:	300c      	adds	r0, #12
 80062b6:	f001 f803 	bl	80072c0 <memcpy>
 80062ba:	2201      	movs	r2, #1
 80062bc:	4631      	mov	r1, r6
 80062be:	4658      	mov	r0, fp
 80062c0:	f000 fc08 	bl	8006ad4 <__lshift>
 80062c4:	f10a 0301 	add.w	r3, sl, #1
 80062c8:	9307      	str	r3, [sp, #28]
 80062ca:	9b00      	ldr	r3, [sp, #0]
 80062cc:	4453      	add	r3, sl
 80062ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80062d0:	9b02      	ldr	r3, [sp, #8]
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	462f      	mov	r7, r5
 80062d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80062da:	4605      	mov	r5, r0
 80062dc:	9b07      	ldr	r3, [sp, #28]
 80062de:	4621      	mov	r1, r4
 80062e0:	3b01      	subs	r3, #1
 80062e2:	4648      	mov	r0, r9
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	f7ff fa98 	bl	800581a <quorem>
 80062ea:	4639      	mov	r1, r7
 80062ec:	9002      	str	r0, [sp, #8]
 80062ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80062f2:	4648      	mov	r0, r9
 80062f4:	f000 fc5a 	bl	8006bac <__mcmp>
 80062f8:	462a      	mov	r2, r5
 80062fa:	9008      	str	r0, [sp, #32]
 80062fc:	4621      	mov	r1, r4
 80062fe:	4658      	mov	r0, fp
 8006300:	f000 fc70 	bl	8006be4 <__mdiff>
 8006304:	68c2      	ldr	r2, [r0, #12]
 8006306:	4606      	mov	r6, r0
 8006308:	bb02      	cbnz	r2, 800634c <_dtoa_r+0xa1c>
 800630a:	4601      	mov	r1, r0
 800630c:	4648      	mov	r0, r9
 800630e:	f000 fc4d 	bl	8006bac <__mcmp>
 8006312:	4602      	mov	r2, r0
 8006314:	4631      	mov	r1, r6
 8006316:	4658      	mov	r0, fp
 8006318:	920e      	str	r2, [sp, #56]	@ 0x38
 800631a:	f000 fa0d 	bl	8006738 <_Bfree>
 800631e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006320:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006322:	9e07      	ldr	r6, [sp, #28]
 8006324:	ea43 0102 	orr.w	r1, r3, r2
 8006328:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800632a:	4319      	orrs	r1, r3
 800632c:	d110      	bne.n	8006350 <_dtoa_r+0xa20>
 800632e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006332:	d029      	beq.n	8006388 <_dtoa_r+0xa58>
 8006334:	9b08      	ldr	r3, [sp, #32]
 8006336:	2b00      	cmp	r3, #0
 8006338:	dd02      	ble.n	8006340 <_dtoa_r+0xa10>
 800633a:	9b02      	ldr	r3, [sp, #8]
 800633c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006340:	9b00      	ldr	r3, [sp, #0]
 8006342:	f883 8000 	strb.w	r8, [r3]
 8006346:	e63f      	b.n	8005fc8 <_dtoa_r+0x698>
 8006348:	4628      	mov	r0, r5
 800634a:	e7bb      	b.n	80062c4 <_dtoa_r+0x994>
 800634c:	2201      	movs	r2, #1
 800634e:	e7e1      	b.n	8006314 <_dtoa_r+0x9e4>
 8006350:	9b08      	ldr	r3, [sp, #32]
 8006352:	2b00      	cmp	r3, #0
 8006354:	db04      	blt.n	8006360 <_dtoa_r+0xa30>
 8006356:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006358:	430b      	orrs	r3, r1
 800635a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800635c:	430b      	orrs	r3, r1
 800635e:	d120      	bne.n	80063a2 <_dtoa_r+0xa72>
 8006360:	2a00      	cmp	r2, #0
 8006362:	dded      	ble.n	8006340 <_dtoa_r+0xa10>
 8006364:	4649      	mov	r1, r9
 8006366:	2201      	movs	r2, #1
 8006368:	4658      	mov	r0, fp
 800636a:	f000 fbb3 	bl	8006ad4 <__lshift>
 800636e:	4621      	mov	r1, r4
 8006370:	4681      	mov	r9, r0
 8006372:	f000 fc1b 	bl	8006bac <__mcmp>
 8006376:	2800      	cmp	r0, #0
 8006378:	dc03      	bgt.n	8006382 <_dtoa_r+0xa52>
 800637a:	d1e1      	bne.n	8006340 <_dtoa_r+0xa10>
 800637c:	f018 0f01 	tst.w	r8, #1
 8006380:	d0de      	beq.n	8006340 <_dtoa_r+0xa10>
 8006382:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006386:	d1d8      	bne.n	800633a <_dtoa_r+0xa0a>
 8006388:	9a00      	ldr	r2, [sp, #0]
 800638a:	2339      	movs	r3, #57	@ 0x39
 800638c:	7013      	strb	r3, [r2, #0]
 800638e:	4633      	mov	r3, r6
 8006390:	461e      	mov	r6, r3
 8006392:	3b01      	subs	r3, #1
 8006394:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006398:	2a39      	cmp	r2, #57	@ 0x39
 800639a:	d052      	beq.n	8006442 <_dtoa_r+0xb12>
 800639c:	3201      	adds	r2, #1
 800639e:	701a      	strb	r2, [r3, #0]
 80063a0:	e612      	b.n	8005fc8 <_dtoa_r+0x698>
 80063a2:	2a00      	cmp	r2, #0
 80063a4:	dd07      	ble.n	80063b6 <_dtoa_r+0xa86>
 80063a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80063aa:	d0ed      	beq.n	8006388 <_dtoa_r+0xa58>
 80063ac:	9a00      	ldr	r2, [sp, #0]
 80063ae:	f108 0301 	add.w	r3, r8, #1
 80063b2:	7013      	strb	r3, [r2, #0]
 80063b4:	e608      	b.n	8005fc8 <_dtoa_r+0x698>
 80063b6:	9b07      	ldr	r3, [sp, #28]
 80063b8:	9a07      	ldr	r2, [sp, #28]
 80063ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80063be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d028      	beq.n	8006416 <_dtoa_r+0xae6>
 80063c4:	4649      	mov	r1, r9
 80063c6:	2300      	movs	r3, #0
 80063c8:	220a      	movs	r2, #10
 80063ca:	4658      	mov	r0, fp
 80063cc:	f000 f9d6 	bl	800677c <__multadd>
 80063d0:	42af      	cmp	r7, r5
 80063d2:	4681      	mov	r9, r0
 80063d4:	f04f 0300 	mov.w	r3, #0
 80063d8:	f04f 020a 	mov.w	r2, #10
 80063dc:	4639      	mov	r1, r7
 80063de:	4658      	mov	r0, fp
 80063e0:	d107      	bne.n	80063f2 <_dtoa_r+0xac2>
 80063e2:	f000 f9cb 	bl	800677c <__multadd>
 80063e6:	4607      	mov	r7, r0
 80063e8:	4605      	mov	r5, r0
 80063ea:	9b07      	ldr	r3, [sp, #28]
 80063ec:	3301      	adds	r3, #1
 80063ee:	9307      	str	r3, [sp, #28]
 80063f0:	e774      	b.n	80062dc <_dtoa_r+0x9ac>
 80063f2:	f000 f9c3 	bl	800677c <__multadd>
 80063f6:	4629      	mov	r1, r5
 80063f8:	4607      	mov	r7, r0
 80063fa:	2300      	movs	r3, #0
 80063fc:	220a      	movs	r2, #10
 80063fe:	4658      	mov	r0, fp
 8006400:	f000 f9bc 	bl	800677c <__multadd>
 8006404:	4605      	mov	r5, r0
 8006406:	e7f0      	b.n	80063ea <_dtoa_r+0xaba>
 8006408:	9b00      	ldr	r3, [sp, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	bfcc      	ite	gt
 800640e:	461e      	movgt	r6, r3
 8006410:	2601      	movle	r6, #1
 8006412:	4456      	add	r6, sl
 8006414:	2700      	movs	r7, #0
 8006416:	4649      	mov	r1, r9
 8006418:	2201      	movs	r2, #1
 800641a:	4658      	mov	r0, fp
 800641c:	f000 fb5a 	bl	8006ad4 <__lshift>
 8006420:	4621      	mov	r1, r4
 8006422:	4681      	mov	r9, r0
 8006424:	f000 fbc2 	bl	8006bac <__mcmp>
 8006428:	2800      	cmp	r0, #0
 800642a:	dcb0      	bgt.n	800638e <_dtoa_r+0xa5e>
 800642c:	d102      	bne.n	8006434 <_dtoa_r+0xb04>
 800642e:	f018 0f01 	tst.w	r8, #1
 8006432:	d1ac      	bne.n	800638e <_dtoa_r+0xa5e>
 8006434:	4633      	mov	r3, r6
 8006436:	461e      	mov	r6, r3
 8006438:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800643c:	2a30      	cmp	r2, #48	@ 0x30
 800643e:	d0fa      	beq.n	8006436 <_dtoa_r+0xb06>
 8006440:	e5c2      	b.n	8005fc8 <_dtoa_r+0x698>
 8006442:	459a      	cmp	sl, r3
 8006444:	d1a4      	bne.n	8006390 <_dtoa_r+0xa60>
 8006446:	9b04      	ldr	r3, [sp, #16]
 8006448:	3301      	adds	r3, #1
 800644a:	9304      	str	r3, [sp, #16]
 800644c:	2331      	movs	r3, #49	@ 0x31
 800644e:	f88a 3000 	strb.w	r3, [sl]
 8006452:	e5b9      	b.n	8005fc8 <_dtoa_r+0x698>
 8006454:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006456:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80064b4 <_dtoa_r+0xb84>
 800645a:	b11b      	cbz	r3, 8006464 <_dtoa_r+0xb34>
 800645c:	f10a 0308 	add.w	r3, sl, #8
 8006460:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006462:	6013      	str	r3, [r2, #0]
 8006464:	4650      	mov	r0, sl
 8006466:	b019      	add	sp, #100	@ 0x64
 8006468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800646c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800646e:	2b01      	cmp	r3, #1
 8006470:	f77f ae37 	ble.w	80060e2 <_dtoa_r+0x7b2>
 8006474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006476:	930a      	str	r3, [sp, #40]	@ 0x28
 8006478:	2001      	movs	r0, #1
 800647a:	e655      	b.n	8006128 <_dtoa_r+0x7f8>
 800647c:	9b00      	ldr	r3, [sp, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	f77f aed6 	ble.w	8006230 <_dtoa_r+0x900>
 8006484:	4656      	mov	r6, sl
 8006486:	4621      	mov	r1, r4
 8006488:	4648      	mov	r0, r9
 800648a:	f7ff f9c6 	bl	800581a <quorem>
 800648e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006492:	f806 8b01 	strb.w	r8, [r6], #1
 8006496:	9b00      	ldr	r3, [sp, #0]
 8006498:	eba6 020a 	sub.w	r2, r6, sl
 800649c:	4293      	cmp	r3, r2
 800649e:	ddb3      	ble.n	8006408 <_dtoa_r+0xad8>
 80064a0:	4649      	mov	r1, r9
 80064a2:	2300      	movs	r3, #0
 80064a4:	220a      	movs	r2, #10
 80064a6:	4658      	mov	r0, fp
 80064a8:	f000 f968 	bl	800677c <__multadd>
 80064ac:	4681      	mov	r9, r0
 80064ae:	e7ea      	b.n	8006486 <_dtoa_r+0xb56>
 80064b0:	08008f20 	.word	0x08008f20
 80064b4:	08008ea4 	.word	0x08008ea4

080064b8 <_free_r>:
 80064b8:	b538      	push	{r3, r4, r5, lr}
 80064ba:	4605      	mov	r5, r0
 80064bc:	2900      	cmp	r1, #0
 80064be:	d041      	beq.n	8006544 <_free_r+0x8c>
 80064c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064c4:	1f0c      	subs	r4, r1, #4
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	bfb8      	it	lt
 80064ca:	18e4      	addlt	r4, r4, r3
 80064cc:	f000 f8e8 	bl	80066a0 <__malloc_lock>
 80064d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006548 <_free_r+0x90>)
 80064d2:	6813      	ldr	r3, [r2, #0]
 80064d4:	b933      	cbnz	r3, 80064e4 <_free_r+0x2c>
 80064d6:	6063      	str	r3, [r4, #4]
 80064d8:	6014      	str	r4, [r2, #0]
 80064da:	4628      	mov	r0, r5
 80064dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064e0:	f000 b8e4 	b.w	80066ac <__malloc_unlock>
 80064e4:	42a3      	cmp	r3, r4
 80064e6:	d908      	bls.n	80064fa <_free_r+0x42>
 80064e8:	6820      	ldr	r0, [r4, #0]
 80064ea:	1821      	adds	r1, r4, r0
 80064ec:	428b      	cmp	r3, r1
 80064ee:	bf01      	itttt	eq
 80064f0:	6819      	ldreq	r1, [r3, #0]
 80064f2:	685b      	ldreq	r3, [r3, #4]
 80064f4:	1809      	addeq	r1, r1, r0
 80064f6:	6021      	streq	r1, [r4, #0]
 80064f8:	e7ed      	b.n	80064d6 <_free_r+0x1e>
 80064fa:	461a      	mov	r2, r3
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	b10b      	cbz	r3, 8006504 <_free_r+0x4c>
 8006500:	42a3      	cmp	r3, r4
 8006502:	d9fa      	bls.n	80064fa <_free_r+0x42>
 8006504:	6811      	ldr	r1, [r2, #0]
 8006506:	1850      	adds	r0, r2, r1
 8006508:	42a0      	cmp	r0, r4
 800650a:	d10b      	bne.n	8006524 <_free_r+0x6c>
 800650c:	6820      	ldr	r0, [r4, #0]
 800650e:	4401      	add	r1, r0
 8006510:	1850      	adds	r0, r2, r1
 8006512:	4283      	cmp	r3, r0
 8006514:	6011      	str	r1, [r2, #0]
 8006516:	d1e0      	bne.n	80064da <_free_r+0x22>
 8006518:	6818      	ldr	r0, [r3, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	6053      	str	r3, [r2, #4]
 800651e:	4408      	add	r0, r1
 8006520:	6010      	str	r0, [r2, #0]
 8006522:	e7da      	b.n	80064da <_free_r+0x22>
 8006524:	d902      	bls.n	800652c <_free_r+0x74>
 8006526:	230c      	movs	r3, #12
 8006528:	602b      	str	r3, [r5, #0]
 800652a:	e7d6      	b.n	80064da <_free_r+0x22>
 800652c:	6820      	ldr	r0, [r4, #0]
 800652e:	1821      	adds	r1, r4, r0
 8006530:	428b      	cmp	r3, r1
 8006532:	bf04      	itt	eq
 8006534:	6819      	ldreq	r1, [r3, #0]
 8006536:	685b      	ldreq	r3, [r3, #4]
 8006538:	6063      	str	r3, [r4, #4]
 800653a:	bf04      	itt	eq
 800653c:	1809      	addeq	r1, r1, r0
 800653e:	6021      	streq	r1, [r4, #0]
 8006540:	6054      	str	r4, [r2, #4]
 8006542:	e7ca      	b.n	80064da <_free_r+0x22>
 8006544:	bd38      	pop	{r3, r4, r5, pc}
 8006546:	bf00      	nop
 8006548:	20000448 	.word	0x20000448

0800654c <malloc>:
 800654c:	4b02      	ldr	r3, [pc, #8]	@ (8006558 <malloc+0xc>)
 800654e:	4601      	mov	r1, r0
 8006550:	6818      	ldr	r0, [r3, #0]
 8006552:	f000 b825 	b.w	80065a0 <_malloc_r>
 8006556:	bf00      	nop
 8006558:	2000001c 	.word	0x2000001c

0800655c <sbrk_aligned>:
 800655c:	b570      	push	{r4, r5, r6, lr}
 800655e:	4e0f      	ldr	r6, [pc, #60]	@ (800659c <sbrk_aligned+0x40>)
 8006560:	460c      	mov	r4, r1
 8006562:	6831      	ldr	r1, [r6, #0]
 8006564:	4605      	mov	r5, r0
 8006566:	b911      	cbnz	r1, 800656e <sbrk_aligned+0x12>
 8006568:	f000 fe9a 	bl	80072a0 <_sbrk_r>
 800656c:	6030      	str	r0, [r6, #0]
 800656e:	4621      	mov	r1, r4
 8006570:	4628      	mov	r0, r5
 8006572:	f000 fe95 	bl	80072a0 <_sbrk_r>
 8006576:	1c43      	adds	r3, r0, #1
 8006578:	d103      	bne.n	8006582 <sbrk_aligned+0x26>
 800657a:	f04f 34ff 	mov.w	r4, #4294967295
 800657e:	4620      	mov	r0, r4
 8006580:	bd70      	pop	{r4, r5, r6, pc}
 8006582:	1cc4      	adds	r4, r0, #3
 8006584:	f024 0403 	bic.w	r4, r4, #3
 8006588:	42a0      	cmp	r0, r4
 800658a:	d0f8      	beq.n	800657e <sbrk_aligned+0x22>
 800658c:	1a21      	subs	r1, r4, r0
 800658e:	4628      	mov	r0, r5
 8006590:	f000 fe86 	bl	80072a0 <_sbrk_r>
 8006594:	3001      	adds	r0, #1
 8006596:	d1f2      	bne.n	800657e <sbrk_aligned+0x22>
 8006598:	e7ef      	b.n	800657a <sbrk_aligned+0x1e>
 800659a:	bf00      	nop
 800659c:	20000444 	.word	0x20000444

080065a0 <_malloc_r>:
 80065a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065a4:	1ccd      	adds	r5, r1, #3
 80065a6:	f025 0503 	bic.w	r5, r5, #3
 80065aa:	3508      	adds	r5, #8
 80065ac:	2d0c      	cmp	r5, #12
 80065ae:	bf38      	it	cc
 80065b0:	250c      	movcc	r5, #12
 80065b2:	2d00      	cmp	r5, #0
 80065b4:	4606      	mov	r6, r0
 80065b6:	db01      	blt.n	80065bc <_malloc_r+0x1c>
 80065b8:	42a9      	cmp	r1, r5
 80065ba:	d904      	bls.n	80065c6 <_malloc_r+0x26>
 80065bc:	230c      	movs	r3, #12
 80065be:	6033      	str	r3, [r6, #0]
 80065c0:	2000      	movs	r0, #0
 80065c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800669c <_malloc_r+0xfc>
 80065ca:	f000 f869 	bl	80066a0 <__malloc_lock>
 80065ce:	f8d8 3000 	ldr.w	r3, [r8]
 80065d2:	461c      	mov	r4, r3
 80065d4:	bb44      	cbnz	r4, 8006628 <_malloc_r+0x88>
 80065d6:	4629      	mov	r1, r5
 80065d8:	4630      	mov	r0, r6
 80065da:	f7ff ffbf 	bl	800655c <sbrk_aligned>
 80065de:	1c43      	adds	r3, r0, #1
 80065e0:	4604      	mov	r4, r0
 80065e2:	d158      	bne.n	8006696 <_malloc_r+0xf6>
 80065e4:	f8d8 4000 	ldr.w	r4, [r8]
 80065e8:	4627      	mov	r7, r4
 80065ea:	2f00      	cmp	r7, #0
 80065ec:	d143      	bne.n	8006676 <_malloc_r+0xd6>
 80065ee:	2c00      	cmp	r4, #0
 80065f0:	d04b      	beq.n	800668a <_malloc_r+0xea>
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	4639      	mov	r1, r7
 80065f6:	4630      	mov	r0, r6
 80065f8:	eb04 0903 	add.w	r9, r4, r3
 80065fc:	f000 fe50 	bl	80072a0 <_sbrk_r>
 8006600:	4581      	cmp	r9, r0
 8006602:	d142      	bne.n	800668a <_malloc_r+0xea>
 8006604:	6821      	ldr	r1, [r4, #0]
 8006606:	1a6d      	subs	r5, r5, r1
 8006608:	4629      	mov	r1, r5
 800660a:	4630      	mov	r0, r6
 800660c:	f7ff ffa6 	bl	800655c <sbrk_aligned>
 8006610:	3001      	adds	r0, #1
 8006612:	d03a      	beq.n	800668a <_malloc_r+0xea>
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	442b      	add	r3, r5
 8006618:	6023      	str	r3, [r4, #0]
 800661a:	f8d8 3000 	ldr.w	r3, [r8]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	bb62      	cbnz	r2, 800667c <_malloc_r+0xdc>
 8006622:	f8c8 7000 	str.w	r7, [r8]
 8006626:	e00f      	b.n	8006648 <_malloc_r+0xa8>
 8006628:	6822      	ldr	r2, [r4, #0]
 800662a:	1b52      	subs	r2, r2, r5
 800662c:	d420      	bmi.n	8006670 <_malloc_r+0xd0>
 800662e:	2a0b      	cmp	r2, #11
 8006630:	d917      	bls.n	8006662 <_malloc_r+0xc2>
 8006632:	1961      	adds	r1, r4, r5
 8006634:	42a3      	cmp	r3, r4
 8006636:	6025      	str	r5, [r4, #0]
 8006638:	bf18      	it	ne
 800663a:	6059      	strne	r1, [r3, #4]
 800663c:	6863      	ldr	r3, [r4, #4]
 800663e:	bf08      	it	eq
 8006640:	f8c8 1000 	streq.w	r1, [r8]
 8006644:	5162      	str	r2, [r4, r5]
 8006646:	604b      	str	r3, [r1, #4]
 8006648:	4630      	mov	r0, r6
 800664a:	f000 f82f 	bl	80066ac <__malloc_unlock>
 800664e:	f104 000b 	add.w	r0, r4, #11
 8006652:	1d23      	adds	r3, r4, #4
 8006654:	f020 0007 	bic.w	r0, r0, #7
 8006658:	1ac2      	subs	r2, r0, r3
 800665a:	bf1c      	itt	ne
 800665c:	1a1b      	subne	r3, r3, r0
 800665e:	50a3      	strne	r3, [r4, r2]
 8006660:	e7af      	b.n	80065c2 <_malloc_r+0x22>
 8006662:	6862      	ldr	r2, [r4, #4]
 8006664:	42a3      	cmp	r3, r4
 8006666:	bf0c      	ite	eq
 8006668:	f8c8 2000 	streq.w	r2, [r8]
 800666c:	605a      	strne	r2, [r3, #4]
 800666e:	e7eb      	b.n	8006648 <_malloc_r+0xa8>
 8006670:	4623      	mov	r3, r4
 8006672:	6864      	ldr	r4, [r4, #4]
 8006674:	e7ae      	b.n	80065d4 <_malloc_r+0x34>
 8006676:	463c      	mov	r4, r7
 8006678:	687f      	ldr	r7, [r7, #4]
 800667a:	e7b6      	b.n	80065ea <_malloc_r+0x4a>
 800667c:	461a      	mov	r2, r3
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	42a3      	cmp	r3, r4
 8006682:	d1fb      	bne.n	800667c <_malloc_r+0xdc>
 8006684:	2300      	movs	r3, #0
 8006686:	6053      	str	r3, [r2, #4]
 8006688:	e7de      	b.n	8006648 <_malloc_r+0xa8>
 800668a:	230c      	movs	r3, #12
 800668c:	6033      	str	r3, [r6, #0]
 800668e:	4630      	mov	r0, r6
 8006690:	f000 f80c 	bl	80066ac <__malloc_unlock>
 8006694:	e794      	b.n	80065c0 <_malloc_r+0x20>
 8006696:	6005      	str	r5, [r0, #0]
 8006698:	e7d6      	b.n	8006648 <_malloc_r+0xa8>
 800669a:	bf00      	nop
 800669c:	20000448 	.word	0x20000448

080066a0 <__malloc_lock>:
 80066a0:	4801      	ldr	r0, [pc, #4]	@ (80066a8 <__malloc_lock+0x8>)
 80066a2:	f7ff b8b8 	b.w	8005816 <__retarget_lock_acquire_recursive>
 80066a6:	bf00      	nop
 80066a8:	20000440 	.word	0x20000440

080066ac <__malloc_unlock>:
 80066ac:	4801      	ldr	r0, [pc, #4]	@ (80066b4 <__malloc_unlock+0x8>)
 80066ae:	f7ff b8b3 	b.w	8005818 <__retarget_lock_release_recursive>
 80066b2:	bf00      	nop
 80066b4:	20000440 	.word	0x20000440

080066b8 <_Balloc>:
 80066b8:	b570      	push	{r4, r5, r6, lr}
 80066ba:	69c6      	ldr	r6, [r0, #28]
 80066bc:	4604      	mov	r4, r0
 80066be:	460d      	mov	r5, r1
 80066c0:	b976      	cbnz	r6, 80066e0 <_Balloc+0x28>
 80066c2:	2010      	movs	r0, #16
 80066c4:	f7ff ff42 	bl	800654c <malloc>
 80066c8:	4602      	mov	r2, r0
 80066ca:	61e0      	str	r0, [r4, #28]
 80066cc:	b920      	cbnz	r0, 80066d8 <_Balloc+0x20>
 80066ce:	4b18      	ldr	r3, [pc, #96]	@ (8006730 <_Balloc+0x78>)
 80066d0:	4818      	ldr	r0, [pc, #96]	@ (8006734 <_Balloc+0x7c>)
 80066d2:	216b      	movs	r1, #107	@ 0x6b
 80066d4:	f000 fe02 	bl	80072dc <__assert_func>
 80066d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066dc:	6006      	str	r6, [r0, #0]
 80066de:	60c6      	str	r6, [r0, #12]
 80066e0:	69e6      	ldr	r6, [r4, #28]
 80066e2:	68f3      	ldr	r3, [r6, #12]
 80066e4:	b183      	cbz	r3, 8006708 <_Balloc+0x50>
 80066e6:	69e3      	ldr	r3, [r4, #28]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80066ee:	b9b8      	cbnz	r0, 8006720 <_Balloc+0x68>
 80066f0:	2101      	movs	r1, #1
 80066f2:	fa01 f605 	lsl.w	r6, r1, r5
 80066f6:	1d72      	adds	r2, r6, #5
 80066f8:	0092      	lsls	r2, r2, #2
 80066fa:	4620      	mov	r0, r4
 80066fc:	f000 fe0c 	bl	8007318 <_calloc_r>
 8006700:	b160      	cbz	r0, 800671c <_Balloc+0x64>
 8006702:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006706:	e00e      	b.n	8006726 <_Balloc+0x6e>
 8006708:	2221      	movs	r2, #33	@ 0x21
 800670a:	2104      	movs	r1, #4
 800670c:	4620      	mov	r0, r4
 800670e:	f000 fe03 	bl	8007318 <_calloc_r>
 8006712:	69e3      	ldr	r3, [r4, #28]
 8006714:	60f0      	str	r0, [r6, #12]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1e4      	bne.n	80066e6 <_Balloc+0x2e>
 800671c:	2000      	movs	r0, #0
 800671e:	bd70      	pop	{r4, r5, r6, pc}
 8006720:	6802      	ldr	r2, [r0, #0]
 8006722:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006726:	2300      	movs	r3, #0
 8006728:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800672c:	e7f7      	b.n	800671e <_Balloc+0x66>
 800672e:	bf00      	nop
 8006730:	08008eb1 	.word	0x08008eb1
 8006734:	08008f31 	.word	0x08008f31

08006738 <_Bfree>:
 8006738:	b570      	push	{r4, r5, r6, lr}
 800673a:	69c6      	ldr	r6, [r0, #28]
 800673c:	4605      	mov	r5, r0
 800673e:	460c      	mov	r4, r1
 8006740:	b976      	cbnz	r6, 8006760 <_Bfree+0x28>
 8006742:	2010      	movs	r0, #16
 8006744:	f7ff ff02 	bl	800654c <malloc>
 8006748:	4602      	mov	r2, r0
 800674a:	61e8      	str	r0, [r5, #28]
 800674c:	b920      	cbnz	r0, 8006758 <_Bfree+0x20>
 800674e:	4b09      	ldr	r3, [pc, #36]	@ (8006774 <_Bfree+0x3c>)
 8006750:	4809      	ldr	r0, [pc, #36]	@ (8006778 <_Bfree+0x40>)
 8006752:	218f      	movs	r1, #143	@ 0x8f
 8006754:	f000 fdc2 	bl	80072dc <__assert_func>
 8006758:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800675c:	6006      	str	r6, [r0, #0]
 800675e:	60c6      	str	r6, [r0, #12]
 8006760:	b13c      	cbz	r4, 8006772 <_Bfree+0x3a>
 8006762:	69eb      	ldr	r3, [r5, #28]
 8006764:	6862      	ldr	r2, [r4, #4]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800676c:	6021      	str	r1, [r4, #0]
 800676e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006772:	bd70      	pop	{r4, r5, r6, pc}
 8006774:	08008eb1 	.word	0x08008eb1
 8006778:	08008f31 	.word	0x08008f31

0800677c <__multadd>:
 800677c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006780:	690d      	ldr	r5, [r1, #16]
 8006782:	4607      	mov	r7, r0
 8006784:	460c      	mov	r4, r1
 8006786:	461e      	mov	r6, r3
 8006788:	f101 0c14 	add.w	ip, r1, #20
 800678c:	2000      	movs	r0, #0
 800678e:	f8dc 3000 	ldr.w	r3, [ip]
 8006792:	b299      	uxth	r1, r3
 8006794:	fb02 6101 	mla	r1, r2, r1, r6
 8006798:	0c1e      	lsrs	r6, r3, #16
 800679a:	0c0b      	lsrs	r3, r1, #16
 800679c:	fb02 3306 	mla	r3, r2, r6, r3
 80067a0:	b289      	uxth	r1, r1
 80067a2:	3001      	adds	r0, #1
 80067a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80067a8:	4285      	cmp	r5, r0
 80067aa:	f84c 1b04 	str.w	r1, [ip], #4
 80067ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80067b2:	dcec      	bgt.n	800678e <__multadd+0x12>
 80067b4:	b30e      	cbz	r6, 80067fa <__multadd+0x7e>
 80067b6:	68a3      	ldr	r3, [r4, #8]
 80067b8:	42ab      	cmp	r3, r5
 80067ba:	dc19      	bgt.n	80067f0 <__multadd+0x74>
 80067bc:	6861      	ldr	r1, [r4, #4]
 80067be:	4638      	mov	r0, r7
 80067c0:	3101      	adds	r1, #1
 80067c2:	f7ff ff79 	bl	80066b8 <_Balloc>
 80067c6:	4680      	mov	r8, r0
 80067c8:	b928      	cbnz	r0, 80067d6 <__multadd+0x5a>
 80067ca:	4602      	mov	r2, r0
 80067cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006800 <__multadd+0x84>)
 80067ce:	480d      	ldr	r0, [pc, #52]	@ (8006804 <__multadd+0x88>)
 80067d0:	21ba      	movs	r1, #186	@ 0xba
 80067d2:	f000 fd83 	bl	80072dc <__assert_func>
 80067d6:	6922      	ldr	r2, [r4, #16]
 80067d8:	3202      	adds	r2, #2
 80067da:	f104 010c 	add.w	r1, r4, #12
 80067de:	0092      	lsls	r2, r2, #2
 80067e0:	300c      	adds	r0, #12
 80067e2:	f000 fd6d 	bl	80072c0 <memcpy>
 80067e6:	4621      	mov	r1, r4
 80067e8:	4638      	mov	r0, r7
 80067ea:	f7ff ffa5 	bl	8006738 <_Bfree>
 80067ee:	4644      	mov	r4, r8
 80067f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80067f4:	3501      	adds	r5, #1
 80067f6:	615e      	str	r6, [r3, #20]
 80067f8:	6125      	str	r5, [r4, #16]
 80067fa:	4620      	mov	r0, r4
 80067fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006800:	08008f20 	.word	0x08008f20
 8006804:	08008f31 	.word	0x08008f31

08006808 <__hi0bits>:
 8006808:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800680c:	4603      	mov	r3, r0
 800680e:	bf36      	itet	cc
 8006810:	0403      	lslcc	r3, r0, #16
 8006812:	2000      	movcs	r0, #0
 8006814:	2010      	movcc	r0, #16
 8006816:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800681a:	bf3c      	itt	cc
 800681c:	021b      	lslcc	r3, r3, #8
 800681e:	3008      	addcc	r0, #8
 8006820:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006824:	bf3c      	itt	cc
 8006826:	011b      	lslcc	r3, r3, #4
 8006828:	3004      	addcc	r0, #4
 800682a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800682e:	bf3c      	itt	cc
 8006830:	009b      	lslcc	r3, r3, #2
 8006832:	3002      	addcc	r0, #2
 8006834:	2b00      	cmp	r3, #0
 8006836:	db05      	blt.n	8006844 <__hi0bits+0x3c>
 8006838:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800683c:	f100 0001 	add.w	r0, r0, #1
 8006840:	bf08      	it	eq
 8006842:	2020      	moveq	r0, #32
 8006844:	4770      	bx	lr

08006846 <__lo0bits>:
 8006846:	6803      	ldr	r3, [r0, #0]
 8006848:	4602      	mov	r2, r0
 800684a:	f013 0007 	ands.w	r0, r3, #7
 800684e:	d00b      	beq.n	8006868 <__lo0bits+0x22>
 8006850:	07d9      	lsls	r1, r3, #31
 8006852:	d421      	bmi.n	8006898 <__lo0bits+0x52>
 8006854:	0798      	lsls	r0, r3, #30
 8006856:	bf49      	itett	mi
 8006858:	085b      	lsrmi	r3, r3, #1
 800685a:	089b      	lsrpl	r3, r3, #2
 800685c:	2001      	movmi	r0, #1
 800685e:	6013      	strmi	r3, [r2, #0]
 8006860:	bf5c      	itt	pl
 8006862:	6013      	strpl	r3, [r2, #0]
 8006864:	2002      	movpl	r0, #2
 8006866:	4770      	bx	lr
 8006868:	b299      	uxth	r1, r3
 800686a:	b909      	cbnz	r1, 8006870 <__lo0bits+0x2a>
 800686c:	0c1b      	lsrs	r3, r3, #16
 800686e:	2010      	movs	r0, #16
 8006870:	b2d9      	uxtb	r1, r3
 8006872:	b909      	cbnz	r1, 8006878 <__lo0bits+0x32>
 8006874:	3008      	adds	r0, #8
 8006876:	0a1b      	lsrs	r3, r3, #8
 8006878:	0719      	lsls	r1, r3, #28
 800687a:	bf04      	itt	eq
 800687c:	091b      	lsreq	r3, r3, #4
 800687e:	3004      	addeq	r0, #4
 8006880:	0799      	lsls	r1, r3, #30
 8006882:	bf04      	itt	eq
 8006884:	089b      	lsreq	r3, r3, #2
 8006886:	3002      	addeq	r0, #2
 8006888:	07d9      	lsls	r1, r3, #31
 800688a:	d403      	bmi.n	8006894 <__lo0bits+0x4e>
 800688c:	085b      	lsrs	r3, r3, #1
 800688e:	f100 0001 	add.w	r0, r0, #1
 8006892:	d003      	beq.n	800689c <__lo0bits+0x56>
 8006894:	6013      	str	r3, [r2, #0]
 8006896:	4770      	bx	lr
 8006898:	2000      	movs	r0, #0
 800689a:	4770      	bx	lr
 800689c:	2020      	movs	r0, #32
 800689e:	4770      	bx	lr

080068a0 <__i2b>:
 80068a0:	b510      	push	{r4, lr}
 80068a2:	460c      	mov	r4, r1
 80068a4:	2101      	movs	r1, #1
 80068a6:	f7ff ff07 	bl	80066b8 <_Balloc>
 80068aa:	4602      	mov	r2, r0
 80068ac:	b928      	cbnz	r0, 80068ba <__i2b+0x1a>
 80068ae:	4b05      	ldr	r3, [pc, #20]	@ (80068c4 <__i2b+0x24>)
 80068b0:	4805      	ldr	r0, [pc, #20]	@ (80068c8 <__i2b+0x28>)
 80068b2:	f240 1145 	movw	r1, #325	@ 0x145
 80068b6:	f000 fd11 	bl	80072dc <__assert_func>
 80068ba:	2301      	movs	r3, #1
 80068bc:	6144      	str	r4, [r0, #20]
 80068be:	6103      	str	r3, [r0, #16]
 80068c0:	bd10      	pop	{r4, pc}
 80068c2:	bf00      	nop
 80068c4:	08008f20 	.word	0x08008f20
 80068c8:	08008f31 	.word	0x08008f31

080068cc <__multiply>:
 80068cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d0:	4614      	mov	r4, r2
 80068d2:	690a      	ldr	r2, [r1, #16]
 80068d4:	6923      	ldr	r3, [r4, #16]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	bfa8      	it	ge
 80068da:	4623      	movge	r3, r4
 80068dc:	460f      	mov	r7, r1
 80068de:	bfa4      	itt	ge
 80068e0:	460c      	movge	r4, r1
 80068e2:	461f      	movge	r7, r3
 80068e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80068e8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80068ec:	68a3      	ldr	r3, [r4, #8]
 80068ee:	6861      	ldr	r1, [r4, #4]
 80068f0:	eb0a 0609 	add.w	r6, sl, r9
 80068f4:	42b3      	cmp	r3, r6
 80068f6:	b085      	sub	sp, #20
 80068f8:	bfb8      	it	lt
 80068fa:	3101      	addlt	r1, #1
 80068fc:	f7ff fedc 	bl	80066b8 <_Balloc>
 8006900:	b930      	cbnz	r0, 8006910 <__multiply+0x44>
 8006902:	4602      	mov	r2, r0
 8006904:	4b44      	ldr	r3, [pc, #272]	@ (8006a18 <__multiply+0x14c>)
 8006906:	4845      	ldr	r0, [pc, #276]	@ (8006a1c <__multiply+0x150>)
 8006908:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800690c:	f000 fce6 	bl	80072dc <__assert_func>
 8006910:	f100 0514 	add.w	r5, r0, #20
 8006914:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006918:	462b      	mov	r3, r5
 800691a:	2200      	movs	r2, #0
 800691c:	4543      	cmp	r3, r8
 800691e:	d321      	bcc.n	8006964 <__multiply+0x98>
 8006920:	f107 0114 	add.w	r1, r7, #20
 8006924:	f104 0214 	add.w	r2, r4, #20
 8006928:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800692c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006930:	9302      	str	r3, [sp, #8]
 8006932:	1b13      	subs	r3, r2, r4
 8006934:	3b15      	subs	r3, #21
 8006936:	f023 0303 	bic.w	r3, r3, #3
 800693a:	3304      	adds	r3, #4
 800693c:	f104 0715 	add.w	r7, r4, #21
 8006940:	42ba      	cmp	r2, r7
 8006942:	bf38      	it	cc
 8006944:	2304      	movcc	r3, #4
 8006946:	9301      	str	r3, [sp, #4]
 8006948:	9b02      	ldr	r3, [sp, #8]
 800694a:	9103      	str	r1, [sp, #12]
 800694c:	428b      	cmp	r3, r1
 800694e:	d80c      	bhi.n	800696a <__multiply+0x9e>
 8006950:	2e00      	cmp	r6, #0
 8006952:	dd03      	ble.n	800695c <__multiply+0x90>
 8006954:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006958:	2b00      	cmp	r3, #0
 800695a:	d05b      	beq.n	8006a14 <__multiply+0x148>
 800695c:	6106      	str	r6, [r0, #16]
 800695e:	b005      	add	sp, #20
 8006960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006964:	f843 2b04 	str.w	r2, [r3], #4
 8006968:	e7d8      	b.n	800691c <__multiply+0x50>
 800696a:	f8b1 a000 	ldrh.w	sl, [r1]
 800696e:	f1ba 0f00 	cmp.w	sl, #0
 8006972:	d024      	beq.n	80069be <__multiply+0xf2>
 8006974:	f104 0e14 	add.w	lr, r4, #20
 8006978:	46a9      	mov	r9, r5
 800697a:	f04f 0c00 	mov.w	ip, #0
 800697e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006982:	f8d9 3000 	ldr.w	r3, [r9]
 8006986:	fa1f fb87 	uxth.w	fp, r7
 800698a:	b29b      	uxth	r3, r3
 800698c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006990:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006994:	f8d9 7000 	ldr.w	r7, [r9]
 8006998:	4463      	add	r3, ip
 800699a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800699e:	fb0a c70b 	mla	r7, sl, fp, ip
 80069a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80069ac:	4572      	cmp	r2, lr
 80069ae:	f849 3b04 	str.w	r3, [r9], #4
 80069b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80069b6:	d8e2      	bhi.n	800697e <__multiply+0xb2>
 80069b8:	9b01      	ldr	r3, [sp, #4]
 80069ba:	f845 c003 	str.w	ip, [r5, r3]
 80069be:	9b03      	ldr	r3, [sp, #12]
 80069c0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80069c4:	3104      	adds	r1, #4
 80069c6:	f1b9 0f00 	cmp.w	r9, #0
 80069ca:	d021      	beq.n	8006a10 <__multiply+0x144>
 80069cc:	682b      	ldr	r3, [r5, #0]
 80069ce:	f104 0c14 	add.w	ip, r4, #20
 80069d2:	46ae      	mov	lr, r5
 80069d4:	f04f 0a00 	mov.w	sl, #0
 80069d8:	f8bc b000 	ldrh.w	fp, [ip]
 80069dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80069e0:	fb09 770b 	mla	r7, r9, fp, r7
 80069e4:	4457      	add	r7, sl
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80069ec:	f84e 3b04 	str.w	r3, [lr], #4
 80069f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80069f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80069f8:	f8be 3000 	ldrh.w	r3, [lr]
 80069fc:	fb09 330a 	mla	r3, r9, sl, r3
 8006a00:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006a04:	4562      	cmp	r2, ip
 8006a06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a0a:	d8e5      	bhi.n	80069d8 <__multiply+0x10c>
 8006a0c:	9f01      	ldr	r7, [sp, #4]
 8006a0e:	51eb      	str	r3, [r5, r7]
 8006a10:	3504      	adds	r5, #4
 8006a12:	e799      	b.n	8006948 <__multiply+0x7c>
 8006a14:	3e01      	subs	r6, #1
 8006a16:	e79b      	b.n	8006950 <__multiply+0x84>
 8006a18:	08008f20 	.word	0x08008f20
 8006a1c:	08008f31 	.word	0x08008f31

08006a20 <__pow5mult>:
 8006a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a24:	4615      	mov	r5, r2
 8006a26:	f012 0203 	ands.w	r2, r2, #3
 8006a2a:	4607      	mov	r7, r0
 8006a2c:	460e      	mov	r6, r1
 8006a2e:	d007      	beq.n	8006a40 <__pow5mult+0x20>
 8006a30:	4c25      	ldr	r4, [pc, #148]	@ (8006ac8 <__pow5mult+0xa8>)
 8006a32:	3a01      	subs	r2, #1
 8006a34:	2300      	movs	r3, #0
 8006a36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a3a:	f7ff fe9f 	bl	800677c <__multadd>
 8006a3e:	4606      	mov	r6, r0
 8006a40:	10ad      	asrs	r5, r5, #2
 8006a42:	d03d      	beq.n	8006ac0 <__pow5mult+0xa0>
 8006a44:	69fc      	ldr	r4, [r7, #28]
 8006a46:	b97c      	cbnz	r4, 8006a68 <__pow5mult+0x48>
 8006a48:	2010      	movs	r0, #16
 8006a4a:	f7ff fd7f 	bl	800654c <malloc>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	61f8      	str	r0, [r7, #28]
 8006a52:	b928      	cbnz	r0, 8006a60 <__pow5mult+0x40>
 8006a54:	4b1d      	ldr	r3, [pc, #116]	@ (8006acc <__pow5mult+0xac>)
 8006a56:	481e      	ldr	r0, [pc, #120]	@ (8006ad0 <__pow5mult+0xb0>)
 8006a58:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006a5c:	f000 fc3e 	bl	80072dc <__assert_func>
 8006a60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a64:	6004      	str	r4, [r0, #0]
 8006a66:	60c4      	str	r4, [r0, #12]
 8006a68:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006a6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a70:	b94c      	cbnz	r4, 8006a86 <__pow5mult+0x66>
 8006a72:	f240 2171 	movw	r1, #625	@ 0x271
 8006a76:	4638      	mov	r0, r7
 8006a78:	f7ff ff12 	bl	80068a0 <__i2b>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a82:	4604      	mov	r4, r0
 8006a84:	6003      	str	r3, [r0, #0]
 8006a86:	f04f 0900 	mov.w	r9, #0
 8006a8a:	07eb      	lsls	r3, r5, #31
 8006a8c:	d50a      	bpl.n	8006aa4 <__pow5mult+0x84>
 8006a8e:	4631      	mov	r1, r6
 8006a90:	4622      	mov	r2, r4
 8006a92:	4638      	mov	r0, r7
 8006a94:	f7ff ff1a 	bl	80068cc <__multiply>
 8006a98:	4631      	mov	r1, r6
 8006a9a:	4680      	mov	r8, r0
 8006a9c:	4638      	mov	r0, r7
 8006a9e:	f7ff fe4b 	bl	8006738 <_Bfree>
 8006aa2:	4646      	mov	r6, r8
 8006aa4:	106d      	asrs	r5, r5, #1
 8006aa6:	d00b      	beq.n	8006ac0 <__pow5mult+0xa0>
 8006aa8:	6820      	ldr	r0, [r4, #0]
 8006aaa:	b938      	cbnz	r0, 8006abc <__pow5mult+0x9c>
 8006aac:	4622      	mov	r2, r4
 8006aae:	4621      	mov	r1, r4
 8006ab0:	4638      	mov	r0, r7
 8006ab2:	f7ff ff0b 	bl	80068cc <__multiply>
 8006ab6:	6020      	str	r0, [r4, #0]
 8006ab8:	f8c0 9000 	str.w	r9, [r0]
 8006abc:	4604      	mov	r4, r0
 8006abe:	e7e4      	b.n	8006a8a <__pow5mult+0x6a>
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ac6:	bf00      	nop
 8006ac8:	08008f8c 	.word	0x08008f8c
 8006acc:	08008eb1 	.word	0x08008eb1
 8006ad0:	08008f31 	.word	0x08008f31

08006ad4 <__lshift>:
 8006ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad8:	460c      	mov	r4, r1
 8006ada:	6849      	ldr	r1, [r1, #4]
 8006adc:	6923      	ldr	r3, [r4, #16]
 8006ade:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ae2:	68a3      	ldr	r3, [r4, #8]
 8006ae4:	4607      	mov	r7, r0
 8006ae6:	4691      	mov	r9, r2
 8006ae8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006aec:	f108 0601 	add.w	r6, r8, #1
 8006af0:	42b3      	cmp	r3, r6
 8006af2:	db0b      	blt.n	8006b0c <__lshift+0x38>
 8006af4:	4638      	mov	r0, r7
 8006af6:	f7ff fddf 	bl	80066b8 <_Balloc>
 8006afa:	4605      	mov	r5, r0
 8006afc:	b948      	cbnz	r0, 8006b12 <__lshift+0x3e>
 8006afe:	4602      	mov	r2, r0
 8006b00:	4b28      	ldr	r3, [pc, #160]	@ (8006ba4 <__lshift+0xd0>)
 8006b02:	4829      	ldr	r0, [pc, #164]	@ (8006ba8 <__lshift+0xd4>)
 8006b04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006b08:	f000 fbe8 	bl	80072dc <__assert_func>
 8006b0c:	3101      	adds	r1, #1
 8006b0e:	005b      	lsls	r3, r3, #1
 8006b10:	e7ee      	b.n	8006af0 <__lshift+0x1c>
 8006b12:	2300      	movs	r3, #0
 8006b14:	f100 0114 	add.w	r1, r0, #20
 8006b18:	f100 0210 	add.w	r2, r0, #16
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	4553      	cmp	r3, sl
 8006b20:	db33      	blt.n	8006b8a <__lshift+0xb6>
 8006b22:	6920      	ldr	r0, [r4, #16]
 8006b24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b28:	f104 0314 	add.w	r3, r4, #20
 8006b2c:	f019 091f 	ands.w	r9, r9, #31
 8006b30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006b34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006b38:	d02b      	beq.n	8006b92 <__lshift+0xbe>
 8006b3a:	f1c9 0e20 	rsb	lr, r9, #32
 8006b3e:	468a      	mov	sl, r1
 8006b40:	2200      	movs	r2, #0
 8006b42:	6818      	ldr	r0, [r3, #0]
 8006b44:	fa00 f009 	lsl.w	r0, r0, r9
 8006b48:	4310      	orrs	r0, r2
 8006b4a:	f84a 0b04 	str.w	r0, [sl], #4
 8006b4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b52:	459c      	cmp	ip, r3
 8006b54:	fa22 f20e 	lsr.w	r2, r2, lr
 8006b58:	d8f3      	bhi.n	8006b42 <__lshift+0x6e>
 8006b5a:	ebac 0304 	sub.w	r3, ip, r4
 8006b5e:	3b15      	subs	r3, #21
 8006b60:	f023 0303 	bic.w	r3, r3, #3
 8006b64:	3304      	adds	r3, #4
 8006b66:	f104 0015 	add.w	r0, r4, #21
 8006b6a:	4584      	cmp	ip, r0
 8006b6c:	bf38      	it	cc
 8006b6e:	2304      	movcc	r3, #4
 8006b70:	50ca      	str	r2, [r1, r3]
 8006b72:	b10a      	cbz	r2, 8006b78 <__lshift+0xa4>
 8006b74:	f108 0602 	add.w	r6, r8, #2
 8006b78:	3e01      	subs	r6, #1
 8006b7a:	4638      	mov	r0, r7
 8006b7c:	612e      	str	r6, [r5, #16]
 8006b7e:	4621      	mov	r1, r4
 8006b80:	f7ff fdda 	bl	8006738 <_Bfree>
 8006b84:	4628      	mov	r0, r5
 8006b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b8e:	3301      	adds	r3, #1
 8006b90:	e7c5      	b.n	8006b1e <__lshift+0x4a>
 8006b92:	3904      	subs	r1, #4
 8006b94:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b98:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b9c:	459c      	cmp	ip, r3
 8006b9e:	d8f9      	bhi.n	8006b94 <__lshift+0xc0>
 8006ba0:	e7ea      	b.n	8006b78 <__lshift+0xa4>
 8006ba2:	bf00      	nop
 8006ba4:	08008f20 	.word	0x08008f20
 8006ba8:	08008f31 	.word	0x08008f31

08006bac <__mcmp>:
 8006bac:	690a      	ldr	r2, [r1, #16]
 8006bae:	4603      	mov	r3, r0
 8006bb0:	6900      	ldr	r0, [r0, #16]
 8006bb2:	1a80      	subs	r0, r0, r2
 8006bb4:	b530      	push	{r4, r5, lr}
 8006bb6:	d10e      	bne.n	8006bd6 <__mcmp+0x2a>
 8006bb8:	3314      	adds	r3, #20
 8006bba:	3114      	adds	r1, #20
 8006bbc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006bc0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006bc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006bc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006bcc:	4295      	cmp	r5, r2
 8006bce:	d003      	beq.n	8006bd8 <__mcmp+0x2c>
 8006bd0:	d205      	bcs.n	8006bde <__mcmp+0x32>
 8006bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd6:	bd30      	pop	{r4, r5, pc}
 8006bd8:	42a3      	cmp	r3, r4
 8006bda:	d3f3      	bcc.n	8006bc4 <__mcmp+0x18>
 8006bdc:	e7fb      	b.n	8006bd6 <__mcmp+0x2a>
 8006bde:	2001      	movs	r0, #1
 8006be0:	e7f9      	b.n	8006bd6 <__mcmp+0x2a>
	...

08006be4 <__mdiff>:
 8006be4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be8:	4689      	mov	r9, r1
 8006bea:	4606      	mov	r6, r0
 8006bec:	4611      	mov	r1, r2
 8006bee:	4648      	mov	r0, r9
 8006bf0:	4614      	mov	r4, r2
 8006bf2:	f7ff ffdb 	bl	8006bac <__mcmp>
 8006bf6:	1e05      	subs	r5, r0, #0
 8006bf8:	d112      	bne.n	8006c20 <__mdiff+0x3c>
 8006bfa:	4629      	mov	r1, r5
 8006bfc:	4630      	mov	r0, r6
 8006bfe:	f7ff fd5b 	bl	80066b8 <_Balloc>
 8006c02:	4602      	mov	r2, r0
 8006c04:	b928      	cbnz	r0, 8006c12 <__mdiff+0x2e>
 8006c06:	4b3f      	ldr	r3, [pc, #252]	@ (8006d04 <__mdiff+0x120>)
 8006c08:	f240 2137 	movw	r1, #567	@ 0x237
 8006c0c:	483e      	ldr	r0, [pc, #248]	@ (8006d08 <__mdiff+0x124>)
 8006c0e:	f000 fb65 	bl	80072dc <__assert_func>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006c18:	4610      	mov	r0, r2
 8006c1a:	b003      	add	sp, #12
 8006c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c20:	bfbc      	itt	lt
 8006c22:	464b      	movlt	r3, r9
 8006c24:	46a1      	movlt	r9, r4
 8006c26:	4630      	mov	r0, r6
 8006c28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006c2c:	bfba      	itte	lt
 8006c2e:	461c      	movlt	r4, r3
 8006c30:	2501      	movlt	r5, #1
 8006c32:	2500      	movge	r5, #0
 8006c34:	f7ff fd40 	bl	80066b8 <_Balloc>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	b918      	cbnz	r0, 8006c44 <__mdiff+0x60>
 8006c3c:	4b31      	ldr	r3, [pc, #196]	@ (8006d04 <__mdiff+0x120>)
 8006c3e:	f240 2145 	movw	r1, #581	@ 0x245
 8006c42:	e7e3      	b.n	8006c0c <__mdiff+0x28>
 8006c44:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006c48:	6926      	ldr	r6, [r4, #16]
 8006c4a:	60c5      	str	r5, [r0, #12]
 8006c4c:	f109 0310 	add.w	r3, r9, #16
 8006c50:	f109 0514 	add.w	r5, r9, #20
 8006c54:	f104 0e14 	add.w	lr, r4, #20
 8006c58:	f100 0b14 	add.w	fp, r0, #20
 8006c5c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006c60:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006c64:	9301      	str	r3, [sp, #4]
 8006c66:	46d9      	mov	r9, fp
 8006c68:	f04f 0c00 	mov.w	ip, #0
 8006c6c:	9b01      	ldr	r3, [sp, #4]
 8006c6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006c72:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006c76:	9301      	str	r3, [sp, #4]
 8006c78:	fa1f f38a 	uxth.w	r3, sl
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	b283      	uxth	r3, r0
 8006c80:	1acb      	subs	r3, r1, r3
 8006c82:	0c00      	lsrs	r0, r0, #16
 8006c84:	4463      	add	r3, ip
 8006c86:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006c8a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006c94:	4576      	cmp	r6, lr
 8006c96:	f849 3b04 	str.w	r3, [r9], #4
 8006c9a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006c9e:	d8e5      	bhi.n	8006c6c <__mdiff+0x88>
 8006ca0:	1b33      	subs	r3, r6, r4
 8006ca2:	3b15      	subs	r3, #21
 8006ca4:	f023 0303 	bic.w	r3, r3, #3
 8006ca8:	3415      	adds	r4, #21
 8006caa:	3304      	adds	r3, #4
 8006cac:	42a6      	cmp	r6, r4
 8006cae:	bf38      	it	cc
 8006cb0:	2304      	movcc	r3, #4
 8006cb2:	441d      	add	r5, r3
 8006cb4:	445b      	add	r3, fp
 8006cb6:	461e      	mov	r6, r3
 8006cb8:	462c      	mov	r4, r5
 8006cba:	4544      	cmp	r4, r8
 8006cbc:	d30e      	bcc.n	8006cdc <__mdiff+0xf8>
 8006cbe:	f108 0103 	add.w	r1, r8, #3
 8006cc2:	1b49      	subs	r1, r1, r5
 8006cc4:	f021 0103 	bic.w	r1, r1, #3
 8006cc8:	3d03      	subs	r5, #3
 8006cca:	45a8      	cmp	r8, r5
 8006ccc:	bf38      	it	cc
 8006cce:	2100      	movcc	r1, #0
 8006cd0:	440b      	add	r3, r1
 8006cd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006cd6:	b191      	cbz	r1, 8006cfe <__mdiff+0x11a>
 8006cd8:	6117      	str	r7, [r2, #16]
 8006cda:	e79d      	b.n	8006c18 <__mdiff+0x34>
 8006cdc:	f854 1b04 	ldr.w	r1, [r4], #4
 8006ce0:	46e6      	mov	lr, ip
 8006ce2:	0c08      	lsrs	r0, r1, #16
 8006ce4:	fa1c fc81 	uxtah	ip, ip, r1
 8006ce8:	4471      	add	r1, lr
 8006cea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006cee:	b289      	uxth	r1, r1
 8006cf0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006cf4:	f846 1b04 	str.w	r1, [r6], #4
 8006cf8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006cfc:	e7dd      	b.n	8006cba <__mdiff+0xd6>
 8006cfe:	3f01      	subs	r7, #1
 8006d00:	e7e7      	b.n	8006cd2 <__mdiff+0xee>
 8006d02:	bf00      	nop
 8006d04:	08008f20 	.word	0x08008f20
 8006d08:	08008f31 	.word	0x08008f31

08006d0c <__d2b>:
 8006d0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006d10:	460f      	mov	r7, r1
 8006d12:	2101      	movs	r1, #1
 8006d14:	ec59 8b10 	vmov	r8, r9, d0
 8006d18:	4616      	mov	r6, r2
 8006d1a:	f7ff fccd 	bl	80066b8 <_Balloc>
 8006d1e:	4604      	mov	r4, r0
 8006d20:	b930      	cbnz	r0, 8006d30 <__d2b+0x24>
 8006d22:	4602      	mov	r2, r0
 8006d24:	4b23      	ldr	r3, [pc, #140]	@ (8006db4 <__d2b+0xa8>)
 8006d26:	4824      	ldr	r0, [pc, #144]	@ (8006db8 <__d2b+0xac>)
 8006d28:	f240 310f 	movw	r1, #783	@ 0x30f
 8006d2c:	f000 fad6 	bl	80072dc <__assert_func>
 8006d30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006d34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d38:	b10d      	cbz	r5, 8006d3e <__d2b+0x32>
 8006d3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d3e:	9301      	str	r3, [sp, #4]
 8006d40:	f1b8 0300 	subs.w	r3, r8, #0
 8006d44:	d023      	beq.n	8006d8e <__d2b+0x82>
 8006d46:	4668      	mov	r0, sp
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	f7ff fd7c 	bl	8006846 <__lo0bits>
 8006d4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006d52:	b1d0      	cbz	r0, 8006d8a <__d2b+0x7e>
 8006d54:	f1c0 0320 	rsb	r3, r0, #32
 8006d58:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5c:	430b      	orrs	r3, r1
 8006d5e:	40c2      	lsrs	r2, r0
 8006d60:	6163      	str	r3, [r4, #20]
 8006d62:	9201      	str	r2, [sp, #4]
 8006d64:	9b01      	ldr	r3, [sp, #4]
 8006d66:	61a3      	str	r3, [r4, #24]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	bf0c      	ite	eq
 8006d6c:	2201      	moveq	r2, #1
 8006d6e:	2202      	movne	r2, #2
 8006d70:	6122      	str	r2, [r4, #16]
 8006d72:	b1a5      	cbz	r5, 8006d9e <__d2b+0x92>
 8006d74:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006d78:	4405      	add	r5, r0
 8006d7a:	603d      	str	r5, [r7, #0]
 8006d7c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006d80:	6030      	str	r0, [r6, #0]
 8006d82:	4620      	mov	r0, r4
 8006d84:	b003      	add	sp, #12
 8006d86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d8a:	6161      	str	r1, [r4, #20]
 8006d8c:	e7ea      	b.n	8006d64 <__d2b+0x58>
 8006d8e:	a801      	add	r0, sp, #4
 8006d90:	f7ff fd59 	bl	8006846 <__lo0bits>
 8006d94:	9b01      	ldr	r3, [sp, #4]
 8006d96:	6163      	str	r3, [r4, #20]
 8006d98:	3020      	adds	r0, #32
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	e7e8      	b.n	8006d70 <__d2b+0x64>
 8006d9e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006da2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006da6:	6038      	str	r0, [r7, #0]
 8006da8:	6918      	ldr	r0, [r3, #16]
 8006daa:	f7ff fd2d 	bl	8006808 <__hi0bits>
 8006dae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006db2:	e7e5      	b.n	8006d80 <__d2b+0x74>
 8006db4:	08008f20 	.word	0x08008f20
 8006db8:	08008f31 	.word	0x08008f31

08006dbc <__sfputc_r>:
 8006dbc:	6893      	ldr	r3, [r2, #8]
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	b410      	push	{r4}
 8006dc4:	6093      	str	r3, [r2, #8]
 8006dc6:	da08      	bge.n	8006dda <__sfputc_r+0x1e>
 8006dc8:	6994      	ldr	r4, [r2, #24]
 8006dca:	42a3      	cmp	r3, r4
 8006dcc:	db01      	blt.n	8006dd2 <__sfputc_r+0x16>
 8006dce:	290a      	cmp	r1, #10
 8006dd0:	d103      	bne.n	8006dda <__sfputc_r+0x1e>
 8006dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dd6:	f7fe bc0c 	b.w	80055f2 <__swbuf_r>
 8006dda:	6813      	ldr	r3, [r2, #0]
 8006ddc:	1c58      	adds	r0, r3, #1
 8006dde:	6010      	str	r0, [r2, #0]
 8006de0:	7019      	strb	r1, [r3, #0]
 8006de2:	4608      	mov	r0, r1
 8006de4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006de8:	4770      	bx	lr

08006dea <__sfputs_r>:
 8006dea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dec:	4606      	mov	r6, r0
 8006dee:	460f      	mov	r7, r1
 8006df0:	4614      	mov	r4, r2
 8006df2:	18d5      	adds	r5, r2, r3
 8006df4:	42ac      	cmp	r4, r5
 8006df6:	d101      	bne.n	8006dfc <__sfputs_r+0x12>
 8006df8:	2000      	movs	r0, #0
 8006dfa:	e007      	b.n	8006e0c <__sfputs_r+0x22>
 8006dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e00:	463a      	mov	r2, r7
 8006e02:	4630      	mov	r0, r6
 8006e04:	f7ff ffda 	bl	8006dbc <__sfputc_r>
 8006e08:	1c43      	adds	r3, r0, #1
 8006e0a:	d1f3      	bne.n	8006df4 <__sfputs_r+0xa>
 8006e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e10 <_vfiprintf_r>:
 8006e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e14:	460d      	mov	r5, r1
 8006e16:	b09d      	sub	sp, #116	@ 0x74
 8006e18:	4614      	mov	r4, r2
 8006e1a:	4698      	mov	r8, r3
 8006e1c:	4606      	mov	r6, r0
 8006e1e:	b118      	cbz	r0, 8006e28 <_vfiprintf_r+0x18>
 8006e20:	6a03      	ldr	r3, [r0, #32]
 8006e22:	b90b      	cbnz	r3, 8006e28 <_vfiprintf_r+0x18>
 8006e24:	f7fe fafc 	bl	8005420 <__sinit>
 8006e28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e2a:	07d9      	lsls	r1, r3, #31
 8006e2c:	d405      	bmi.n	8006e3a <_vfiprintf_r+0x2a>
 8006e2e:	89ab      	ldrh	r3, [r5, #12]
 8006e30:	059a      	lsls	r2, r3, #22
 8006e32:	d402      	bmi.n	8006e3a <_vfiprintf_r+0x2a>
 8006e34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e36:	f7fe fcee 	bl	8005816 <__retarget_lock_acquire_recursive>
 8006e3a:	89ab      	ldrh	r3, [r5, #12]
 8006e3c:	071b      	lsls	r3, r3, #28
 8006e3e:	d501      	bpl.n	8006e44 <_vfiprintf_r+0x34>
 8006e40:	692b      	ldr	r3, [r5, #16]
 8006e42:	b99b      	cbnz	r3, 8006e6c <_vfiprintf_r+0x5c>
 8006e44:	4629      	mov	r1, r5
 8006e46:	4630      	mov	r0, r6
 8006e48:	f7fe fc12 	bl	8005670 <__swsetup_r>
 8006e4c:	b170      	cbz	r0, 8006e6c <_vfiprintf_r+0x5c>
 8006e4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e50:	07dc      	lsls	r4, r3, #31
 8006e52:	d504      	bpl.n	8006e5e <_vfiprintf_r+0x4e>
 8006e54:	f04f 30ff 	mov.w	r0, #4294967295
 8006e58:	b01d      	add	sp, #116	@ 0x74
 8006e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e5e:	89ab      	ldrh	r3, [r5, #12]
 8006e60:	0598      	lsls	r0, r3, #22
 8006e62:	d4f7      	bmi.n	8006e54 <_vfiprintf_r+0x44>
 8006e64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e66:	f7fe fcd7 	bl	8005818 <__retarget_lock_release_recursive>
 8006e6a:	e7f3      	b.n	8006e54 <_vfiprintf_r+0x44>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e70:	2320      	movs	r3, #32
 8006e72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e76:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e7a:	2330      	movs	r3, #48	@ 0x30
 8006e7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800702c <_vfiprintf_r+0x21c>
 8006e80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e84:	f04f 0901 	mov.w	r9, #1
 8006e88:	4623      	mov	r3, r4
 8006e8a:	469a      	mov	sl, r3
 8006e8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e90:	b10a      	cbz	r2, 8006e96 <_vfiprintf_r+0x86>
 8006e92:	2a25      	cmp	r2, #37	@ 0x25
 8006e94:	d1f9      	bne.n	8006e8a <_vfiprintf_r+0x7a>
 8006e96:	ebba 0b04 	subs.w	fp, sl, r4
 8006e9a:	d00b      	beq.n	8006eb4 <_vfiprintf_r+0xa4>
 8006e9c:	465b      	mov	r3, fp
 8006e9e:	4622      	mov	r2, r4
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	f7ff ffa1 	bl	8006dea <__sfputs_r>
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	f000 80a7 	beq.w	8006ffc <_vfiprintf_r+0x1ec>
 8006eae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006eb0:	445a      	add	r2, fp
 8006eb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 809f 	beq.w	8006ffc <_vfiprintf_r+0x1ec>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ec8:	f10a 0a01 	add.w	sl, sl, #1
 8006ecc:	9304      	str	r3, [sp, #16]
 8006ece:	9307      	str	r3, [sp, #28]
 8006ed0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ed4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ed6:	4654      	mov	r4, sl
 8006ed8:	2205      	movs	r2, #5
 8006eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ede:	4853      	ldr	r0, [pc, #332]	@ (800702c <_vfiprintf_r+0x21c>)
 8006ee0:	f7f9 f996 	bl	8000210 <memchr>
 8006ee4:	9a04      	ldr	r2, [sp, #16]
 8006ee6:	b9d8      	cbnz	r0, 8006f20 <_vfiprintf_r+0x110>
 8006ee8:	06d1      	lsls	r1, r2, #27
 8006eea:	bf44      	itt	mi
 8006eec:	2320      	movmi	r3, #32
 8006eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ef2:	0713      	lsls	r3, r2, #28
 8006ef4:	bf44      	itt	mi
 8006ef6:	232b      	movmi	r3, #43	@ 0x2b
 8006ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006efc:	f89a 3000 	ldrb.w	r3, [sl]
 8006f00:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f02:	d015      	beq.n	8006f30 <_vfiprintf_r+0x120>
 8006f04:	9a07      	ldr	r2, [sp, #28]
 8006f06:	4654      	mov	r4, sl
 8006f08:	2000      	movs	r0, #0
 8006f0a:	f04f 0c0a 	mov.w	ip, #10
 8006f0e:	4621      	mov	r1, r4
 8006f10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f14:	3b30      	subs	r3, #48	@ 0x30
 8006f16:	2b09      	cmp	r3, #9
 8006f18:	d94b      	bls.n	8006fb2 <_vfiprintf_r+0x1a2>
 8006f1a:	b1b0      	cbz	r0, 8006f4a <_vfiprintf_r+0x13a>
 8006f1c:	9207      	str	r2, [sp, #28]
 8006f1e:	e014      	b.n	8006f4a <_vfiprintf_r+0x13a>
 8006f20:	eba0 0308 	sub.w	r3, r0, r8
 8006f24:	fa09 f303 	lsl.w	r3, r9, r3
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	9304      	str	r3, [sp, #16]
 8006f2c:	46a2      	mov	sl, r4
 8006f2e:	e7d2      	b.n	8006ed6 <_vfiprintf_r+0xc6>
 8006f30:	9b03      	ldr	r3, [sp, #12]
 8006f32:	1d19      	adds	r1, r3, #4
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	9103      	str	r1, [sp, #12]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	bfbb      	ittet	lt
 8006f3c:	425b      	neglt	r3, r3
 8006f3e:	f042 0202 	orrlt.w	r2, r2, #2
 8006f42:	9307      	strge	r3, [sp, #28]
 8006f44:	9307      	strlt	r3, [sp, #28]
 8006f46:	bfb8      	it	lt
 8006f48:	9204      	strlt	r2, [sp, #16]
 8006f4a:	7823      	ldrb	r3, [r4, #0]
 8006f4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f4e:	d10a      	bne.n	8006f66 <_vfiprintf_r+0x156>
 8006f50:	7863      	ldrb	r3, [r4, #1]
 8006f52:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f54:	d132      	bne.n	8006fbc <_vfiprintf_r+0x1ac>
 8006f56:	9b03      	ldr	r3, [sp, #12]
 8006f58:	1d1a      	adds	r2, r3, #4
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	9203      	str	r2, [sp, #12]
 8006f5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f62:	3402      	adds	r4, #2
 8006f64:	9305      	str	r3, [sp, #20]
 8006f66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800703c <_vfiprintf_r+0x22c>
 8006f6a:	7821      	ldrb	r1, [r4, #0]
 8006f6c:	2203      	movs	r2, #3
 8006f6e:	4650      	mov	r0, sl
 8006f70:	f7f9 f94e 	bl	8000210 <memchr>
 8006f74:	b138      	cbz	r0, 8006f86 <_vfiprintf_r+0x176>
 8006f76:	9b04      	ldr	r3, [sp, #16]
 8006f78:	eba0 000a 	sub.w	r0, r0, sl
 8006f7c:	2240      	movs	r2, #64	@ 0x40
 8006f7e:	4082      	lsls	r2, r0
 8006f80:	4313      	orrs	r3, r2
 8006f82:	3401      	adds	r4, #1
 8006f84:	9304      	str	r3, [sp, #16]
 8006f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f8a:	4829      	ldr	r0, [pc, #164]	@ (8007030 <_vfiprintf_r+0x220>)
 8006f8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f90:	2206      	movs	r2, #6
 8006f92:	f7f9 f93d 	bl	8000210 <memchr>
 8006f96:	2800      	cmp	r0, #0
 8006f98:	d03f      	beq.n	800701a <_vfiprintf_r+0x20a>
 8006f9a:	4b26      	ldr	r3, [pc, #152]	@ (8007034 <_vfiprintf_r+0x224>)
 8006f9c:	bb1b      	cbnz	r3, 8006fe6 <_vfiprintf_r+0x1d6>
 8006f9e:	9b03      	ldr	r3, [sp, #12]
 8006fa0:	3307      	adds	r3, #7
 8006fa2:	f023 0307 	bic.w	r3, r3, #7
 8006fa6:	3308      	adds	r3, #8
 8006fa8:	9303      	str	r3, [sp, #12]
 8006faa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fac:	443b      	add	r3, r7
 8006fae:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fb0:	e76a      	b.n	8006e88 <_vfiprintf_r+0x78>
 8006fb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	2001      	movs	r0, #1
 8006fba:	e7a8      	b.n	8006f0e <_vfiprintf_r+0xfe>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	3401      	adds	r4, #1
 8006fc0:	9305      	str	r3, [sp, #20]
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	f04f 0c0a 	mov.w	ip, #10
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fce:	3a30      	subs	r2, #48	@ 0x30
 8006fd0:	2a09      	cmp	r2, #9
 8006fd2:	d903      	bls.n	8006fdc <_vfiprintf_r+0x1cc>
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d0c6      	beq.n	8006f66 <_vfiprintf_r+0x156>
 8006fd8:	9105      	str	r1, [sp, #20]
 8006fda:	e7c4      	b.n	8006f66 <_vfiprintf_r+0x156>
 8006fdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e7f0      	b.n	8006fc8 <_vfiprintf_r+0x1b8>
 8006fe6:	ab03      	add	r3, sp, #12
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	462a      	mov	r2, r5
 8006fec:	4b12      	ldr	r3, [pc, #72]	@ (8007038 <_vfiprintf_r+0x228>)
 8006fee:	a904      	add	r1, sp, #16
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	f7fd fdd1 	bl	8004b98 <_printf_float>
 8006ff6:	4607      	mov	r7, r0
 8006ff8:	1c78      	adds	r0, r7, #1
 8006ffa:	d1d6      	bne.n	8006faa <_vfiprintf_r+0x19a>
 8006ffc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ffe:	07d9      	lsls	r1, r3, #31
 8007000:	d405      	bmi.n	800700e <_vfiprintf_r+0x1fe>
 8007002:	89ab      	ldrh	r3, [r5, #12]
 8007004:	059a      	lsls	r2, r3, #22
 8007006:	d402      	bmi.n	800700e <_vfiprintf_r+0x1fe>
 8007008:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800700a:	f7fe fc05 	bl	8005818 <__retarget_lock_release_recursive>
 800700e:	89ab      	ldrh	r3, [r5, #12]
 8007010:	065b      	lsls	r3, r3, #25
 8007012:	f53f af1f 	bmi.w	8006e54 <_vfiprintf_r+0x44>
 8007016:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007018:	e71e      	b.n	8006e58 <_vfiprintf_r+0x48>
 800701a:	ab03      	add	r3, sp, #12
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	462a      	mov	r2, r5
 8007020:	4b05      	ldr	r3, [pc, #20]	@ (8007038 <_vfiprintf_r+0x228>)
 8007022:	a904      	add	r1, sp, #16
 8007024:	4630      	mov	r0, r6
 8007026:	f7fe f84f 	bl	80050c8 <_printf_i>
 800702a:	e7e4      	b.n	8006ff6 <_vfiprintf_r+0x1e6>
 800702c:	08009088 	.word	0x08009088
 8007030:	08009092 	.word	0x08009092
 8007034:	08004b99 	.word	0x08004b99
 8007038:	08006deb 	.word	0x08006deb
 800703c:	0800908e 	.word	0x0800908e

08007040 <__sflush_r>:
 8007040:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007048:	0716      	lsls	r6, r2, #28
 800704a:	4605      	mov	r5, r0
 800704c:	460c      	mov	r4, r1
 800704e:	d454      	bmi.n	80070fa <__sflush_r+0xba>
 8007050:	684b      	ldr	r3, [r1, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	dc02      	bgt.n	800705c <__sflush_r+0x1c>
 8007056:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007058:	2b00      	cmp	r3, #0
 800705a:	dd48      	ble.n	80070ee <__sflush_r+0xae>
 800705c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800705e:	2e00      	cmp	r6, #0
 8007060:	d045      	beq.n	80070ee <__sflush_r+0xae>
 8007062:	2300      	movs	r3, #0
 8007064:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007068:	682f      	ldr	r7, [r5, #0]
 800706a:	6a21      	ldr	r1, [r4, #32]
 800706c:	602b      	str	r3, [r5, #0]
 800706e:	d030      	beq.n	80070d2 <__sflush_r+0x92>
 8007070:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007072:	89a3      	ldrh	r3, [r4, #12]
 8007074:	0759      	lsls	r1, r3, #29
 8007076:	d505      	bpl.n	8007084 <__sflush_r+0x44>
 8007078:	6863      	ldr	r3, [r4, #4]
 800707a:	1ad2      	subs	r2, r2, r3
 800707c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800707e:	b10b      	cbz	r3, 8007084 <__sflush_r+0x44>
 8007080:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007082:	1ad2      	subs	r2, r2, r3
 8007084:	2300      	movs	r3, #0
 8007086:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007088:	6a21      	ldr	r1, [r4, #32]
 800708a:	4628      	mov	r0, r5
 800708c:	47b0      	blx	r6
 800708e:	1c43      	adds	r3, r0, #1
 8007090:	89a3      	ldrh	r3, [r4, #12]
 8007092:	d106      	bne.n	80070a2 <__sflush_r+0x62>
 8007094:	6829      	ldr	r1, [r5, #0]
 8007096:	291d      	cmp	r1, #29
 8007098:	d82b      	bhi.n	80070f2 <__sflush_r+0xb2>
 800709a:	4a2a      	ldr	r2, [pc, #168]	@ (8007144 <__sflush_r+0x104>)
 800709c:	410a      	asrs	r2, r1
 800709e:	07d6      	lsls	r6, r2, #31
 80070a0:	d427      	bmi.n	80070f2 <__sflush_r+0xb2>
 80070a2:	2200      	movs	r2, #0
 80070a4:	6062      	str	r2, [r4, #4]
 80070a6:	04d9      	lsls	r1, r3, #19
 80070a8:	6922      	ldr	r2, [r4, #16]
 80070aa:	6022      	str	r2, [r4, #0]
 80070ac:	d504      	bpl.n	80070b8 <__sflush_r+0x78>
 80070ae:	1c42      	adds	r2, r0, #1
 80070b0:	d101      	bne.n	80070b6 <__sflush_r+0x76>
 80070b2:	682b      	ldr	r3, [r5, #0]
 80070b4:	b903      	cbnz	r3, 80070b8 <__sflush_r+0x78>
 80070b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80070b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070ba:	602f      	str	r7, [r5, #0]
 80070bc:	b1b9      	cbz	r1, 80070ee <__sflush_r+0xae>
 80070be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80070c2:	4299      	cmp	r1, r3
 80070c4:	d002      	beq.n	80070cc <__sflush_r+0x8c>
 80070c6:	4628      	mov	r0, r5
 80070c8:	f7ff f9f6 	bl	80064b8 <_free_r>
 80070cc:	2300      	movs	r3, #0
 80070ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80070d0:	e00d      	b.n	80070ee <__sflush_r+0xae>
 80070d2:	2301      	movs	r3, #1
 80070d4:	4628      	mov	r0, r5
 80070d6:	47b0      	blx	r6
 80070d8:	4602      	mov	r2, r0
 80070da:	1c50      	adds	r0, r2, #1
 80070dc:	d1c9      	bne.n	8007072 <__sflush_r+0x32>
 80070de:	682b      	ldr	r3, [r5, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d0c6      	beq.n	8007072 <__sflush_r+0x32>
 80070e4:	2b1d      	cmp	r3, #29
 80070e6:	d001      	beq.n	80070ec <__sflush_r+0xac>
 80070e8:	2b16      	cmp	r3, #22
 80070ea:	d11e      	bne.n	800712a <__sflush_r+0xea>
 80070ec:	602f      	str	r7, [r5, #0]
 80070ee:	2000      	movs	r0, #0
 80070f0:	e022      	b.n	8007138 <__sflush_r+0xf8>
 80070f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070f6:	b21b      	sxth	r3, r3
 80070f8:	e01b      	b.n	8007132 <__sflush_r+0xf2>
 80070fa:	690f      	ldr	r7, [r1, #16]
 80070fc:	2f00      	cmp	r7, #0
 80070fe:	d0f6      	beq.n	80070ee <__sflush_r+0xae>
 8007100:	0793      	lsls	r3, r2, #30
 8007102:	680e      	ldr	r6, [r1, #0]
 8007104:	bf08      	it	eq
 8007106:	694b      	ldreq	r3, [r1, #20]
 8007108:	600f      	str	r7, [r1, #0]
 800710a:	bf18      	it	ne
 800710c:	2300      	movne	r3, #0
 800710e:	eba6 0807 	sub.w	r8, r6, r7
 8007112:	608b      	str	r3, [r1, #8]
 8007114:	f1b8 0f00 	cmp.w	r8, #0
 8007118:	dde9      	ble.n	80070ee <__sflush_r+0xae>
 800711a:	6a21      	ldr	r1, [r4, #32]
 800711c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800711e:	4643      	mov	r3, r8
 8007120:	463a      	mov	r2, r7
 8007122:	4628      	mov	r0, r5
 8007124:	47b0      	blx	r6
 8007126:	2800      	cmp	r0, #0
 8007128:	dc08      	bgt.n	800713c <__sflush_r+0xfc>
 800712a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800712e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007132:	81a3      	strh	r3, [r4, #12]
 8007134:	f04f 30ff 	mov.w	r0, #4294967295
 8007138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800713c:	4407      	add	r7, r0
 800713e:	eba8 0800 	sub.w	r8, r8, r0
 8007142:	e7e7      	b.n	8007114 <__sflush_r+0xd4>
 8007144:	dfbffffe 	.word	0xdfbffffe

08007148 <_fflush_r>:
 8007148:	b538      	push	{r3, r4, r5, lr}
 800714a:	690b      	ldr	r3, [r1, #16]
 800714c:	4605      	mov	r5, r0
 800714e:	460c      	mov	r4, r1
 8007150:	b913      	cbnz	r3, 8007158 <_fflush_r+0x10>
 8007152:	2500      	movs	r5, #0
 8007154:	4628      	mov	r0, r5
 8007156:	bd38      	pop	{r3, r4, r5, pc}
 8007158:	b118      	cbz	r0, 8007162 <_fflush_r+0x1a>
 800715a:	6a03      	ldr	r3, [r0, #32]
 800715c:	b90b      	cbnz	r3, 8007162 <_fflush_r+0x1a>
 800715e:	f7fe f95f 	bl	8005420 <__sinit>
 8007162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d0f3      	beq.n	8007152 <_fflush_r+0xa>
 800716a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800716c:	07d0      	lsls	r0, r2, #31
 800716e:	d404      	bmi.n	800717a <_fflush_r+0x32>
 8007170:	0599      	lsls	r1, r3, #22
 8007172:	d402      	bmi.n	800717a <_fflush_r+0x32>
 8007174:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007176:	f7fe fb4e 	bl	8005816 <__retarget_lock_acquire_recursive>
 800717a:	4628      	mov	r0, r5
 800717c:	4621      	mov	r1, r4
 800717e:	f7ff ff5f 	bl	8007040 <__sflush_r>
 8007182:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007184:	07da      	lsls	r2, r3, #31
 8007186:	4605      	mov	r5, r0
 8007188:	d4e4      	bmi.n	8007154 <_fflush_r+0xc>
 800718a:	89a3      	ldrh	r3, [r4, #12]
 800718c:	059b      	lsls	r3, r3, #22
 800718e:	d4e1      	bmi.n	8007154 <_fflush_r+0xc>
 8007190:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007192:	f7fe fb41 	bl	8005818 <__retarget_lock_release_recursive>
 8007196:	e7dd      	b.n	8007154 <_fflush_r+0xc>

08007198 <__swhatbuf_r>:
 8007198:	b570      	push	{r4, r5, r6, lr}
 800719a:	460c      	mov	r4, r1
 800719c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071a0:	2900      	cmp	r1, #0
 80071a2:	b096      	sub	sp, #88	@ 0x58
 80071a4:	4615      	mov	r5, r2
 80071a6:	461e      	mov	r6, r3
 80071a8:	da0d      	bge.n	80071c6 <__swhatbuf_r+0x2e>
 80071aa:	89a3      	ldrh	r3, [r4, #12]
 80071ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80071b0:	f04f 0100 	mov.w	r1, #0
 80071b4:	bf14      	ite	ne
 80071b6:	2340      	movne	r3, #64	@ 0x40
 80071b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80071bc:	2000      	movs	r0, #0
 80071be:	6031      	str	r1, [r6, #0]
 80071c0:	602b      	str	r3, [r5, #0]
 80071c2:	b016      	add	sp, #88	@ 0x58
 80071c4:	bd70      	pop	{r4, r5, r6, pc}
 80071c6:	466a      	mov	r2, sp
 80071c8:	f000 f848 	bl	800725c <_fstat_r>
 80071cc:	2800      	cmp	r0, #0
 80071ce:	dbec      	blt.n	80071aa <__swhatbuf_r+0x12>
 80071d0:	9901      	ldr	r1, [sp, #4]
 80071d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80071d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80071da:	4259      	negs	r1, r3
 80071dc:	4159      	adcs	r1, r3
 80071de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80071e2:	e7eb      	b.n	80071bc <__swhatbuf_r+0x24>

080071e4 <__smakebuf_r>:
 80071e4:	898b      	ldrh	r3, [r1, #12]
 80071e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071e8:	079d      	lsls	r5, r3, #30
 80071ea:	4606      	mov	r6, r0
 80071ec:	460c      	mov	r4, r1
 80071ee:	d507      	bpl.n	8007200 <__smakebuf_r+0x1c>
 80071f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80071f4:	6023      	str	r3, [r4, #0]
 80071f6:	6123      	str	r3, [r4, #16]
 80071f8:	2301      	movs	r3, #1
 80071fa:	6163      	str	r3, [r4, #20]
 80071fc:	b003      	add	sp, #12
 80071fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007200:	ab01      	add	r3, sp, #4
 8007202:	466a      	mov	r2, sp
 8007204:	f7ff ffc8 	bl	8007198 <__swhatbuf_r>
 8007208:	9f00      	ldr	r7, [sp, #0]
 800720a:	4605      	mov	r5, r0
 800720c:	4639      	mov	r1, r7
 800720e:	4630      	mov	r0, r6
 8007210:	f7ff f9c6 	bl	80065a0 <_malloc_r>
 8007214:	b948      	cbnz	r0, 800722a <__smakebuf_r+0x46>
 8007216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800721a:	059a      	lsls	r2, r3, #22
 800721c:	d4ee      	bmi.n	80071fc <__smakebuf_r+0x18>
 800721e:	f023 0303 	bic.w	r3, r3, #3
 8007222:	f043 0302 	orr.w	r3, r3, #2
 8007226:	81a3      	strh	r3, [r4, #12]
 8007228:	e7e2      	b.n	80071f0 <__smakebuf_r+0xc>
 800722a:	89a3      	ldrh	r3, [r4, #12]
 800722c:	6020      	str	r0, [r4, #0]
 800722e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007232:	81a3      	strh	r3, [r4, #12]
 8007234:	9b01      	ldr	r3, [sp, #4]
 8007236:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800723a:	b15b      	cbz	r3, 8007254 <__smakebuf_r+0x70>
 800723c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007240:	4630      	mov	r0, r6
 8007242:	f000 f81d 	bl	8007280 <_isatty_r>
 8007246:	b128      	cbz	r0, 8007254 <__smakebuf_r+0x70>
 8007248:	89a3      	ldrh	r3, [r4, #12]
 800724a:	f023 0303 	bic.w	r3, r3, #3
 800724e:	f043 0301 	orr.w	r3, r3, #1
 8007252:	81a3      	strh	r3, [r4, #12]
 8007254:	89a3      	ldrh	r3, [r4, #12]
 8007256:	431d      	orrs	r5, r3
 8007258:	81a5      	strh	r5, [r4, #12]
 800725a:	e7cf      	b.n	80071fc <__smakebuf_r+0x18>

0800725c <_fstat_r>:
 800725c:	b538      	push	{r3, r4, r5, lr}
 800725e:	4d07      	ldr	r5, [pc, #28]	@ (800727c <_fstat_r+0x20>)
 8007260:	2300      	movs	r3, #0
 8007262:	4604      	mov	r4, r0
 8007264:	4608      	mov	r0, r1
 8007266:	4611      	mov	r1, r2
 8007268:	602b      	str	r3, [r5, #0]
 800726a:	f7fb f800 	bl	800226e <_fstat>
 800726e:	1c43      	adds	r3, r0, #1
 8007270:	d102      	bne.n	8007278 <_fstat_r+0x1c>
 8007272:	682b      	ldr	r3, [r5, #0]
 8007274:	b103      	cbz	r3, 8007278 <_fstat_r+0x1c>
 8007276:	6023      	str	r3, [r4, #0]
 8007278:	bd38      	pop	{r3, r4, r5, pc}
 800727a:	bf00      	nop
 800727c:	2000043c 	.word	0x2000043c

08007280 <_isatty_r>:
 8007280:	b538      	push	{r3, r4, r5, lr}
 8007282:	4d06      	ldr	r5, [pc, #24]	@ (800729c <_isatty_r+0x1c>)
 8007284:	2300      	movs	r3, #0
 8007286:	4604      	mov	r4, r0
 8007288:	4608      	mov	r0, r1
 800728a:	602b      	str	r3, [r5, #0]
 800728c:	f7fa ffff 	bl	800228e <_isatty>
 8007290:	1c43      	adds	r3, r0, #1
 8007292:	d102      	bne.n	800729a <_isatty_r+0x1a>
 8007294:	682b      	ldr	r3, [r5, #0]
 8007296:	b103      	cbz	r3, 800729a <_isatty_r+0x1a>
 8007298:	6023      	str	r3, [r4, #0]
 800729a:	bd38      	pop	{r3, r4, r5, pc}
 800729c:	2000043c 	.word	0x2000043c

080072a0 <_sbrk_r>:
 80072a0:	b538      	push	{r3, r4, r5, lr}
 80072a2:	4d06      	ldr	r5, [pc, #24]	@ (80072bc <_sbrk_r+0x1c>)
 80072a4:	2300      	movs	r3, #0
 80072a6:	4604      	mov	r4, r0
 80072a8:	4608      	mov	r0, r1
 80072aa:	602b      	str	r3, [r5, #0]
 80072ac:	f7fb f808 	bl	80022c0 <_sbrk>
 80072b0:	1c43      	adds	r3, r0, #1
 80072b2:	d102      	bne.n	80072ba <_sbrk_r+0x1a>
 80072b4:	682b      	ldr	r3, [r5, #0]
 80072b6:	b103      	cbz	r3, 80072ba <_sbrk_r+0x1a>
 80072b8:	6023      	str	r3, [r4, #0]
 80072ba:	bd38      	pop	{r3, r4, r5, pc}
 80072bc:	2000043c 	.word	0x2000043c

080072c0 <memcpy>:
 80072c0:	440a      	add	r2, r1
 80072c2:	4291      	cmp	r1, r2
 80072c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80072c8:	d100      	bne.n	80072cc <memcpy+0xc>
 80072ca:	4770      	bx	lr
 80072cc:	b510      	push	{r4, lr}
 80072ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072d6:	4291      	cmp	r1, r2
 80072d8:	d1f9      	bne.n	80072ce <memcpy+0xe>
 80072da:	bd10      	pop	{r4, pc}

080072dc <__assert_func>:
 80072dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072de:	4614      	mov	r4, r2
 80072e0:	461a      	mov	r2, r3
 80072e2:	4b09      	ldr	r3, [pc, #36]	@ (8007308 <__assert_func+0x2c>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4605      	mov	r5, r0
 80072e8:	68d8      	ldr	r0, [r3, #12]
 80072ea:	b954      	cbnz	r4, 8007302 <__assert_func+0x26>
 80072ec:	4b07      	ldr	r3, [pc, #28]	@ (800730c <__assert_func+0x30>)
 80072ee:	461c      	mov	r4, r3
 80072f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80072f4:	9100      	str	r1, [sp, #0]
 80072f6:	462b      	mov	r3, r5
 80072f8:	4905      	ldr	r1, [pc, #20]	@ (8007310 <__assert_func+0x34>)
 80072fa:	f000 f841 	bl	8007380 <fiprintf>
 80072fe:	f000 f851 	bl	80073a4 <abort>
 8007302:	4b04      	ldr	r3, [pc, #16]	@ (8007314 <__assert_func+0x38>)
 8007304:	e7f4      	b.n	80072f0 <__assert_func+0x14>
 8007306:	bf00      	nop
 8007308:	2000001c 	.word	0x2000001c
 800730c:	080090de 	.word	0x080090de
 8007310:	080090b0 	.word	0x080090b0
 8007314:	080090a3 	.word	0x080090a3

08007318 <_calloc_r>:
 8007318:	b570      	push	{r4, r5, r6, lr}
 800731a:	fba1 5402 	umull	r5, r4, r1, r2
 800731e:	b93c      	cbnz	r4, 8007330 <_calloc_r+0x18>
 8007320:	4629      	mov	r1, r5
 8007322:	f7ff f93d 	bl	80065a0 <_malloc_r>
 8007326:	4606      	mov	r6, r0
 8007328:	b928      	cbnz	r0, 8007336 <_calloc_r+0x1e>
 800732a:	2600      	movs	r6, #0
 800732c:	4630      	mov	r0, r6
 800732e:	bd70      	pop	{r4, r5, r6, pc}
 8007330:	220c      	movs	r2, #12
 8007332:	6002      	str	r2, [r0, #0]
 8007334:	e7f9      	b.n	800732a <_calloc_r+0x12>
 8007336:	462a      	mov	r2, r5
 8007338:	4621      	mov	r1, r4
 800733a:	f7fe f9ef 	bl	800571c <memset>
 800733e:	e7f5      	b.n	800732c <_calloc_r+0x14>

08007340 <__ascii_mbtowc>:
 8007340:	b082      	sub	sp, #8
 8007342:	b901      	cbnz	r1, 8007346 <__ascii_mbtowc+0x6>
 8007344:	a901      	add	r1, sp, #4
 8007346:	b142      	cbz	r2, 800735a <__ascii_mbtowc+0x1a>
 8007348:	b14b      	cbz	r3, 800735e <__ascii_mbtowc+0x1e>
 800734a:	7813      	ldrb	r3, [r2, #0]
 800734c:	600b      	str	r3, [r1, #0]
 800734e:	7812      	ldrb	r2, [r2, #0]
 8007350:	1e10      	subs	r0, r2, #0
 8007352:	bf18      	it	ne
 8007354:	2001      	movne	r0, #1
 8007356:	b002      	add	sp, #8
 8007358:	4770      	bx	lr
 800735a:	4610      	mov	r0, r2
 800735c:	e7fb      	b.n	8007356 <__ascii_mbtowc+0x16>
 800735e:	f06f 0001 	mvn.w	r0, #1
 8007362:	e7f8      	b.n	8007356 <__ascii_mbtowc+0x16>

08007364 <__ascii_wctomb>:
 8007364:	4603      	mov	r3, r0
 8007366:	4608      	mov	r0, r1
 8007368:	b141      	cbz	r1, 800737c <__ascii_wctomb+0x18>
 800736a:	2aff      	cmp	r2, #255	@ 0xff
 800736c:	d904      	bls.n	8007378 <__ascii_wctomb+0x14>
 800736e:	228a      	movs	r2, #138	@ 0x8a
 8007370:	601a      	str	r2, [r3, #0]
 8007372:	f04f 30ff 	mov.w	r0, #4294967295
 8007376:	4770      	bx	lr
 8007378:	700a      	strb	r2, [r1, #0]
 800737a:	2001      	movs	r0, #1
 800737c:	4770      	bx	lr
	...

08007380 <fiprintf>:
 8007380:	b40e      	push	{r1, r2, r3}
 8007382:	b503      	push	{r0, r1, lr}
 8007384:	4601      	mov	r1, r0
 8007386:	ab03      	add	r3, sp, #12
 8007388:	4805      	ldr	r0, [pc, #20]	@ (80073a0 <fiprintf+0x20>)
 800738a:	f853 2b04 	ldr.w	r2, [r3], #4
 800738e:	6800      	ldr	r0, [r0, #0]
 8007390:	9301      	str	r3, [sp, #4]
 8007392:	f7ff fd3d 	bl	8006e10 <_vfiprintf_r>
 8007396:	b002      	add	sp, #8
 8007398:	f85d eb04 	ldr.w	lr, [sp], #4
 800739c:	b003      	add	sp, #12
 800739e:	4770      	bx	lr
 80073a0:	2000001c 	.word	0x2000001c

080073a4 <abort>:
 80073a4:	b508      	push	{r3, lr}
 80073a6:	2006      	movs	r0, #6
 80073a8:	f000 f82c 	bl	8007404 <raise>
 80073ac:	2001      	movs	r0, #1
 80073ae:	f7fa ff2a 	bl	8002206 <_exit>

080073b2 <_raise_r>:
 80073b2:	291f      	cmp	r1, #31
 80073b4:	b538      	push	{r3, r4, r5, lr}
 80073b6:	4605      	mov	r5, r0
 80073b8:	460c      	mov	r4, r1
 80073ba:	d904      	bls.n	80073c6 <_raise_r+0x14>
 80073bc:	2316      	movs	r3, #22
 80073be:	6003      	str	r3, [r0, #0]
 80073c0:	f04f 30ff 	mov.w	r0, #4294967295
 80073c4:	bd38      	pop	{r3, r4, r5, pc}
 80073c6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80073c8:	b112      	cbz	r2, 80073d0 <_raise_r+0x1e>
 80073ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80073ce:	b94b      	cbnz	r3, 80073e4 <_raise_r+0x32>
 80073d0:	4628      	mov	r0, r5
 80073d2:	f000 f831 	bl	8007438 <_getpid_r>
 80073d6:	4622      	mov	r2, r4
 80073d8:	4601      	mov	r1, r0
 80073da:	4628      	mov	r0, r5
 80073dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073e0:	f000 b818 	b.w	8007414 <_kill_r>
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d00a      	beq.n	80073fe <_raise_r+0x4c>
 80073e8:	1c59      	adds	r1, r3, #1
 80073ea:	d103      	bne.n	80073f4 <_raise_r+0x42>
 80073ec:	2316      	movs	r3, #22
 80073ee:	6003      	str	r3, [r0, #0]
 80073f0:	2001      	movs	r0, #1
 80073f2:	e7e7      	b.n	80073c4 <_raise_r+0x12>
 80073f4:	2100      	movs	r1, #0
 80073f6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80073fa:	4620      	mov	r0, r4
 80073fc:	4798      	blx	r3
 80073fe:	2000      	movs	r0, #0
 8007400:	e7e0      	b.n	80073c4 <_raise_r+0x12>
	...

08007404 <raise>:
 8007404:	4b02      	ldr	r3, [pc, #8]	@ (8007410 <raise+0xc>)
 8007406:	4601      	mov	r1, r0
 8007408:	6818      	ldr	r0, [r3, #0]
 800740a:	f7ff bfd2 	b.w	80073b2 <_raise_r>
 800740e:	bf00      	nop
 8007410:	2000001c 	.word	0x2000001c

08007414 <_kill_r>:
 8007414:	b538      	push	{r3, r4, r5, lr}
 8007416:	4d07      	ldr	r5, [pc, #28]	@ (8007434 <_kill_r+0x20>)
 8007418:	2300      	movs	r3, #0
 800741a:	4604      	mov	r4, r0
 800741c:	4608      	mov	r0, r1
 800741e:	4611      	mov	r1, r2
 8007420:	602b      	str	r3, [r5, #0]
 8007422:	f7fa fee0 	bl	80021e6 <_kill>
 8007426:	1c43      	adds	r3, r0, #1
 8007428:	d102      	bne.n	8007430 <_kill_r+0x1c>
 800742a:	682b      	ldr	r3, [r5, #0]
 800742c:	b103      	cbz	r3, 8007430 <_kill_r+0x1c>
 800742e:	6023      	str	r3, [r4, #0]
 8007430:	bd38      	pop	{r3, r4, r5, pc}
 8007432:	bf00      	nop
 8007434:	2000043c 	.word	0x2000043c

08007438 <_getpid_r>:
 8007438:	f7fa becd 	b.w	80021d6 <_getpid>

0800743c <atan2>:
 800743c:	f000 bb34 	b.w	8007aa8 <__ieee754_atan2>

08007440 <sqrt>:
 8007440:	b538      	push	{r3, r4, r5, lr}
 8007442:	ed2d 8b02 	vpush	{d8}
 8007446:	ec55 4b10 	vmov	r4, r5, d0
 800744a:	f000 f8cd 	bl	80075e8 <__ieee754_sqrt>
 800744e:	4622      	mov	r2, r4
 8007450:	462b      	mov	r3, r5
 8007452:	4620      	mov	r0, r4
 8007454:	4629      	mov	r1, r5
 8007456:	eeb0 8a40 	vmov.f32	s16, s0
 800745a:	eef0 8a60 	vmov.f32	s17, s1
 800745e:	f7f9 fb85 	bl	8000b6c <__aeabi_dcmpun>
 8007462:	b990      	cbnz	r0, 800748a <sqrt+0x4a>
 8007464:	2200      	movs	r2, #0
 8007466:	2300      	movs	r3, #0
 8007468:	4620      	mov	r0, r4
 800746a:	4629      	mov	r1, r5
 800746c:	f7f9 fb56 	bl	8000b1c <__aeabi_dcmplt>
 8007470:	b158      	cbz	r0, 800748a <sqrt+0x4a>
 8007472:	f7fe f9a5 	bl	80057c0 <__errno>
 8007476:	2321      	movs	r3, #33	@ 0x21
 8007478:	6003      	str	r3, [r0, #0]
 800747a:	2200      	movs	r2, #0
 800747c:	2300      	movs	r3, #0
 800747e:	4610      	mov	r0, r2
 8007480:	4619      	mov	r1, r3
 8007482:	f7f9 fa03 	bl	800088c <__aeabi_ddiv>
 8007486:	ec41 0b18 	vmov	d8, r0, r1
 800748a:	eeb0 0a48 	vmov.f32	s0, s16
 800748e:	eef0 0a68 	vmov.f32	s1, s17
 8007492:	ecbd 8b02 	vpop	{d8}
 8007496:	bd38      	pop	{r3, r4, r5, pc}

08007498 <cos>:
 8007498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800749a:	ec53 2b10 	vmov	r2, r3, d0
 800749e:	4826      	ldr	r0, [pc, #152]	@ (8007538 <cos+0xa0>)
 80074a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80074a4:	4281      	cmp	r1, r0
 80074a6:	d806      	bhi.n	80074b6 <cos+0x1e>
 80074a8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8007530 <cos+0x98>
 80074ac:	b005      	add	sp, #20
 80074ae:	f85d eb04 	ldr.w	lr, [sp], #4
 80074b2:	f000 b975 	b.w	80077a0 <__kernel_cos>
 80074b6:	4821      	ldr	r0, [pc, #132]	@ (800753c <cos+0xa4>)
 80074b8:	4281      	cmp	r1, r0
 80074ba:	d908      	bls.n	80074ce <cos+0x36>
 80074bc:	4610      	mov	r0, r2
 80074be:	4619      	mov	r1, r3
 80074c0:	f7f8 ff02 	bl	80002c8 <__aeabi_dsub>
 80074c4:	ec41 0b10 	vmov	d0, r0, r1
 80074c8:	b005      	add	sp, #20
 80074ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80074ce:	4668      	mov	r0, sp
 80074d0:	f000 fbb2 	bl	8007c38 <__ieee754_rem_pio2>
 80074d4:	f000 0003 	and.w	r0, r0, #3
 80074d8:	2801      	cmp	r0, #1
 80074da:	d00b      	beq.n	80074f4 <cos+0x5c>
 80074dc:	2802      	cmp	r0, #2
 80074de:	d015      	beq.n	800750c <cos+0x74>
 80074e0:	b9d8      	cbnz	r0, 800751a <cos+0x82>
 80074e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80074e6:	ed9d 0b00 	vldr	d0, [sp]
 80074ea:	f000 f959 	bl	80077a0 <__kernel_cos>
 80074ee:	ec51 0b10 	vmov	r0, r1, d0
 80074f2:	e7e7      	b.n	80074c4 <cos+0x2c>
 80074f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80074f8:	ed9d 0b00 	vldr	d0, [sp]
 80074fc:	f000 fa18 	bl	8007930 <__kernel_sin>
 8007500:	ec53 2b10 	vmov	r2, r3, d0
 8007504:	4610      	mov	r0, r2
 8007506:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800750a:	e7db      	b.n	80074c4 <cos+0x2c>
 800750c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007510:	ed9d 0b00 	vldr	d0, [sp]
 8007514:	f000 f944 	bl	80077a0 <__kernel_cos>
 8007518:	e7f2      	b.n	8007500 <cos+0x68>
 800751a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800751e:	ed9d 0b00 	vldr	d0, [sp]
 8007522:	2001      	movs	r0, #1
 8007524:	f000 fa04 	bl	8007930 <__kernel_sin>
 8007528:	e7e1      	b.n	80074ee <cos+0x56>
 800752a:	bf00      	nop
 800752c:	f3af 8000 	nop.w
	...
 8007538:	3fe921fb 	.word	0x3fe921fb
 800753c:	7fefffff 	.word	0x7fefffff

08007540 <sin>:
 8007540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007542:	ec53 2b10 	vmov	r2, r3, d0
 8007546:	4826      	ldr	r0, [pc, #152]	@ (80075e0 <sin+0xa0>)
 8007548:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800754c:	4281      	cmp	r1, r0
 800754e:	d807      	bhi.n	8007560 <sin+0x20>
 8007550:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80075d8 <sin+0x98>
 8007554:	2000      	movs	r0, #0
 8007556:	b005      	add	sp, #20
 8007558:	f85d eb04 	ldr.w	lr, [sp], #4
 800755c:	f000 b9e8 	b.w	8007930 <__kernel_sin>
 8007560:	4820      	ldr	r0, [pc, #128]	@ (80075e4 <sin+0xa4>)
 8007562:	4281      	cmp	r1, r0
 8007564:	d908      	bls.n	8007578 <sin+0x38>
 8007566:	4610      	mov	r0, r2
 8007568:	4619      	mov	r1, r3
 800756a:	f7f8 fead 	bl	80002c8 <__aeabi_dsub>
 800756e:	ec41 0b10 	vmov	d0, r0, r1
 8007572:	b005      	add	sp, #20
 8007574:	f85d fb04 	ldr.w	pc, [sp], #4
 8007578:	4668      	mov	r0, sp
 800757a:	f000 fb5d 	bl	8007c38 <__ieee754_rem_pio2>
 800757e:	f000 0003 	and.w	r0, r0, #3
 8007582:	2801      	cmp	r0, #1
 8007584:	d00c      	beq.n	80075a0 <sin+0x60>
 8007586:	2802      	cmp	r0, #2
 8007588:	d011      	beq.n	80075ae <sin+0x6e>
 800758a:	b9e8      	cbnz	r0, 80075c8 <sin+0x88>
 800758c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007590:	ed9d 0b00 	vldr	d0, [sp]
 8007594:	2001      	movs	r0, #1
 8007596:	f000 f9cb 	bl	8007930 <__kernel_sin>
 800759a:	ec51 0b10 	vmov	r0, r1, d0
 800759e:	e7e6      	b.n	800756e <sin+0x2e>
 80075a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80075a4:	ed9d 0b00 	vldr	d0, [sp]
 80075a8:	f000 f8fa 	bl	80077a0 <__kernel_cos>
 80075ac:	e7f5      	b.n	800759a <sin+0x5a>
 80075ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80075b2:	ed9d 0b00 	vldr	d0, [sp]
 80075b6:	2001      	movs	r0, #1
 80075b8:	f000 f9ba 	bl	8007930 <__kernel_sin>
 80075bc:	ec53 2b10 	vmov	r2, r3, d0
 80075c0:	4610      	mov	r0, r2
 80075c2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80075c6:	e7d2      	b.n	800756e <sin+0x2e>
 80075c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80075cc:	ed9d 0b00 	vldr	d0, [sp]
 80075d0:	f000 f8e6 	bl	80077a0 <__kernel_cos>
 80075d4:	e7f2      	b.n	80075bc <sin+0x7c>
 80075d6:	bf00      	nop
	...
 80075e0:	3fe921fb 	.word	0x3fe921fb
 80075e4:	7fefffff 	.word	0x7fefffff

080075e8 <__ieee754_sqrt>:
 80075e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ec:	4a68      	ldr	r2, [pc, #416]	@ (8007790 <__ieee754_sqrt+0x1a8>)
 80075ee:	ec55 4b10 	vmov	r4, r5, d0
 80075f2:	43aa      	bics	r2, r5
 80075f4:	462b      	mov	r3, r5
 80075f6:	4621      	mov	r1, r4
 80075f8:	d110      	bne.n	800761c <__ieee754_sqrt+0x34>
 80075fa:	4622      	mov	r2, r4
 80075fc:	4620      	mov	r0, r4
 80075fe:	4629      	mov	r1, r5
 8007600:	f7f9 f81a 	bl	8000638 <__aeabi_dmul>
 8007604:	4602      	mov	r2, r0
 8007606:	460b      	mov	r3, r1
 8007608:	4620      	mov	r0, r4
 800760a:	4629      	mov	r1, r5
 800760c:	f7f8 fe5e 	bl	80002cc <__adddf3>
 8007610:	4604      	mov	r4, r0
 8007612:	460d      	mov	r5, r1
 8007614:	ec45 4b10 	vmov	d0, r4, r5
 8007618:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800761c:	2d00      	cmp	r5, #0
 800761e:	dc0e      	bgt.n	800763e <__ieee754_sqrt+0x56>
 8007620:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8007624:	4322      	orrs	r2, r4
 8007626:	d0f5      	beq.n	8007614 <__ieee754_sqrt+0x2c>
 8007628:	b19d      	cbz	r5, 8007652 <__ieee754_sqrt+0x6a>
 800762a:	4622      	mov	r2, r4
 800762c:	4620      	mov	r0, r4
 800762e:	4629      	mov	r1, r5
 8007630:	f7f8 fe4a 	bl	80002c8 <__aeabi_dsub>
 8007634:	4602      	mov	r2, r0
 8007636:	460b      	mov	r3, r1
 8007638:	f7f9 f928 	bl	800088c <__aeabi_ddiv>
 800763c:	e7e8      	b.n	8007610 <__ieee754_sqrt+0x28>
 800763e:	152a      	asrs	r2, r5, #20
 8007640:	d115      	bne.n	800766e <__ieee754_sqrt+0x86>
 8007642:	2000      	movs	r0, #0
 8007644:	e009      	b.n	800765a <__ieee754_sqrt+0x72>
 8007646:	0acb      	lsrs	r3, r1, #11
 8007648:	3a15      	subs	r2, #21
 800764a:	0549      	lsls	r1, r1, #21
 800764c:	2b00      	cmp	r3, #0
 800764e:	d0fa      	beq.n	8007646 <__ieee754_sqrt+0x5e>
 8007650:	e7f7      	b.n	8007642 <__ieee754_sqrt+0x5a>
 8007652:	462a      	mov	r2, r5
 8007654:	e7fa      	b.n	800764c <__ieee754_sqrt+0x64>
 8007656:	005b      	lsls	r3, r3, #1
 8007658:	3001      	adds	r0, #1
 800765a:	02dc      	lsls	r4, r3, #11
 800765c:	d5fb      	bpl.n	8007656 <__ieee754_sqrt+0x6e>
 800765e:	1e44      	subs	r4, r0, #1
 8007660:	1b12      	subs	r2, r2, r4
 8007662:	f1c0 0420 	rsb	r4, r0, #32
 8007666:	fa21 f404 	lsr.w	r4, r1, r4
 800766a:	4323      	orrs	r3, r4
 800766c:	4081      	lsls	r1, r0
 800766e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007672:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8007676:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800767a:	07d2      	lsls	r2, r2, #31
 800767c:	bf5c      	itt	pl
 800767e:	005b      	lslpl	r3, r3, #1
 8007680:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8007684:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007688:	bf58      	it	pl
 800768a:	0049      	lslpl	r1, r1, #1
 800768c:	2600      	movs	r6, #0
 800768e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8007692:	106d      	asrs	r5, r5, #1
 8007694:	0049      	lsls	r1, r1, #1
 8007696:	2016      	movs	r0, #22
 8007698:	4632      	mov	r2, r6
 800769a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800769e:	1917      	adds	r7, r2, r4
 80076a0:	429f      	cmp	r7, r3
 80076a2:	bfde      	ittt	le
 80076a4:	193a      	addle	r2, r7, r4
 80076a6:	1bdb      	suble	r3, r3, r7
 80076a8:	1936      	addle	r6, r6, r4
 80076aa:	0fcf      	lsrs	r7, r1, #31
 80076ac:	3801      	subs	r0, #1
 80076ae:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80076b2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80076b6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80076ba:	d1f0      	bne.n	800769e <__ieee754_sqrt+0xb6>
 80076bc:	4604      	mov	r4, r0
 80076be:	2720      	movs	r7, #32
 80076c0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80076c4:	429a      	cmp	r2, r3
 80076c6:	eb00 0e0c 	add.w	lr, r0, ip
 80076ca:	db02      	blt.n	80076d2 <__ieee754_sqrt+0xea>
 80076cc:	d113      	bne.n	80076f6 <__ieee754_sqrt+0x10e>
 80076ce:	458e      	cmp	lr, r1
 80076d0:	d811      	bhi.n	80076f6 <__ieee754_sqrt+0x10e>
 80076d2:	f1be 0f00 	cmp.w	lr, #0
 80076d6:	eb0e 000c 	add.w	r0, lr, ip
 80076da:	da42      	bge.n	8007762 <__ieee754_sqrt+0x17a>
 80076dc:	2800      	cmp	r0, #0
 80076de:	db40      	blt.n	8007762 <__ieee754_sqrt+0x17a>
 80076e0:	f102 0801 	add.w	r8, r2, #1
 80076e4:	1a9b      	subs	r3, r3, r2
 80076e6:	458e      	cmp	lr, r1
 80076e8:	bf88      	it	hi
 80076ea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80076ee:	eba1 010e 	sub.w	r1, r1, lr
 80076f2:	4464      	add	r4, ip
 80076f4:	4642      	mov	r2, r8
 80076f6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80076fa:	3f01      	subs	r7, #1
 80076fc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007700:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007704:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007708:	d1dc      	bne.n	80076c4 <__ieee754_sqrt+0xdc>
 800770a:	4319      	orrs	r1, r3
 800770c:	d01b      	beq.n	8007746 <__ieee754_sqrt+0x15e>
 800770e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8007794 <__ieee754_sqrt+0x1ac>
 8007712:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8007798 <__ieee754_sqrt+0x1b0>
 8007716:	e9da 0100 	ldrd	r0, r1, [sl]
 800771a:	e9db 2300 	ldrd	r2, r3, [fp]
 800771e:	f7f8 fdd3 	bl	80002c8 <__aeabi_dsub>
 8007722:	e9da 8900 	ldrd	r8, r9, [sl]
 8007726:	4602      	mov	r2, r0
 8007728:	460b      	mov	r3, r1
 800772a:	4640      	mov	r0, r8
 800772c:	4649      	mov	r1, r9
 800772e:	f7f9 f9ff 	bl	8000b30 <__aeabi_dcmple>
 8007732:	b140      	cbz	r0, 8007746 <__ieee754_sqrt+0x15e>
 8007734:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007738:	e9da 0100 	ldrd	r0, r1, [sl]
 800773c:	e9db 2300 	ldrd	r2, r3, [fp]
 8007740:	d111      	bne.n	8007766 <__ieee754_sqrt+0x17e>
 8007742:	3601      	adds	r6, #1
 8007744:	463c      	mov	r4, r7
 8007746:	1072      	asrs	r2, r6, #1
 8007748:	0863      	lsrs	r3, r4, #1
 800774a:	07f1      	lsls	r1, r6, #31
 800774c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8007750:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8007754:	bf48      	it	mi
 8007756:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800775a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800775e:	4618      	mov	r0, r3
 8007760:	e756      	b.n	8007610 <__ieee754_sqrt+0x28>
 8007762:	4690      	mov	r8, r2
 8007764:	e7be      	b.n	80076e4 <__ieee754_sqrt+0xfc>
 8007766:	f7f8 fdb1 	bl	80002cc <__adddf3>
 800776a:	e9da 8900 	ldrd	r8, r9, [sl]
 800776e:	4602      	mov	r2, r0
 8007770:	460b      	mov	r3, r1
 8007772:	4640      	mov	r0, r8
 8007774:	4649      	mov	r1, r9
 8007776:	f7f9 f9d1 	bl	8000b1c <__aeabi_dcmplt>
 800777a:	b120      	cbz	r0, 8007786 <__ieee754_sqrt+0x19e>
 800777c:	1ca0      	adds	r0, r4, #2
 800777e:	bf08      	it	eq
 8007780:	3601      	addeq	r6, #1
 8007782:	3402      	adds	r4, #2
 8007784:	e7df      	b.n	8007746 <__ieee754_sqrt+0x15e>
 8007786:	1c63      	adds	r3, r4, #1
 8007788:	f023 0401 	bic.w	r4, r3, #1
 800778c:	e7db      	b.n	8007746 <__ieee754_sqrt+0x15e>
 800778e:	bf00      	nop
 8007790:	7ff00000 	.word	0x7ff00000
 8007794:	200001e0 	.word	0x200001e0
 8007798:	200001d8 	.word	0x200001d8
 800779c:	00000000 	.word	0x00000000

080077a0 <__kernel_cos>:
 80077a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a4:	ec57 6b10 	vmov	r6, r7, d0
 80077a8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80077ac:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80077b0:	ed8d 1b00 	vstr	d1, [sp]
 80077b4:	d206      	bcs.n	80077c4 <__kernel_cos+0x24>
 80077b6:	4630      	mov	r0, r6
 80077b8:	4639      	mov	r1, r7
 80077ba:	f7f9 f9ed 	bl	8000b98 <__aeabi_d2iz>
 80077be:	2800      	cmp	r0, #0
 80077c0:	f000 8088 	beq.w	80078d4 <__kernel_cos+0x134>
 80077c4:	4632      	mov	r2, r6
 80077c6:	463b      	mov	r3, r7
 80077c8:	4630      	mov	r0, r6
 80077ca:	4639      	mov	r1, r7
 80077cc:	f7f8 ff34 	bl	8000638 <__aeabi_dmul>
 80077d0:	4b51      	ldr	r3, [pc, #324]	@ (8007918 <__kernel_cos+0x178>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	4604      	mov	r4, r0
 80077d6:	460d      	mov	r5, r1
 80077d8:	f7f8 ff2e 	bl	8000638 <__aeabi_dmul>
 80077dc:	a340      	add	r3, pc, #256	@ (adr r3, 80078e0 <__kernel_cos+0x140>)
 80077de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e2:	4682      	mov	sl, r0
 80077e4:	468b      	mov	fp, r1
 80077e6:	4620      	mov	r0, r4
 80077e8:	4629      	mov	r1, r5
 80077ea:	f7f8 ff25 	bl	8000638 <__aeabi_dmul>
 80077ee:	a33e      	add	r3, pc, #248	@ (adr r3, 80078e8 <__kernel_cos+0x148>)
 80077f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f4:	f7f8 fd6a 	bl	80002cc <__adddf3>
 80077f8:	4622      	mov	r2, r4
 80077fa:	462b      	mov	r3, r5
 80077fc:	f7f8 ff1c 	bl	8000638 <__aeabi_dmul>
 8007800:	a33b      	add	r3, pc, #236	@ (adr r3, 80078f0 <__kernel_cos+0x150>)
 8007802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007806:	f7f8 fd5f 	bl	80002c8 <__aeabi_dsub>
 800780a:	4622      	mov	r2, r4
 800780c:	462b      	mov	r3, r5
 800780e:	f7f8 ff13 	bl	8000638 <__aeabi_dmul>
 8007812:	a339      	add	r3, pc, #228	@ (adr r3, 80078f8 <__kernel_cos+0x158>)
 8007814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007818:	f7f8 fd58 	bl	80002cc <__adddf3>
 800781c:	4622      	mov	r2, r4
 800781e:	462b      	mov	r3, r5
 8007820:	f7f8 ff0a 	bl	8000638 <__aeabi_dmul>
 8007824:	a336      	add	r3, pc, #216	@ (adr r3, 8007900 <__kernel_cos+0x160>)
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782a:	f7f8 fd4d 	bl	80002c8 <__aeabi_dsub>
 800782e:	4622      	mov	r2, r4
 8007830:	462b      	mov	r3, r5
 8007832:	f7f8 ff01 	bl	8000638 <__aeabi_dmul>
 8007836:	a334      	add	r3, pc, #208	@ (adr r3, 8007908 <__kernel_cos+0x168>)
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	f7f8 fd46 	bl	80002cc <__adddf3>
 8007840:	4622      	mov	r2, r4
 8007842:	462b      	mov	r3, r5
 8007844:	f7f8 fef8 	bl	8000638 <__aeabi_dmul>
 8007848:	4622      	mov	r2, r4
 800784a:	462b      	mov	r3, r5
 800784c:	f7f8 fef4 	bl	8000638 <__aeabi_dmul>
 8007850:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007854:	4604      	mov	r4, r0
 8007856:	460d      	mov	r5, r1
 8007858:	4630      	mov	r0, r6
 800785a:	4639      	mov	r1, r7
 800785c:	f7f8 feec 	bl	8000638 <__aeabi_dmul>
 8007860:	460b      	mov	r3, r1
 8007862:	4602      	mov	r2, r0
 8007864:	4629      	mov	r1, r5
 8007866:	4620      	mov	r0, r4
 8007868:	f7f8 fd2e 	bl	80002c8 <__aeabi_dsub>
 800786c:	4b2b      	ldr	r3, [pc, #172]	@ (800791c <__kernel_cos+0x17c>)
 800786e:	4598      	cmp	r8, r3
 8007870:	4606      	mov	r6, r0
 8007872:	460f      	mov	r7, r1
 8007874:	d810      	bhi.n	8007898 <__kernel_cos+0xf8>
 8007876:	4602      	mov	r2, r0
 8007878:	460b      	mov	r3, r1
 800787a:	4650      	mov	r0, sl
 800787c:	4659      	mov	r1, fp
 800787e:	f7f8 fd23 	bl	80002c8 <__aeabi_dsub>
 8007882:	460b      	mov	r3, r1
 8007884:	4926      	ldr	r1, [pc, #152]	@ (8007920 <__kernel_cos+0x180>)
 8007886:	4602      	mov	r2, r0
 8007888:	2000      	movs	r0, #0
 800788a:	f7f8 fd1d 	bl	80002c8 <__aeabi_dsub>
 800788e:	ec41 0b10 	vmov	d0, r0, r1
 8007892:	b003      	add	sp, #12
 8007894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007898:	4b22      	ldr	r3, [pc, #136]	@ (8007924 <__kernel_cos+0x184>)
 800789a:	4921      	ldr	r1, [pc, #132]	@ (8007920 <__kernel_cos+0x180>)
 800789c:	4598      	cmp	r8, r3
 800789e:	bf8c      	ite	hi
 80078a0:	4d21      	ldrhi	r5, [pc, #132]	@ (8007928 <__kernel_cos+0x188>)
 80078a2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80078a6:	2400      	movs	r4, #0
 80078a8:	4622      	mov	r2, r4
 80078aa:	462b      	mov	r3, r5
 80078ac:	2000      	movs	r0, #0
 80078ae:	f7f8 fd0b 	bl	80002c8 <__aeabi_dsub>
 80078b2:	4622      	mov	r2, r4
 80078b4:	4680      	mov	r8, r0
 80078b6:	4689      	mov	r9, r1
 80078b8:	462b      	mov	r3, r5
 80078ba:	4650      	mov	r0, sl
 80078bc:	4659      	mov	r1, fp
 80078be:	f7f8 fd03 	bl	80002c8 <__aeabi_dsub>
 80078c2:	4632      	mov	r2, r6
 80078c4:	463b      	mov	r3, r7
 80078c6:	f7f8 fcff 	bl	80002c8 <__aeabi_dsub>
 80078ca:	4602      	mov	r2, r0
 80078cc:	460b      	mov	r3, r1
 80078ce:	4640      	mov	r0, r8
 80078d0:	4649      	mov	r1, r9
 80078d2:	e7da      	b.n	800788a <__kernel_cos+0xea>
 80078d4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8007910 <__kernel_cos+0x170>
 80078d8:	e7db      	b.n	8007892 <__kernel_cos+0xf2>
 80078da:	bf00      	nop
 80078dc:	f3af 8000 	nop.w
 80078e0:	be8838d4 	.word	0xbe8838d4
 80078e4:	bda8fae9 	.word	0xbda8fae9
 80078e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80078ec:	3e21ee9e 	.word	0x3e21ee9e
 80078f0:	809c52ad 	.word	0x809c52ad
 80078f4:	3e927e4f 	.word	0x3e927e4f
 80078f8:	19cb1590 	.word	0x19cb1590
 80078fc:	3efa01a0 	.word	0x3efa01a0
 8007900:	16c15177 	.word	0x16c15177
 8007904:	3f56c16c 	.word	0x3f56c16c
 8007908:	5555554c 	.word	0x5555554c
 800790c:	3fa55555 	.word	0x3fa55555
 8007910:	00000000 	.word	0x00000000
 8007914:	3ff00000 	.word	0x3ff00000
 8007918:	3fe00000 	.word	0x3fe00000
 800791c:	3fd33332 	.word	0x3fd33332
 8007920:	3ff00000 	.word	0x3ff00000
 8007924:	3fe90000 	.word	0x3fe90000
 8007928:	3fd20000 	.word	0x3fd20000
 800792c:	00000000 	.word	0x00000000

08007930 <__kernel_sin>:
 8007930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007934:	ec55 4b10 	vmov	r4, r5, d0
 8007938:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800793c:	b085      	sub	sp, #20
 800793e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8007942:	ed8d 1b02 	vstr	d1, [sp, #8]
 8007946:	4680      	mov	r8, r0
 8007948:	d205      	bcs.n	8007956 <__kernel_sin+0x26>
 800794a:	4620      	mov	r0, r4
 800794c:	4629      	mov	r1, r5
 800794e:	f7f9 f923 	bl	8000b98 <__aeabi_d2iz>
 8007952:	2800      	cmp	r0, #0
 8007954:	d052      	beq.n	80079fc <__kernel_sin+0xcc>
 8007956:	4622      	mov	r2, r4
 8007958:	462b      	mov	r3, r5
 800795a:	4620      	mov	r0, r4
 800795c:	4629      	mov	r1, r5
 800795e:	f7f8 fe6b 	bl	8000638 <__aeabi_dmul>
 8007962:	4682      	mov	sl, r0
 8007964:	468b      	mov	fp, r1
 8007966:	4602      	mov	r2, r0
 8007968:	460b      	mov	r3, r1
 800796a:	4620      	mov	r0, r4
 800796c:	4629      	mov	r1, r5
 800796e:	f7f8 fe63 	bl	8000638 <__aeabi_dmul>
 8007972:	a342      	add	r3, pc, #264	@ (adr r3, 8007a7c <__kernel_sin+0x14c>)
 8007974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007978:	e9cd 0100 	strd	r0, r1, [sp]
 800797c:	4650      	mov	r0, sl
 800797e:	4659      	mov	r1, fp
 8007980:	f7f8 fe5a 	bl	8000638 <__aeabi_dmul>
 8007984:	a33f      	add	r3, pc, #252	@ (adr r3, 8007a84 <__kernel_sin+0x154>)
 8007986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798a:	f7f8 fc9d 	bl	80002c8 <__aeabi_dsub>
 800798e:	4652      	mov	r2, sl
 8007990:	465b      	mov	r3, fp
 8007992:	f7f8 fe51 	bl	8000638 <__aeabi_dmul>
 8007996:	a33d      	add	r3, pc, #244	@ (adr r3, 8007a8c <__kernel_sin+0x15c>)
 8007998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799c:	f7f8 fc96 	bl	80002cc <__adddf3>
 80079a0:	4652      	mov	r2, sl
 80079a2:	465b      	mov	r3, fp
 80079a4:	f7f8 fe48 	bl	8000638 <__aeabi_dmul>
 80079a8:	a33a      	add	r3, pc, #232	@ (adr r3, 8007a94 <__kernel_sin+0x164>)
 80079aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ae:	f7f8 fc8b 	bl	80002c8 <__aeabi_dsub>
 80079b2:	4652      	mov	r2, sl
 80079b4:	465b      	mov	r3, fp
 80079b6:	f7f8 fe3f 	bl	8000638 <__aeabi_dmul>
 80079ba:	a338      	add	r3, pc, #224	@ (adr r3, 8007a9c <__kernel_sin+0x16c>)
 80079bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c0:	f7f8 fc84 	bl	80002cc <__adddf3>
 80079c4:	4606      	mov	r6, r0
 80079c6:	460f      	mov	r7, r1
 80079c8:	f1b8 0f00 	cmp.w	r8, #0
 80079cc:	d11b      	bne.n	8007a06 <__kernel_sin+0xd6>
 80079ce:	4602      	mov	r2, r0
 80079d0:	460b      	mov	r3, r1
 80079d2:	4650      	mov	r0, sl
 80079d4:	4659      	mov	r1, fp
 80079d6:	f7f8 fe2f 	bl	8000638 <__aeabi_dmul>
 80079da:	a325      	add	r3, pc, #148	@ (adr r3, 8007a70 <__kernel_sin+0x140>)
 80079dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e0:	f7f8 fc72 	bl	80002c8 <__aeabi_dsub>
 80079e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079e8:	f7f8 fe26 	bl	8000638 <__aeabi_dmul>
 80079ec:	4602      	mov	r2, r0
 80079ee:	460b      	mov	r3, r1
 80079f0:	4620      	mov	r0, r4
 80079f2:	4629      	mov	r1, r5
 80079f4:	f7f8 fc6a 	bl	80002cc <__adddf3>
 80079f8:	4604      	mov	r4, r0
 80079fa:	460d      	mov	r5, r1
 80079fc:	ec45 4b10 	vmov	d0, r4, r5
 8007a00:	b005      	add	sp, #20
 8007a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8007a78 <__kernel_sin+0x148>)
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f7f8 fe13 	bl	8000638 <__aeabi_dmul>
 8007a12:	4632      	mov	r2, r6
 8007a14:	4680      	mov	r8, r0
 8007a16:	4689      	mov	r9, r1
 8007a18:	463b      	mov	r3, r7
 8007a1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a1e:	f7f8 fe0b 	bl	8000638 <__aeabi_dmul>
 8007a22:	4602      	mov	r2, r0
 8007a24:	460b      	mov	r3, r1
 8007a26:	4640      	mov	r0, r8
 8007a28:	4649      	mov	r1, r9
 8007a2a:	f7f8 fc4d 	bl	80002c8 <__aeabi_dsub>
 8007a2e:	4652      	mov	r2, sl
 8007a30:	465b      	mov	r3, fp
 8007a32:	f7f8 fe01 	bl	8000638 <__aeabi_dmul>
 8007a36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a3a:	f7f8 fc45 	bl	80002c8 <__aeabi_dsub>
 8007a3e:	a30c      	add	r3, pc, #48	@ (adr r3, 8007a70 <__kernel_sin+0x140>)
 8007a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a44:	4606      	mov	r6, r0
 8007a46:	460f      	mov	r7, r1
 8007a48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a4c:	f7f8 fdf4 	bl	8000638 <__aeabi_dmul>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	4630      	mov	r0, r6
 8007a56:	4639      	mov	r1, r7
 8007a58:	f7f8 fc38 	bl	80002cc <__adddf3>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	460b      	mov	r3, r1
 8007a60:	4620      	mov	r0, r4
 8007a62:	4629      	mov	r1, r5
 8007a64:	f7f8 fc30 	bl	80002c8 <__aeabi_dsub>
 8007a68:	e7c6      	b.n	80079f8 <__kernel_sin+0xc8>
 8007a6a:	bf00      	nop
 8007a6c:	f3af 8000 	nop.w
 8007a70:	55555549 	.word	0x55555549
 8007a74:	3fc55555 	.word	0x3fc55555
 8007a78:	3fe00000 	.word	0x3fe00000
 8007a7c:	5acfd57c 	.word	0x5acfd57c
 8007a80:	3de5d93a 	.word	0x3de5d93a
 8007a84:	8a2b9ceb 	.word	0x8a2b9ceb
 8007a88:	3e5ae5e6 	.word	0x3e5ae5e6
 8007a8c:	57b1fe7d 	.word	0x57b1fe7d
 8007a90:	3ec71de3 	.word	0x3ec71de3
 8007a94:	19c161d5 	.word	0x19c161d5
 8007a98:	3f2a01a0 	.word	0x3f2a01a0
 8007a9c:	1110f8a6 	.word	0x1110f8a6
 8007aa0:	3f811111 	.word	0x3f811111
 8007aa4:	00000000 	.word	0x00000000

08007aa8 <__ieee754_atan2>:
 8007aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007aac:	ec57 6b11 	vmov	r6, r7, d1
 8007ab0:	4273      	negs	r3, r6
 8007ab2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8007c30 <__ieee754_atan2+0x188>
 8007ab6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8007aba:	4333      	orrs	r3, r6
 8007abc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007ac0:	4543      	cmp	r3, r8
 8007ac2:	ec51 0b10 	vmov	r0, r1, d0
 8007ac6:	4635      	mov	r5, r6
 8007ac8:	d809      	bhi.n	8007ade <__ieee754_atan2+0x36>
 8007aca:	4244      	negs	r4, r0
 8007acc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007ad0:	4304      	orrs	r4, r0
 8007ad2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007ad6:	4544      	cmp	r4, r8
 8007ad8:	468e      	mov	lr, r1
 8007ada:	4681      	mov	r9, r0
 8007adc:	d907      	bls.n	8007aee <__ieee754_atan2+0x46>
 8007ade:	4632      	mov	r2, r6
 8007ae0:	463b      	mov	r3, r7
 8007ae2:	f7f8 fbf3 	bl	80002cc <__adddf3>
 8007ae6:	ec41 0b10 	vmov	d0, r0, r1
 8007aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aee:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8007af2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8007af6:	4334      	orrs	r4, r6
 8007af8:	d103      	bne.n	8007b02 <__ieee754_atan2+0x5a>
 8007afa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007afe:	f000 ba97 	b.w	8008030 <atan>
 8007b02:	17bc      	asrs	r4, r7, #30
 8007b04:	f004 0402 	and.w	r4, r4, #2
 8007b08:	ea53 0909 	orrs.w	r9, r3, r9
 8007b0c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007b10:	d107      	bne.n	8007b22 <__ieee754_atan2+0x7a>
 8007b12:	2c02      	cmp	r4, #2
 8007b14:	d05f      	beq.n	8007bd6 <__ieee754_atan2+0x12e>
 8007b16:	2c03      	cmp	r4, #3
 8007b18:	d1e5      	bne.n	8007ae6 <__ieee754_atan2+0x3e>
 8007b1a:	a141      	add	r1, pc, #260	@ (adr r1, 8007c20 <__ieee754_atan2+0x178>)
 8007b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b20:	e7e1      	b.n	8007ae6 <__ieee754_atan2+0x3e>
 8007b22:	4315      	orrs	r5, r2
 8007b24:	d106      	bne.n	8007b34 <__ieee754_atan2+0x8c>
 8007b26:	f1be 0f00 	cmp.w	lr, #0
 8007b2a:	da5f      	bge.n	8007bec <__ieee754_atan2+0x144>
 8007b2c:	a13e      	add	r1, pc, #248	@ (adr r1, 8007c28 <__ieee754_atan2+0x180>)
 8007b2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b32:	e7d8      	b.n	8007ae6 <__ieee754_atan2+0x3e>
 8007b34:	4542      	cmp	r2, r8
 8007b36:	d10f      	bne.n	8007b58 <__ieee754_atan2+0xb0>
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	f104 34ff 	add.w	r4, r4, #4294967295
 8007b3e:	d107      	bne.n	8007b50 <__ieee754_atan2+0xa8>
 8007b40:	2c02      	cmp	r4, #2
 8007b42:	d84c      	bhi.n	8007bde <__ieee754_atan2+0x136>
 8007b44:	4b34      	ldr	r3, [pc, #208]	@ (8007c18 <__ieee754_atan2+0x170>)
 8007b46:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b4e:	e7ca      	b.n	8007ae6 <__ieee754_atan2+0x3e>
 8007b50:	2c02      	cmp	r4, #2
 8007b52:	d848      	bhi.n	8007be6 <__ieee754_atan2+0x13e>
 8007b54:	4b31      	ldr	r3, [pc, #196]	@ (8007c1c <__ieee754_atan2+0x174>)
 8007b56:	e7f6      	b.n	8007b46 <__ieee754_atan2+0x9e>
 8007b58:	4543      	cmp	r3, r8
 8007b5a:	d0e4      	beq.n	8007b26 <__ieee754_atan2+0x7e>
 8007b5c:	1a9b      	subs	r3, r3, r2
 8007b5e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8007b62:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007b66:	da1e      	bge.n	8007ba6 <__ieee754_atan2+0xfe>
 8007b68:	2f00      	cmp	r7, #0
 8007b6a:	da01      	bge.n	8007b70 <__ieee754_atan2+0xc8>
 8007b6c:	323c      	adds	r2, #60	@ 0x3c
 8007b6e:	db1e      	blt.n	8007bae <__ieee754_atan2+0x106>
 8007b70:	4632      	mov	r2, r6
 8007b72:	463b      	mov	r3, r7
 8007b74:	f7f8 fe8a 	bl	800088c <__aeabi_ddiv>
 8007b78:	ec41 0b10 	vmov	d0, r0, r1
 8007b7c:	f000 fbf0 	bl	8008360 <fabs>
 8007b80:	f000 fa56 	bl	8008030 <atan>
 8007b84:	ec51 0b10 	vmov	r0, r1, d0
 8007b88:	2c01      	cmp	r4, #1
 8007b8a:	d013      	beq.n	8007bb4 <__ieee754_atan2+0x10c>
 8007b8c:	2c02      	cmp	r4, #2
 8007b8e:	d015      	beq.n	8007bbc <__ieee754_atan2+0x114>
 8007b90:	2c00      	cmp	r4, #0
 8007b92:	d0a8      	beq.n	8007ae6 <__ieee754_atan2+0x3e>
 8007b94:	a318      	add	r3, pc, #96	@ (adr r3, 8007bf8 <__ieee754_atan2+0x150>)
 8007b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9a:	f7f8 fb95 	bl	80002c8 <__aeabi_dsub>
 8007b9e:	a318      	add	r3, pc, #96	@ (adr r3, 8007c00 <__ieee754_atan2+0x158>)
 8007ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba4:	e014      	b.n	8007bd0 <__ieee754_atan2+0x128>
 8007ba6:	a118      	add	r1, pc, #96	@ (adr r1, 8007c08 <__ieee754_atan2+0x160>)
 8007ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bac:	e7ec      	b.n	8007b88 <__ieee754_atan2+0xe0>
 8007bae:	2000      	movs	r0, #0
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	e7e9      	b.n	8007b88 <__ieee754_atan2+0xe0>
 8007bb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007bb8:	4619      	mov	r1, r3
 8007bba:	e794      	b.n	8007ae6 <__ieee754_atan2+0x3e>
 8007bbc:	a30e      	add	r3, pc, #56	@ (adr r3, 8007bf8 <__ieee754_atan2+0x150>)
 8007bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc2:	f7f8 fb81 	bl	80002c8 <__aeabi_dsub>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	a10d      	add	r1, pc, #52	@ (adr r1, 8007c00 <__ieee754_atan2+0x158>)
 8007bcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bd0:	f7f8 fb7a 	bl	80002c8 <__aeabi_dsub>
 8007bd4:	e787      	b.n	8007ae6 <__ieee754_atan2+0x3e>
 8007bd6:	a10a      	add	r1, pc, #40	@ (adr r1, 8007c00 <__ieee754_atan2+0x158>)
 8007bd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bdc:	e783      	b.n	8007ae6 <__ieee754_atan2+0x3e>
 8007bde:	a10c      	add	r1, pc, #48	@ (adr r1, 8007c10 <__ieee754_atan2+0x168>)
 8007be0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007be4:	e77f      	b.n	8007ae6 <__ieee754_atan2+0x3e>
 8007be6:	2000      	movs	r0, #0
 8007be8:	2100      	movs	r1, #0
 8007bea:	e77c      	b.n	8007ae6 <__ieee754_atan2+0x3e>
 8007bec:	a106      	add	r1, pc, #24	@ (adr r1, 8007c08 <__ieee754_atan2+0x160>)
 8007bee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bf2:	e778      	b.n	8007ae6 <__ieee754_atan2+0x3e>
 8007bf4:	f3af 8000 	nop.w
 8007bf8:	33145c07 	.word	0x33145c07
 8007bfc:	3ca1a626 	.word	0x3ca1a626
 8007c00:	54442d18 	.word	0x54442d18
 8007c04:	400921fb 	.word	0x400921fb
 8007c08:	54442d18 	.word	0x54442d18
 8007c0c:	3ff921fb 	.word	0x3ff921fb
 8007c10:	54442d18 	.word	0x54442d18
 8007c14:	3fe921fb 	.word	0x3fe921fb
 8007c18:	080091f8 	.word	0x080091f8
 8007c1c:	080091e0 	.word	0x080091e0
 8007c20:	54442d18 	.word	0x54442d18
 8007c24:	c00921fb 	.word	0xc00921fb
 8007c28:	54442d18 	.word	0x54442d18
 8007c2c:	bff921fb 	.word	0xbff921fb
 8007c30:	7ff00000 	.word	0x7ff00000
 8007c34:	00000000 	.word	0x00000000

08007c38 <__ieee754_rem_pio2>:
 8007c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c3c:	ec57 6b10 	vmov	r6, r7, d0
 8007c40:	4bc5      	ldr	r3, [pc, #788]	@ (8007f58 <__ieee754_rem_pio2+0x320>)
 8007c42:	b08d      	sub	sp, #52	@ 0x34
 8007c44:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007c48:	4598      	cmp	r8, r3
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	9704      	str	r7, [sp, #16]
 8007c4e:	d807      	bhi.n	8007c60 <__ieee754_rem_pio2+0x28>
 8007c50:	2200      	movs	r2, #0
 8007c52:	2300      	movs	r3, #0
 8007c54:	ed80 0b00 	vstr	d0, [r0]
 8007c58:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007c5c:	2500      	movs	r5, #0
 8007c5e:	e028      	b.n	8007cb2 <__ieee754_rem_pio2+0x7a>
 8007c60:	4bbe      	ldr	r3, [pc, #760]	@ (8007f5c <__ieee754_rem_pio2+0x324>)
 8007c62:	4598      	cmp	r8, r3
 8007c64:	d878      	bhi.n	8007d58 <__ieee754_rem_pio2+0x120>
 8007c66:	9b04      	ldr	r3, [sp, #16]
 8007c68:	4dbd      	ldr	r5, [pc, #756]	@ (8007f60 <__ieee754_rem_pio2+0x328>)
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8007f20 <__ieee754_rem_pio2+0x2e8>)
 8007c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c74:	4639      	mov	r1, r7
 8007c76:	dd38      	ble.n	8007cea <__ieee754_rem_pio2+0xb2>
 8007c78:	f7f8 fb26 	bl	80002c8 <__aeabi_dsub>
 8007c7c:	45a8      	cmp	r8, r5
 8007c7e:	4606      	mov	r6, r0
 8007c80:	460f      	mov	r7, r1
 8007c82:	d01a      	beq.n	8007cba <__ieee754_rem_pio2+0x82>
 8007c84:	a3a8      	add	r3, pc, #672	@ (adr r3, 8007f28 <__ieee754_rem_pio2+0x2f0>)
 8007c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8a:	f7f8 fb1d 	bl	80002c8 <__aeabi_dsub>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	460b      	mov	r3, r1
 8007c92:	4680      	mov	r8, r0
 8007c94:	4689      	mov	r9, r1
 8007c96:	4630      	mov	r0, r6
 8007c98:	4639      	mov	r1, r7
 8007c9a:	f7f8 fb15 	bl	80002c8 <__aeabi_dsub>
 8007c9e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8007f28 <__ieee754_rem_pio2+0x2f0>)
 8007ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca4:	f7f8 fb10 	bl	80002c8 <__aeabi_dsub>
 8007ca8:	e9c4 8900 	strd	r8, r9, [r4]
 8007cac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007cb0:	2501      	movs	r5, #1
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	b00d      	add	sp, #52	@ 0x34
 8007cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cba:	a39d      	add	r3, pc, #628	@ (adr r3, 8007f30 <__ieee754_rem_pio2+0x2f8>)
 8007cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc0:	f7f8 fb02 	bl	80002c8 <__aeabi_dsub>
 8007cc4:	a39c      	add	r3, pc, #624	@ (adr r3, 8007f38 <__ieee754_rem_pio2+0x300>)
 8007cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cca:	4606      	mov	r6, r0
 8007ccc:	460f      	mov	r7, r1
 8007cce:	f7f8 fafb 	bl	80002c8 <__aeabi_dsub>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	4680      	mov	r8, r0
 8007cd8:	4689      	mov	r9, r1
 8007cda:	4630      	mov	r0, r6
 8007cdc:	4639      	mov	r1, r7
 8007cde:	f7f8 faf3 	bl	80002c8 <__aeabi_dsub>
 8007ce2:	a395      	add	r3, pc, #596	@ (adr r3, 8007f38 <__ieee754_rem_pio2+0x300>)
 8007ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce8:	e7dc      	b.n	8007ca4 <__ieee754_rem_pio2+0x6c>
 8007cea:	f7f8 faef 	bl	80002cc <__adddf3>
 8007cee:	45a8      	cmp	r8, r5
 8007cf0:	4606      	mov	r6, r0
 8007cf2:	460f      	mov	r7, r1
 8007cf4:	d018      	beq.n	8007d28 <__ieee754_rem_pio2+0xf0>
 8007cf6:	a38c      	add	r3, pc, #560	@ (adr r3, 8007f28 <__ieee754_rem_pio2+0x2f0>)
 8007cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfc:	f7f8 fae6 	bl	80002cc <__adddf3>
 8007d00:	4602      	mov	r2, r0
 8007d02:	460b      	mov	r3, r1
 8007d04:	4680      	mov	r8, r0
 8007d06:	4689      	mov	r9, r1
 8007d08:	4630      	mov	r0, r6
 8007d0a:	4639      	mov	r1, r7
 8007d0c:	f7f8 fadc 	bl	80002c8 <__aeabi_dsub>
 8007d10:	a385      	add	r3, pc, #532	@ (adr r3, 8007f28 <__ieee754_rem_pio2+0x2f0>)
 8007d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d16:	f7f8 fad9 	bl	80002cc <__adddf3>
 8007d1a:	f04f 35ff 	mov.w	r5, #4294967295
 8007d1e:	e9c4 8900 	strd	r8, r9, [r4]
 8007d22:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007d26:	e7c4      	b.n	8007cb2 <__ieee754_rem_pio2+0x7a>
 8007d28:	a381      	add	r3, pc, #516	@ (adr r3, 8007f30 <__ieee754_rem_pio2+0x2f8>)
 8007d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2e:	f7f8 facd 	bl	80002cc <__adddf3>
 8007d32:	a381      	add	r3, pc, #516	@ (adr r3, 8007f38 <__ieee754_rem_pio2+0x300>)
 8007d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d38:	4606      	mov	r6, r0
 8007d3a:	460f      	mov	r7, r1
 8007d3c:	f7f8 fac6 	bl	80002cc <__adddf3>
 8007d40:	4602      	mov	r2, r0
 8007d42:	460b      	mov	r3, r1
 8007d44:	4680      	mov	r8, r0
 8007d46:	4689      	mov	r9, r1
 8007d48:	4630      	mov	r0, r6
 8007d4a:	4639      	mov	r1, r7
 8007d4c:	f7f8 fabc 	bl	80002c8 <__aeabi_dsub>
 8007d50:	a379      	add	r3, pc, #484	@ (adr r3, 8007f38 <__ieee754_rem_pio2+0x300>)
 8007d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d56:	e7de      	b.n	8007d16 <__ieee754_rem_pio2+0xde>
 8007d58:	4b82      	ldr	r3, [pc, #520]	@ (8007f64 <__ieee754_rem_pio2+0x32c>)
 8007d5a:	4598      	cmp	r8, r3
 8007d5c:	f200 80d1 	bhi.w	8007f02 <__ieee754_rem_pio2+0x2ca>
 8007d60:	f000 fafe 	bl	8008360 <fabs>
 8007d64:	ec57 6b10 	vmov	r6, r7, d0
 8007d68:	a375      	add	r3, pc, #468	@ (adr r3, 8007f40 <__ieee754_rem_pio2+0x308>)
 8007d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6e:	4630      	mov	r0, r6
 8007d70:	4639      	mov	r1, r7
 8007d72:	f7f8 fc61 	bl	8000638 <__aeabi_dmul>
 8007d76:	4b7c      	ldr	r3, [pc, #496]	@ (8007f68 <__ieee754_rem_pio2+0x330>)
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f7f8 faa7 	bl	80002cc <__adddf3>
 8007d7e:	f7f8 ff0b 	bl	8000b98 <__aeabi_d2iz>
 8007d82:	4605      	mov	r5, r0
 8007d84:	f7f8 fbee 	bl	8000564 <__aeabi_i2d>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d90:	a363      	add	r3, pc, #396	@ (adr r3, 8007f20 <__ieee754_rem_pio2+0x2e8>)
 8007d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d96:	f7f8 fc4f 	bl	8000638 <__aeabi_dmul>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	4630      	mov	r0, r6
 8007da0:	4639      	mov	r1, r7
 8007da2:	f7f8 fa91 	bl	80002c8 <__aeabi_dsub>
 8007da6:	a360      	add	r3, pc, #384	@ (adr r3, 8007f28 <__ieee754_rem_pio2+0x2f0>)
 8007da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dac:	4682      	mov	sl, r0
 8007dae:	468b      	mov	fp, r1
 8007db0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007db4:	f7f8 fc40 	bl	8000638 <__aeabi_dmul>
 8007db8:	2d1f      	cmp	r5, #31
 8007dba:	4606      	mov	r6, r0
 8007dbc:	460f      	mov	r7, r1
 8007dbe:	dc0c      	bgt.n	8007dda <__ieee754_rem_pio2+0x1a2>
 8007dc0:	4b6a      	ldr	r3, [pc, #424]	@ (8007f6c <__ieee754_rem_pio2+0x334>)
 8007dc2:	1e6a      	subs	r2, r5, #1
 8007dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc8:	4543      	cmp	r3, r8
 8007dca:	d006      	beq.n	8007dda <__ieee754_rem_pio2+0x1a2>
 8007dcc:	4632      	mov	r2, r6
 8007dce:	463b      	mov	r3, r7
 8007dd0:	4650      	mov	r0, sl
 8007dd2:	4659      	mov	r1, fp
 8007dd4:	f7f8 fa78 	bl	80002c8 <__aeabi_dsub>
 8007dd8:	e00e      	b.n	8007df8 <__ieee754_rem_pio2+0x1c0>
 8007dda:	463b      	mov	r3, r7
 8007ddc:	4632      	mov	r2, r6
 8007dde:	4650      	mov	r0, sl
 8007de0:	4659      	mov	r1, fp
 8007de2:	f7f8 fa71 	bl	80002c8 <__aeabi_dsub>
 8007de6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007dea:	9305      	str	r3, [sp, #20]
 8007dec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007df0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8007df4:	2b10      	cmp	r3, #16
 8007df6:	dc02      	bgt.n	8007dfe <__ieee754_rem_pio2+0x1c6>
 8007df8:	e9c4 0100 	strd	r0, r1, [r4]
 8007dfc:	e039      	b.n	8007e72 <__ieee754_rem_pio2+0x23a>
 8007dfe:	a34c      	add	r3, pc, #304	@ (adr r3, 8007f30 <__ieee754_rem_pio2+0x2f8>)
 8007e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e08:	f7f8 fc16 	bl	8000638 <__aeabi_dmul>
 8007e0c:	4606      	mov	r6, r0
 8007e0e:	460f      	mov	r7, r1
 8007e10:	4602      	mov	r2, r0
 8007e12:	460b      	mov	r3, r1
 8007e14:	4650      	mov	r0, sl
 8007e16:	4659      	mov	r1, fp
 8007e18:	f7f8 fa56 	bl	80002c8 <__aeabi_dsub>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	460b      	mov	r3, r1
 8007e20:	4680      	mov	r8, r0
 8007e22:	4689      	mov	r9, r1
 8007e24:	4650      	mov	r0, sl
 8007e26:	4659      	mov	r1, fp
 8007e28:	f7f8 fa4e 	bl	80002c8 <__aeabi_dsub>
 8007e2c:	4632      	mov	r2, r6
 8007e2e:	463b      	mov	r3, r7
 8007e30:	f7f8 fa4a 	bl	80002c8 <__aeabi_dsub>
 8007e34:	a340      	add	r3, pc, #256	@ (adr r3, 8007f38 <__ieee754_rem_pio2+0x300>)
 8007e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3a:	4606      	mov	r6, r0
 8007e3c:	460f      	mov	r7, r1
 8007e3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e42:	f7f8 fbf9 	bl	8000638 <__aeabi_dmul>
 8007e46:	4632      	mov	r2, r6
 8007e48:	463b      	mov	r3, r7
 8007e4a:	f7f8 fa3d 	bl	80002c8 <__aeabi_dsub>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	460b      	mov	r3, r1
 8007e52:	4606      	mov	r6, r0
 8007e54:	460f      	mov	r7, r1
 8007e56:	4640      	mov	r0, r8
 8007e58:	4649      	mov	r1, r9
 8007e5a:	f7f8 fa35 	bl	80002c8 <__aeabi_dsub>
 8007e5e:	9a05      	ldr	r2, [sp, #20]
 8007e60:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	2b31      	cmp	r3, #49	@ 0x31
 8007e68:	dc20      	bgt.n	8007eac <__ieee754_rem_pio2+0x274>
 8007e6a:	e9c4 0100 	strd	r0, r1, [r4]
 8007e6e:	46c2      	mov	sl, r8
 8007e70:	46cb      	mov	fp, r9
 8007e72:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007e76:	4650      	mov	r0, sl
 8007e78:	4642      	mov	r2, r8
 8007e7a:	464b      	mov	r3, r9
 8007e7c:	4659      	mov	r1, fp
 8007e7e:	f7f8 fa23 	bl	80002c8 <__aeabi_dsub>
 8007e82:	463b      	mov	r3, r7
 8007e84:	4632      	mov	r2, r6
 8007e86:	f7f8 fa1f 	bl	80002c8 <__aeabi_dsub>
 8007e8a:	9b04      	ldr	r3, [sp, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007e92:	f6bf af0e 	bge.w	8007cb2 <__ieee754_rem_pio2+0x7a>
 8007e96:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8007e9a:	6063      	str	r3, [r4, #4]
 8007e9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007ea0:	f8c4 8000 	str.w	r8, [r4]
 8007ea4:	60a0      	str	r0, [r4, #8]
 8007ea6:	60e3      	str	r3, [r4, #12]
 8007ea8:	426d      	negs	r5, r5
 8007eaa:	e702      	b.n	8007cb2 <__ieee754_rem_pio2+0x7a>
 8007eac:	a326      	add	r3, pc, #152	@ (adr r3, 8007f48 <__ieee754_rem_pio2+0x310>)
 8007eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eb6:	f7f8 fbbf 	bl	8000638 <__aeabi_dmul>
 8007eba:	4606      	mov	r6, r0
 8007ebc:	460f      	mov	r7, r1
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	4640      	mov	r0, r8
 8007ec4:	4649      	mov	r1, r9
 8007ec6:	f7f8 f9ff 	bl	80002c8 <__aeabi_dsub>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	460b      	mov	r3, r1
 8007ece:	4682      	mov	sl, r0
 8007ed0:	468b      	mov	fp, r1
 8007ed2:	4640      	mov	r0, r8
 8007ed4:	4649      	mov	r1, r9
 8007ed6:	f7f8 f9f7 	bl	80002c8 <__aeabi_dsub>
 8007eda:	4632      	mov	r2, r6
 8007edc:	463b      	mov	r3, r7
 8007ede:	f7f8 f9f3 	bl	80002c8 <__aeabi_dsub>
 8007ee2:	a31b      	add	r3, pc, #108	@ (adr r3, 8007f50 <__ieee754_rem_pio2+0x318>)
 8007ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee8:	4606      	mov	r6, r0
 8007eea:	460f      	mov	r7, r1
 8007eec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ef0:	f7f8 fba2 	bl	8000638 <__aeabi_dmul>
 8007ef4:	4632      	mov	r2, r6
 8007ef6:	463b      	mov	r3, r7
 8007ef8:	f7f8 f9e6 	bl	80002c8 <__aeabi_dsub>
 8007efc:	4606      	mov	r6, r0
 8007efe:	460f      	mov	r7, r1
 8007f00:	e764      	b.n	8007dcc <__ieee754_rem_pio2+0x194>
 8007f02:	4b1b      	ldr	r3, [pc, #108]	@ (8007f70 <__ieee754_rem_pio2+0x338>)
 8007f04:	4598      	cmp	r8, r3
 8007f06:	d935      	bls.n	8007f74 <__ieee754_rem_pio2+0x33c>
 8007f08:	4632      	mov	r2, r6
 8007f0a:	463b      	mov	r3, r7
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	4639      	mov	r1, r7
 8007f10:	f7f8 f9da 	bl	80002c8 <__aeabi_dsub>
 8007f14:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007f18:	e9c4 0100 	strd	r0, r1, [r4]
 8007f1c:	e69e      	b.n	8007c5c <__ieee754_rem_pio2+0x24>
 8007f1e:	bf00      	nop
 8007f20:	54400000 	.word	0x54400000
 8007f24:	3ff921fb 	.word	0x3ff921fb
 8007f28:	1a626331 	.word	0x1a626331
 8007f2c:	3dd0b461 	.word	0x3dd0b461
 8007f30:	1a600000 	.word	0x1a600000
 8007f34:	3dd0b461 	.word	0x3dd0b461
 8007f38:	2e037073 	.word	0x2e037073
 8007f3c:	3ba3198a 	.word	0x3ba3198a
 8007f40:	6dc9c883 	.word	0x6dc9c883
 8007f44:	3fe45f30 	.word	0x3fe45f30
 8007f48:	2e000000 	.word	0x2e000000
 8007f4c:	3ba3198a 	.word	0x3ba3198a
 8007f50:	252049c1 	.word	0x252049c1
 8007f54:	397b839a 	.word	0x397b839a
 8007f58:	3fe921fb 	.word	0x3fe921fb
 8007f5c:	4002d97b 	.word	0x4002d97b
 8007f60:	3ff921fb 	.word	0x3ff921fb
 8007f64:	413921fb 	.word	0x413921fb
 8007f68:	3fe00000 	.word	0x3fe00000
 8007f6c:	08009210 	.word	0x08009210
 8007f70:	7fefffff 	.word	0x7fefffff
 8007f74:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007f78:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8007f7c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007f80:	4630      	mov	r0, r6
 8007f82:	460f      	mov	r7, r1
 8007f84:	f7f8 fe08 	bl	8000b98 <__aeabi_d2iz>
 8007f88:	f7f8 faec 	bl	8000564 <__aeabi_i2d>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	4630      	mov	r0, r6
 8007f92:	4639      	mov	r1, r7
 8007f94:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007f98:	f7f8 f996 	bl	80002c8 <__aeabi_dsub>
 8007f9c:	4b22      	ldr	r3, [pc, #136]	@ (8008028 <__ieee754_rem_pio2+0x3f0>)
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f7f8 fb4a 	bl	8000638 <__aeabi_dmul>
 8007fa4:	460f      	mov	r7, r1
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	f7f8 fdf6 	bl	8000b98 <__aeabi_d2iz>
 8007fac:	f7f8 fada 	bl	8000564 <__aeabi_i2d>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	4639      	mov	r1, r7
 8007fb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007fbc:	f7f8 f984 	bl	80002c8 <__aeabi_dsub>
 8007fc0:	4b19      	ldr	r3, [pc, #100]	@ (8008028 <__ieee754_rem_pio2+0x3f0>)
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f7f8 fb38 	bl	8000638 <__aeabi_dmul>
 8007fc8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8007fcc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8007fd0:	f04f 0803 	mov.w	r8, #3
 8007fd4:	2600      	movs	r6, #0
 8007fd6:	2700      	movs	r7, #0
 8007fd8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007fdc:	4632      	mov	r2, r6
 8007fde:	463b      	mov	r3, r7
 8007fe0:	46c2      	mov	sl, r8
 8007fe2:	f108 38ff 	add.w	r8, r8, #4294967295
 8007fe6:	f7f8 fd8f 	bl	8000b08 <__aeabi_dcmpeq>
 8007fea:	2800      	cmp	r0, #0
 8007fec:	d1f4      	bne.n	8007fd8 <__ieee754_rem_pio2+0x3a0>
 8007fee:	4b0f      	ldr	r3, [pc, #60]	@ (800802c <__ieee754_rem_pio2+0x3f4>)
 8007ff0:	9301      	str	r3, [sp, #4]
 8007ff2:	2302      	movs	r3, #2
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	462a      	mov	r2, r5
 8007ff8:	4653      	mov	r3, sl
 8007ffa:	4621      	mov	r1, r4
 8007ffc:	a806      	add	r0, sp, #24
 8007ffe:	f000 f9b7 	bl	8008370 <__kernel_rem_pio2>
 8008002:	9b04      	ldr	r3, [sp, #16]
 8008004:	2b00      	cmp	r3, #0
 8008006:	4605      	mov	r5, r0
 8008008:	f6bf ae53 	bge.w	8007cb2 <__ieee754_rem_pio2+0x7a>
 800800c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8008010:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008014:	e9c4 2300 	strd	r2, r3, [r4]
 8008018:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800801c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008020:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008024:	e740      	b.n	8007ea8 <__ieee754_rem_pio2+0x270>
 8008026:	bf00      	nop
 8008028:	41700000 	.word	0x41700000
 800802c:	08009290 	.word	0x08009290

08008030 <atan>:
 8008030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008034:	ec55 4b10 	vmov	r4, r5, d0
 8008038:	4bbf      	ldr	r3, [pc, #764]	@ (8008338 <atan+0x308>)
 800803a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800803e:	429e      	cmp	r6, r3
 8008040:	46ab      	mov	fp, r5
 8008042:	d918      	bls.n	8008076 <atan+0x46>
 8008044:	4bbd      	ldr	r3, [pc, #756]	@ (800833c <atan+0x30c>)
 8008046:	429e      	cmp	r6, r3
 8008048:	d801      	bhi.n	800804e <atan+0x1e>
 800804a:	d109      	bne.n	8008060 <atan+0x30>
 800804c:	b144      	cbz	r4, 8008060 <atan+0x30>
 800804e:	4622      	mov	r2, r4
 8008050:	462b      	mov	r3, r5
 8008052:	4620      	mov	r0, r4
 8008054:	4629      	mov	r1, r5
 8008056:	f7f8 f939 	bl	80002cc <__adddf3>
 800805a:	4604      	mov	r4, r0
 800805c:	460d      	mov	r5, r1
 800805e:	e006      	b.n	800806e <atan+0x3e>
 8008060:	f1bb 0f00 	cmp.w	fp, #0
 8008064:	f340 812b 	ble.w	80082be <atan+0x28e>
 8008068:	a597      	add	r5, pc, #604	@ (adr r5, 80082c8 <atan+0x298>)
 800806a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800806e:	ec45 4b10 	vmov	d0, r4, r5
 8008072:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008076:	4bb2      	ldr	r3, [pc, #712]	@ (8008340 <atan+0x310>)
 8008078:	429e      	cmp	r6, r3
 800807a:	d813      	bhi.n	80080a4 <atan+0x74>
 800807c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8008080:	429e      	cmp	r6, r3
 8008082:	d80c      	bhi.n	800809e <atan+0x6e>
 8008084:	a392      	add	r3, pc, #584	@ (adr r3, 80082d0 <atan+0x2a0>)
 8008086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808a:	4620      	mov	r0, r4
 800808c:	4629      	mov	r1, r5
 800808e:	f7f8 f91d 	bl	80002cc <__adddf3>
 8008092:	4bac      	ldr	r3, [pc, #688]	@ (8008344 <atan+0x314>)
 8008094:	2200      	movs	r2, #0
 8008096:	f7f8 fd5f 	bl	8000b58 <__aeabi_dcmpgt>
 800809a:	2800      	cmp	r0, #0
 800809c:	d1e7      	bne.n	800806e <atan+0x3e>
 800809e:	f04f 3aff 	mov.w	sl, #4294967295
 80080a2:	e029      	b.n	80080f8 <atan+0xc8>
 80080a4:	f000 f95c 	bl	8008360 <fabs>
 80080a8:	4ba7      	ldr	r3, [pc, #668]	@ (8008348 <atan+0x318>)
 80080aa:	429e      	cmp	r6, r3
 80080ac:	ec55 4b10 	vmov	r4, r5, d0
 80080b0:	f200 80bc 	bhi.w	800822c <atan+0x1fc>
 80080b4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80080b8:	429e      	cmp	r6, r3
 80080ba:	f200 809e 	bhi.w	80081fa <atan+0x1ca>
 80080be:	4622      	mov	r2, r4
 80080c0:	462b      	mov	r3, r5
 80080c2:	4620      	mov	r0, r4
 80080c4:	4629      	mov	r1, r5
 80080c6:	f7f8 f901 	bl	80002cc <__adddf3>
 80080ca:	4b9e      	ldr	r3, [pc, #632]	@ (8008344 <atan+0x314>)
 80080cc:	2200      	movs	r2, #0
 80080ce:	f7f8 f8fb 	bl	80002c8 <__aeabi_dsub>
 80080d2:	2200      	movs	r2, #0
 80080d4:	4606      	mov	r6, r0
 80080d6:	460f      	mov	r7, r1
 80080d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80080dc:	4620      	mov	r0, r4
 80080de:	4629      	mov	r1, r5
 80080e0:	f7f8 f8f4 	bl	80002cc <__adddf3>
 80080e4:	4602      	mov	r2, r0
 80080e6:	460b      	mov	r3, r1
 80080e8:	4630      	mov	r0, r6
 80080ea:	4639      	mov	r1, r7
 80080ec:	f7f8 fbce 	bl	800088c <__aeabi_ddiv>
 80080f0:	f04f 0a00 	mov.w	sl, #0
 80080f4:	4604      	mov	r4, r0
 80080f6:	460d      	mov	r5, r1
 80080f8:	4622      	mov	r2, r4
 80080fa:	462b      	mov	r3, r5
 80080fc:	4620      	mov	r0, r4
 80080fe:	4629      	mov	r1, r5
 8008100:	f7f8 fa9a 	bl	8000638 <__aeabi_dmul>
 8008104:	4602      	mov	r2, r0
 8008106:	460b      	mov	r3, r1
 8008108:	4680      	mov	r8, r0
 800810a:	4689      	mov	r9, r1
 800810c:	f7f8 fa94 	bl	8000638 <__aeabi_dmul>
 8008110:	a371      	add	r3, pc, #452	@ (adr r3, 80082d8 <atan+0x2a8>)
 8008112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008116:	4606      	mov	r6, r0
 8008118:	460f      	mov	r7, r1
 800811a:	f7f8 fa8d 	bl	8000638 <__aeabi_dmul>
 800811e:	a370      	add	r3, pc, #448	@ (adr r3, 80082e0 <atan+0x2b0>)
 8008120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008124:	f7f8 f8d2 	bl	80002cc <__adddf3>
 8008128:	4632      	mov	r2, r6
 800812a:	463b      	mov	r3, r7
 800812c:	f7f8 fa84 	bl	8000638 <__aeabi_dmul>
 8008130:	a36d      	add	r3, pc, #436	@ (adr r3, 80082e8 <atan+0x2b8>)
 8008132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008136:	f7f8 f8c9 	bl	80002cc <__adddf3>
 800813a:	4632      	mov	r2, r6
 800813c:	463b      	mov	r3, r7
 800813e:	f7f8 fa7b 	bl	8000638 <__aeabi_dmul>
 8008142:	a36b      	add	r3, pc, #428	@ (adr r3, 80082f0 <atan+0x2c0>)
 8008144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008148:	f7f8 f8c0 	bl	80002cc <__adddf3>
 800814c:	4632      	mov	r2, r6
 800814e:	463b      	mov	r3, r7
 8008150:	f7f8 fa72 	bl	8000638 <__aeabi_dmul>
 8008154:	a368      	add	r3, pc, #416	@ (adr r3, 80082f8 <atan+0x2c8>)
 8008156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815a:	f7f8 f8b7 	bl	80002cc <__adddf3>
 800815e:	4632      	mov	r2, r6
 8008160:	463b      	mov	r3, r7
 8008162:	f7f8 fa69 	bl	8000638 <__aeabi_dmul>
 8008166:	a366      	add	r3, pc, #408	@ (adr r3, 8008300 <atan+0x2d0>)
 8008168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816c:	f7f8 f8ae 	bl	80002cc <__adddf3>
 8008170:	4642      	mov	r2, r8
 8008172:	464b      	mov	r3, r9
 8008174:	f7f8 fa60 	bl	8000638 <__aeabi_dmul>
 8008178:	a363      	add	r3, pc, #396	@ (adr r3, 8008308 <atan+0x2d8>)
 800817a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817e:	4680      	mov	r8, r0
 8008180:	4689      	mov	r9, r1
 8008182:	4630      	mov	r0, r6
 8008184:	4639      	mov	r1, r7
 8008186:	f7f8 fa57 	bl	8000638 <__aeabi_dmul>
 800818a:	a361      	add	r3, pc, #388	@ (adr r3, 8008310 <atan+0x2e0>)
 800818c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008190:	f7f8 f89a 	bl	80002c8 <__aeabi_dsub>
 8008194:	4632      	mov	r2, r6
 8008196:	463b      	mov	r3, r7
 8008198:	f7f8 fa4e 	bl	8000638 <__aeabi_dmul>
 800819c:	a35e      	add	r3, pc, #376	@ (adr r3, 8008318 <atan+0x2e8>)
 800819e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a2:	f7f8 f891 	bl	80002c8 <__aeabi_dsub>
 80081a6:	4632      	mov	r2, r6
 80081a8:	463b      	mov	r3, r7
 80081aa:	f7f8 fa45 	bl	8000638 <__aeabi_dmul>
 80081ae:	a35c      	add	r3, pc, #368	@ (adr r3, 8008320 <atan+0x2f0>)
 80081b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b4:	f7f8 f888 	bl	80002c8 <__aeabi_dsub>
 80081b8:	4632      	mov	r2, r6
 80081ba:	463b      	mov	r3, r7
 80081bc:	f7f8 fa3c 	bl	8000638 <__aeabi_dmul>
 80081c0:	a359      	add	r3, pc, #356	@ (adr r3, 8008328 <atan+0x2f8>)
 80081c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c6:	f7f8 f87f 	bl	80002c8 <__aeabi_dsub>
 80081ca:	4632      	mov	r2, r6
 80081cc:	463b      	mov	r3, r7
 80081ce:	f7f8 fa33 	bl	8000638 <__aeabi_dmul>
 80081d2:	4602      	mov	r2, r0
 80081d4:	460b      	mov	r3, r1
 80081d6:	4640      	mov	r0, r8
 80081d8:	4649      	mov	r1, r9
 80081da:	f7f8 f877 	bl	80002cc <__adddf3>
 80081de:	4622      	mov	r2, r4
 80081e0:	462b      	mov	r3, r5
 80081e2:	f7f8 fa29 	bl	8000638 <__aeabi_dmul>
 80081e6:	f1ba 3fff 	cmp.w	sl, #4294967295
 80081ea:	4602      	mov	r2, r0
 80081ec:	460b      	mov	r3, r1
 80081ee:	d148      	bne.n	8008282 <atan+0x252>
 80081f0:	4620      	mov	r0, r4
 80081f2:	4629      	mov	r1, r5
 80081f4:	f7f8 f868 	bl	80002c8 <__aeabi_dsub>
 80081f8:	e72f      	b.n	800805a <atan+0x2a>
 80081fa:	4b52      	ldr	r3, [pc, #328]	@ (8008344 <atan+0x314>)
 80081fc:	2200      	movs	r2, #0
 80081fe:	4620      	mov	r0, r4
 8008200:	4629      	mov	r1, r5
 8008202:	f7f8 f861 	bl	80002c8 <__aeabi_dsub>
 8008206:	4b4f      	ldr	r3, [pc, #316]	@ (8008344 <atan+0x314>)
 8008208:	4606      	mov	r6, r0
 800820a:	460f      	mov	r7, r1
 800820c:	2200      	movs	r2, #0
 800820e:	4620      	mov	r0, r4
 8008210:	4629      	mov	r1, r5
 8008212:	f7f8 f85b 	bl	80002cc <__adddf3>
 8008216:	4602      	mov	r2, r0
 8008218:	460b      	mov	r3, r1
 800821a:	4630      	mov	r0, r6
 800821c:	4639      	mov	r1, r7
 800821e:	f7f8 fb35 	bl	800088c <__aeabi_ddiv>
 8008222:	f04f 0a01 	mov.w	sl, #1
 8008226:	4604      	mov	r4, r0
 8008228:	460d      	mov	r5, r1
 800822a:	e765      	b.n	80080f8 <atan+0xc8>
 800822c:	4b47      	ldr	r3, [pc, #284]	@ (800834c <atan+0x31c>)
 800822e:	429e      	cmp	r6, r3
 8008230:	d21c      	bcs.n	800826c <atan+0x23c>
 8008232:	4b47      	ldr	r3, [pc, #284]	@ (8008350 <atan+0x320>)
 8008234:	2200      	movs	r2, #0
 8008236:	4620      	mov	r0, r4
 8008238:	4629      	mov	r1, r5
 800823a:	f7f8 f845 	bl	80002c8 <__aeabi_dsub>
 800823e:	4b44      	ldr	r3, [pc, #272]	@ (8008350 <atan+0x320>)
 8008240:	4606      	mov	r6, r0
 8008242:	460f      	mov	r7, r1
 8008244:	2200      	movs	r2, #0
 8008246:	4620      	mov	r0, r4
 8008248:	4629      	mov	r1, r5
 800824a:	f7f8 f9f5 	bl	8000638 <__aeabi_dmul>
 800824e:	4b3d      	ldr	r3, [pc, #244]	@ (8008344 <atan+0x314>)
 8008250:	2200      	movs	r2, #0
 8008252:	f7f8 f83b 	bl	80002cc <__adddf3>
 8008256:	4602      	mov	r2, r0
 8008258:	460b      	mov	r3, r1
 800825a:	4630      	mov	r0, r6
 800825c:	4639      	mov	r1, r7
 800825e:	f7f8 fb15 	bl	800088c <__aeabi_ddiv>
 8008262:	f04f 0a02 	mov.w	sl, #2
 8008266:	4604      	mov	r4, r0
 8008268:	460d      	mov	r5, r1
 800826a:	e745      	b.n	80080f8 <atan+0xc8>
 800826c:	4622      	mov	r2, r4
 800826e:	462b      	mov	r3, r5
 8008270:	4938      	ldr	r1, [pc, #224]	@ (8008354 <atan+0x324>)
 8008272:	2000      	movs	r0, #0
 8008274:	f7f8 fb0a 	bl	800088c <__aeabi_ddiv>
 8008278:	f04f 0a03 	mov.w	sl, #3
 800827c:	4604      	mov	r4, r0
 800827e:	460d      	mov	r5, r1
 8008280:	e73a      	b.n	80080f8 <atan+0xc8>
 8008282:	4b35      	ldr	r3, [pc, #212]	@ (8008358 <atan+0x328>)
 8008284:	4e35      	ldr	r6, [pc, #212]	@ (800835c <atan+0x32c>)
 8008286:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800828a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828e:	f7f8 f81b 	bl	80002c8 <__aeabi_dsub>
 8008292:	4622      	mov	r2, r4
 8008294:	462b      	mov	r3, r5
 8008296:	f7f8 f817 	bl	80002c8 <__aeabi_dsub>
 800829a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800829e:	4602      	mov	r2, r0
 80082a0:	460b      	mov	r3, r1
 80082a2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80082a6:	f7f8 f80f 	bl	80002c8 <__aeabi_dsub>
 80082aa:	f1bb 0f00 	cmp.w	fp, #0
 80082ae:	4604      	mov	r4, r0
 80082b0:	460d      	mov	r5, r1
 80082b2:	f6bf aedc 	bge.w	800806e <atan+0x3e>
 80082b6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80082ba:	461d      	mov	r5, r3
 80082bc:	e6d7      	b.n	800806e <atan+0x3e>
 80082be:	a51c      	add	r5, pc, #112	@ (adr r5, 8008330 <atan+0x300>)
 80082c0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80082c4:	e6d3      	b.n	800806e <atan+0x3e>
 80082c6:	bf00      	nop
 80082c8:	54442d18 	.word	0x54442d18
 80082cc:	3ff921fb 	.word	0x3ff921fb
 80082d0:	8800759c 	.word	0x8800759c
 80082d4:	7e37e43c 	.word	0x7e37e43c
 80082d8:	e322da11 	.word	0xe322da11
 80082dc:	3f90ad3a 	.word	0x3f90ad3a
 80082e0:	24760deb 	.word	0x24760deb
 80082e4:	3fa97b4b 	.word	0x3fa97b4b
 80082e8:	a0d03d51 	.word	0xa0d03d51
 80082ec:	3fb10d66 	.word	0x3fb10d66
 80082f0:	c54c206e 	.word	0xc54c206e
 80082f4:	3fb745cd 	.word	0x3fb745cd
 80082f8:	920083ff 	.word	0x920083ff
 80082fc:	3fc24924 	.word	0x3fc24924
 8008300:	5555550d 	.word	0x5555550d
 8008304:	3fd55555 	.word	0x3fd55555
 8008308:	2c6a6c2f 	.word	0x2c6a6c2f
 800830c:	bfa2b444 	.word	0xbfa2b444
 8008310:	52defd9a 	.word	0x52defd9a
 8008314:	3fadde2d 	.word	0x3fadde2d
 8008318:	af749a6d 	.word	0xaf749a6d
 800831c:	3fb3b0f2 	.word	0x3fb3b0f2
 8008320:	fe231671 	.word	0xfe231671
 8008324:	3fbc71c6 	.word	0x3fbc71c6
 8008328:	9998ebc4 	.word	0x9998ebc4
 800832c:	3fc99999 	.word	0x3fc99999
 8008330:	54442d18 	.word	0x54442d18
 8008334:	bff921fb 	.word	0xbff921fb
 8008338:	440fffff 	.word	0x440fffff
 800833c:	7ff00000 	.word	0x7ff00000
 8008340:	3fdbffff 	.word	0x3fdbffff
 8008344:	3ff00000 	.word	0x3ff00000
 8008348:	3ff2ffff 	.word	0x3ff2ffff
 800834c:	40038000 	.word	0x40038000
 8008350:	3ff80000 	.word	0x3ff80000
 8008354:	bff00000 	.word	0xbff00000
 8008358:	08009398 	.word	0x08009398
 800835c:	080093b8 	.word	0x080093b8

08008360 <fabs>:
 8008360:	ec51 0b10 	vmov	r0, r1, d0
 8008364:	4602      	mov	r2, r0
 8008366:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800836a:	ec43 2b10 	vmov	d0, r2, r3
 800836e:	4770      	bx	lr

08008370 <__kernel_rem_pio2>:
 8008370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008374:	ed2d 8b02 	vpush	{d8}
 8008378:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800837c:	f112 0f14 	cmn.w	r2, #20
 8008380:	9306      	str	r3, [sp, #24]
 8008382:	9104      	str	r1, [sp, #16]
 8008384:	4bbe      	ldr	r3, [pc, #760]	@ (8008680 <__kernel_rem_pio2+0x310>)
 8008386:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8008388:	9008      	str	r0, [sp, #32]
 800838a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	9b06      	ldr	r3, [sp, #24]
 8008392:	f103 33ff 	add.w	r3, r3, #4294967295
 8008396:	bfa8      	it	ge
 8008398:	1ed4      	subge	r4, r2, #3
 800839a:	9305      	str	r3, [sp, #20]
 800839c:	bfb2      	itee	lt
 800839e:	2400      	movlt	r4, #0
 80083a0:	2318      	movge	r3, #24
 80083a2:	fb94 f4f3 	sdivge	r4, r4, r3
 80083a6:	f06f 0317 	mvn.w	r3, #23
 80083aa:	fb04 3303 	mla	r3, r4, r3, r3
 80083ae:	eb03 0b02 	add.w	fp, r3, r2
 80083b2:	9b00      	ldr	r3, [sp, #0]
 80083b4:	9a05      	ldr	r2, [sp, #20]
 80083b6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8008670 <__kernel_rem_pio2+0x300>
 80083ba:	eb03 0802 	add.w	r8, r3, r2
 80083be:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80083c0:	1aa7      	subs	r7, r4, r2
 80083c2:	ae20      	add	r6, sp, #128	@ 0x80
 80083c4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80083c8:	2500      	movs	r5, #0
 80083ca:	4545      	cmp	r5, r8
 80083cc:	dd13      	ble.n	80083f6 <__kernel_rem_pio2+0x86>
 80083ce:	9b06      	ldr	r3, [sp, #24]
 80083d0:	aa20      	add	r2, sp, #128	@ 0x80
 80083d2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80083d6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80083da:	f04f 0800 	mov.w	r8, #0
 80083de:	9b00      	ldr	r3, [sp, #0]
 80083e0:	4598      	cmp	r8, r3
 80083e2:	dc31      	bgt.n	8008448 <__kernel_rem_pio2+0xd8>
 80083e4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8008670 <__kernel_rem_pio2+0x300>
 80083e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80083ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80083f0:	462f      	mov	r7, r5
 80083f2:	2600      	movs	r6, #0
 80083f4:	e01b      	b.n	800842e <__kernel_rem_pio2+0xbe>
 80083f6:	42ef      	cmn	r7, r5
 80083f8:	d407      	bmi.n	800840a <__kernel_rem_pio2+0x9a>
 80083fa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80083fe:	f7f8 f8b1 	bl	8000564 <__aeabi_i2d>
 8008402:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008406:	3501      	adds	r5, #1
 8008408:	e7df      	b.n	80083ca <__kernel_rem_pio2+0x5a>
 800840a:	ec51 0b18 	vmov	r0, r1, d8
 800840e:	e7f8      	b.n	8008402 <__kernel_rem_pio2+0x92>
 8008410:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008414:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008418:	f7f8 f90e 	bl	8000638 <__aeabi_dmul>
 800841c:	4602      	mov	r2, r0
 800841e:	460b      	mov	r3, r1
 8008420:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008424:	f7f7 ff52 	bl	80002cc <__adddf3>
 8008428:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800842c:	3601      	adds	r6, #1
 800842e:	9b05      	ldr	r3, [sp, #20]
 8008430:	429e      	cmp	r6, r3
 8008432:	f1a7 0708 	sub.w	r7, r7, #8
 8008436:	ddeb      	ble.n	8008410 <__kernel_rem_pio2+0xa0>
 8008438:	ed9d 7b02 	vldr	d7, [sp, #8]
 800843c:	f108 0801 	add.w	r8, r8, #1
 8008440:	ecaa 7b02 	vstmia	sl!, {d7}
 8008444:	3508      	adds	r5, #8
 8008446:	e7ca      	b.n	80083de <__kernel_rem_pio2+0x6e>
 8008448:	9b00      	ldr	r3, [sp, #0]
 800844a:	f8dd 8000 	ldr.w	r8, [sp]
 800844e:	aa0c      	add	r2, sp, #48	@ 0x30
 8008450:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008454:	930a      	str	r3, [sp, #40]	@ 0x28
 8008456:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8008458:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800845c:	9309      	str	r3, [sp, #36]	@ 0x24
 800845e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8008462:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008464:	ab98      	add	r3, sp, #608	@ 0x260
 8008466:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800846a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800846e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008472:	ac0c      	add	r4, sp, #48	@ 0x30
 8008474:	ab70      	add	r3, sp, #448	@ 0x1c0
 8008476:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800847a:	46a1      	mov	r9, r4
 800847c:	46c2      	mov	sl, r8
 800847e:	f1ba 0f00 	cmp.w	sl, #0
 8008482:	f1a5 0508 	sub.w	r5, r5, #8
 8008486:	dc77      	bgt.n	8008578 <__kernel_rem_pio2+0x208>
 8008488:	4658      	mov	r0, fp
 800848a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800848e:	f000 fac7 	bl	8008a20 <scalbn>
 8008492:	ec57 6b10 	vmov	r6, r7, d0
 8008496:	2200      	movs	r2, #0
 8008498:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800849c:	4630      	mov	r0, r6
 800849e:	4639      	mov	r1, r7
 80084a0:	f7f8 f8ca 	bl	8000638 <__aeabi_dmul>
 80084a4:	ec41 0b10 	vmov	d0, r0, r1
 80084a8:	f000 fb3a 	bl	8008b20 <floor>
 80084ac:	4b75      	ldr	r3, [pc, #468]	@ (8008684 <__kernel_rem_pio2+0x314>)
 80084ae:	ec51 0b10 	vmov	r0, r1, d0
 80084b2:	2200      	movs	r2, #0
 80084b4:	f7f8 f8c0 	bl	8000638 <__aeabi_dmul>
 80084b8:	4602      	mov	r2, r0
 80084ba:	460b      	mov	r3, r1
 80084bc:	4630      	mov	r0, r6
 80084be:	4639      	mov	r1, r7
 80084c0:	f7f7 ff02 	bl	80002c8 <__aeabi_dsub>
 80084c4:	460f      	mov	r7, r1
 80084c6:	4606      	mov	r6, r0
 80084c8:	f7f8 fb66 	bl	8000b98 <__aeabi_d2iz>
 80084cc:	9002      	str	r0, [sp, #8]
 80084ce:	f7f8 f849 	bl	8000564 <__aeabi_i2d>
 80084d2:	4602      	mov	r2, r0
 80084d4:	460b      	mov	r3, r1
 80084d6:	4630      	mov	r0, r6
 80084d8:	4639      	mov	r1, r7
 80084da:	f7f7 fef5 	bl	80002c8 <__aeabi_dsub>
 80084de:	f1bb 0f00 	cmp.w	fp, #0
 80084e2:	4606      	mov	r6, r0
 80084e4:	460f      	mov	r7, r1
 80084e6:	dd6c      	ble.n	80085c2 <__kernel_rem_pio2+0x252>
 80084e8:	f108 31ff 	add.w	r1, r8, #4294967295
 80084ec:	ab0c      	add	r3, sp, #48	@ 0x30
 80084ee:	9d02      	ldr	r5, [sp, #8]
 80084f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80084f4:	f1cb 0018 	rsb	r0, fp, #24
 80084f8:	fa43 f200 	asr.w	r2, r3, r0
 80084fc:	4415      	add	r5, r2
 80084fe:	4082      	lsls	r2, r0
 8008500:	1a9b      	subs	r3, r3, r2
 8008502:	aa0c      	add	r2, sp, #48	@ 0x30
 8008504:	9502      	str	r5, [sp, #8]
 8008506:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800850a:	f1cb 0217 	rsb	r2, fp, #23
 800850e:	fa43 f902 	asr.w	r9, r3, r2
 8008512:	f1b9 0f00 	cmp.w	r9, #0
 8008516:	dd64      	ble.n	80085e2 <__kernel_rem_pio2+0x272>
 8008518:	9b02      	ldr	r3, [sp, #8]
 800851a:	2200      	movs	r2, #0
 800851c:	3301      	adds	r3, #1
 800851e:	9302      	str	r3, [sp, #8]
 8008520:	4615      	mov	r5, r2
 8008522:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8008526:	4590      	cmp	r8, r2
 8008528:	f300 80b8 	bgt.w	800869c <__kernel_rem_pio2+0x32c>
 800852c:	f1bb 0f00 	cmp.w	fp, #0
 8008530:	dd07      	ble.n	8008542 <__kernel_rem_pio2+0x1d2>
 8008532:	f1bb 0f01 	cmp.w	fp, #1
 8008536:	f000 80bf 	beq.w	80086b8 <__kernel_rem_pio2+0x348>
 800853a:	f1bb 0f02 	cmp.w	fp, #2
 800853e:	f000 80c6 	beq.w	80086ce <__kernel_rem_pio2+0x35e>
 8008542:	f1b9 0f02 	cmp.w	r9, #2
 8008546:	d14c      	bne.n	80085e2 <__kernel_rem_pio2+0x272>
 8008548:	4632      	mov	r2, r6
 800854a:	463b      	mov	r3, r7
 800854c:	494e      	ldr	r1, [pc, #312]	@ (8008688 <__kernel_rem_pio2+0x318>)
 800854e:	2000      	movs	r0, #0
 8008550:	f7f7 feba 	bl	80002c8 <__aeabi_dsub>
 8008554:	4606      	mov	r6, r0
 8008556:	460f      	mov	r7, r1
 8008558:	2d00      	cmp	r5, #0
 800855a:	d042      	beq.n	80085e2 <__kernel_rem_pio2+0x272>
 800855c:	4658      	mov	r0, fp
 800855e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8008678 <__kernel_rem_pio2+0x308>
 8008562:	f000 fa5d 	bl	8008a20 <scalbn>
 8008566:	4630      	mov	r0, r6
 8008568:	4639      	mov	r1, r7
 800856a:	ec53 2b10 	vmov	r2, r3, d0
 800856e:	f7f7 feab 	bl	80002c8 <__aeabi_dsub>
 8008572:	4606      	mov	r6, r0
 8008574:	460f      	mov	r7, r1
 8008576:	e034      	b.n	80085e2 <__kernel_rem_pio2+0x272>
 8008578:	4b44      	ldr	r3, [pc, #272]	@ (800868c <__kernel_rem_pio2+0x31c>)
 800857a:	2200      	movs	r2, #0
 800857c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008580:	f7f8 f85a 	bl	8000638 <__aeabi_dmul>
 8008584:	f7f8 fb08 	bl	8000b98 <__aeabi_d2iz>
 8008588:	f7f7 ffec 	bl	8000564 <__aeabi_i2d>
 800858c:	4b40      	ldr	r3, [pc, #256]	@ (8008690 <__kernel_rem_pio2+0x320>)
 800858e:	2200      	movs	r2, #0
 8008590:	4606      	mov	r6, r0
 8008592:	460f      	mov	r7, r1
 8008594:	f7f8 f850 	bl	8000638 <__aeabi_dmul>
 8008598:	4602      	mov	r2, r0
 800859a:	460b      	mov	r3, r1
 800859c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085a0:	f7f7 fe92 	bl	80002c8 <__aeabi_dsub>
 80085a4:	f7f8 faf8 	bl	8000b98 <__aeabi_d2iz>
 80085a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80085ac:	f849 0b04 	str.w	r0, [r9], #4
 80085b0:	4639      	mov	r1, r7
 80085b2:	4630      	mov	r0, r6
 80085b4:	f7f7 fe8a 	bl	80002cc <__adddf3>
 80085b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085c0:	e75d      	b.n	800847e <__kernel_rem_pio2+0x10e>
 80085c2:	d107      	bne.n	80085d4 <__kernel_rem_pio2+0x264>
 80085c4:	f108 33ff 	add.w	r3, r8, #4294967295
 80085c8:	aa0c      	add	r2, sp, #48	@ 0x30
 80085ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085ce:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80085d2:	e79e      	b.n	8008512 <__kernel_rem_pio2+0x1a2>
 80085d4:	4b2f      	ldr	r3, [pc, #188]	@ (8008694 <__kernel_rem_pio2+0x324>)
 80085d6:	2200      	movs	r2, #0
 80085d8:	f7f8 fab4 	bl	8000b44 <__aeabi_dcmpge>
 80085dc:	2800      	cmp	r0, #0
 80085de:	d143      	bne.n	8008668 <__kernel_rem_pio2+0x2f8>
 80085e0:	4681      	mov	r9, r0
 80085e2:	2200      	movs	r2, #0
 80085e4:	2300      	movs	r3, #0
 80085e6:	4630      	mov	r0, r6
 80085e8:	4639      	mov	r1, r7
 80085ea:	f7f8 fa8d 	bl	8000b08 <__aeabi_dcmpeq>
 80085ee:	2800      	cmp	r0, #0
 80085f0:	f000 80bf 	beq.w	8008772 <__kernel_rem_pio2+0x402>
 80085f4:	f108 33ff 	add.w	r3, r8, #4294967295
 80085f8:	2200      	movs	r2, #0
 80085fa:	9900      	ldr	r1, [sp, #0]
 80085fc:	428b      	cmp	r3, r1
 80085fe:	da6e      	bge.n	80086de <__kernel_rem_pio2+0x36e>
 8008600:	2a00      	cmp	r2, #0
 8008602:	f000 8089 	beq.w	8008718 <__kernel_rem_pio2+0x3a8>
 8008606:	f108 38ff 	add.w	r8, r8, #4294967295
 800860a:	ab0c      	add	r3, sp, #48	@ 0x30
 800860c:	f1ab 0b18 	sub.w	fp, fp, #24
 8008610:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d0f6      	beq.n	8008606 <__kernel_rem_pio2+0x296>
 8008618:	4658      	mov	r0, fp
 800861a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8008678 <__kernel_rem_pio2+0x308>
 800861e:	f000 f9ff 	bl	8008a20 <scalbn>
 8008622:	f108 0301 	add.w	r3, r8, #1
 8008626:	00da      	lsls	r2, r3, #3
 8008628:	9205      	str	r2, [sp, #20]
 800862a:	ec55 4b10 	vmov	r4, r5, d0
 800862e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8008630:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800868c <__kernel_rem_pio2+0x31c>
 8008634:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8008638:	4646      	mov	r6, r8
 800863a:	f04f 0a00 	mov.w	sl, #0
 800863e:	2e00      	cmp	r6, #0
 8008640:	f280 80cf 	bge.w	80087e2 <__kernel_rem_pio2+0x472>
 8008644:	4644      	mov	r4, r8
 8008646:	2c00      	cmp	r4, #0
 8008648:	f2c0 80fd 	blt.w	8008846 <__kernel_rem_pio2+0x4d6>
 800864c:	4b12      	ldr	r3, [pc, #72]	@ (8008698 <__kernel_rem_pio2+0x328>)
 800864e:	461f      	mov	r7, r3
 8008650:	ab70      	add	r3, sp, #448	@ 0x1c0
 8008652:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008656:	9306      	str	r3, [sp, #24]
 8008658:	f04f 0a00 	mov.w	sl, #0
 800865c:	f04f 0b00 	mov.w	fp, #0
 8008660:	2600      	movs	r6, #0
 8008662:	eba8 0504 	sub.w	r5, r8, r4
 8008666:	e0e2      	b.n	800882e <__kernel_rem_pio2+0x4be>
 8008668:	f04f 0902 	mov.w	r9, #2
 800866c:	e754      	b.n	8008518 <__kernel_rem_pio2+0x1a8>
 800866e:	bf00      	nop
	...
 800867c:	3ff00000 	.word	0x3ff00000
 8008680:	08009418 	.word	0x08009418
 8008684:	40200000 	.word	0x40200000
 8008688:	3ff00000 	.word	0x3ff00000
 800868c:	3e700000 	.word	0x3e700000
 8008690:	41700000 	.word	0x41700000
 8008694:	3fe00000 	.word	0x3fe00000
 8008698:	080093d8 	.word	0x080093d8
 800869c:	f854 3b04 	ldr.w	r3, [r4], #4
 80086a0:	b945      	cbnz	r5, 80086b4 <__kernel_rem_pio2+0x344>
 80086a2:	b123      	cbz	r3, 80086ae <__kernel_rem_pio2+0x33e>
 80086a4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80086a8:	f844 3c04 	str.w	r3, [r4, #-4]
 80086ac:	2301      	movs	r3, #1
 80086ae:	3201      	adds	r2, #1
 80086b0:	461d      	mov	r5, r3
 80086b2:	e738      	b.n	8008526 <__kernel_rem_pio2+0x1b6>
 80086b4:	1acb      	subs	r3, r1, r3
 80086b6:	e7f7      	b.n	80086a8 <__kernel_rem_pio2+0x338>
 80086b8:	f108 32ff 	add.w	r2, r8, #4294967295
 80086bc:	ab0c      	add	r3, sp, #48	@ 0x30
 80086be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086c2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80086c6:	a90c      	add	r1, sp, #48	@ 0x30
 80086c8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80086cc:	e739      	b.n	8008542 <__kernel_rem_pio2+0x1d2>
 80086ce:	f108 32ff 	add.w	r2, r8, #4294967295
 80086d2:	ab0c      	add	r3, sp, #48	@ 0x30
 80086d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086d8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80086dc:	e7f3      	b.n	80086c6 <__kernel_rem_pio2+0x356>
 80086de:	a90c      	add	r1, sp, #48	@ 0x30
 80086e0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80086e4:	3b01      	subs	r3, #1
 80086e6:	430a      	orrs	r2, r1
 80086e8:	e787      	b.n	80085fa <__kernel_rem_pio2+0x28a>
 80086ea:	3401      	adds	r4, #1
 80086ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80086f0:	2a00      	cmp	r2, #0
 80086f2:	d0fa      	beq.n	80086ea <__kernel_rem_pio2+0x37a>
 80086f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086f6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80086fa:	eb0d 0503 	add.w	r5, sp, r3
 80086fe:	9b06      	ldr	r3, [sp, #24]
 8008700:	aa20      	add	r2, sp, #128	@ 0x80
 8008702:	4443      	add	r3, r8
 8008704:	f108 0701 	add.w	r7, r8, #1
 8008708:	3d98      	subs	r5, #152	@ 0x98
 800870a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800870e:	4444      	add	r4, r8
 8008710:	42bc      	cmp	r4, r7
 8008712:	da04      	bge.n	800871e <__kernel_rem_pio2+0x3ae>
 8008714:	46a0      	mov	r8, r4
 8008716:	e6a2      	b.n	800845e <__kernel_rem_pio2+0xee>
 8008718:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800871a:	2401      	movs	r4, #1
 800871c:	e7e6      	b.n	80086ec <__kernel_rem_pio2+0x37c>
 800871e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008720:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8008724:	f7f7 ff1e 	bl	8000564 <__aeabi_i2d>
 8008728:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80089f0 <__kernel_rem_pio2+0x680>
 800872c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008730:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008734:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008738:	46b2      	mov	sl, r6
 800873a:	f04f 0800 	mov.w	r8, #0
 800873e:	9b05      	ldr	r3, [sp, #20]
 8008740:	4598      	cmp	r8, r3
 8008742:	dd05      	ble.n	8008750 <__kernel_rem_pio2+0x3e0>
 8008744:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008748:	3701      	adds	r7, #1
 800874a:	eca5 7b02 	vstmia	r5!, {d7}
 800874e:	e7df      	b.n	8008710 <__kernel_rem_pio2+0x3a0>
 8008750:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8008754:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008758:	f7f7 ff6e 	bl	8000638 <__aeabi_dmul>
 800875c:	4602      	mov	r2, r0
 800875e:	460b      	mov	r3, r1
 8008760:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008764:	f7f7 fdb2 	bl	80002cc <__adddf3>
 8008768:	f108 0801 	add.w	r8, r8, #1
 800876c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008770:	e7e5      	b.n	800873e <__kernel_rem_pio2+0x3ce>
 8008772:	f1cb 0000 	rsb	r0, fp, #0
 8008776:	ec47 6b10 	vmov	d0, r6, r7
 800877a:	f000 f951 	bl	8008a20 <scalbn>
 800877e:	ec55 4b10 	vmov	r4, r5, d0
 8008782:	4b9d      	ldr	r3, [pc, #628]	@ (80089f8 <__kernel_rem_pio2+0x688>)
 8008784:	2200      	movs	r2, #0
 8008786:	4620      	mov	r0, r4
 8008788:	4629      	mov	r1, r5
 800878a:	f7f8 f9db 	bl	8000b44 <__aeabi_dcmpge>
 800878e:	b300      	cbz	r0, 80087d2 <__kernel_rem_pio2+0x462>
 8008790:	4b9a      	ldr	r3, [pc, #616]	@ (80089fc <__kernel_rem_pio2+0x68c>)
 8008792:	2200      	movs	r2, #0
 8008794:	4620      	mov	r0, r4
 8008796:	4629      	mov	r1, r5
 8008798:	f7f7 ff4e 	bl	8000638 <__aeabi_dmul>
 800879c:	f7f8 f9fc 	bl	8000b98 <__aeabi_d2iz>
 80087a0:	4606      	mov	r6, r0
 80087a2:	f7f7 fedf 	bl	8000564 <__aeabi_i2d>
 80087a6:	4b94      	ldr	r3, [pc, #592]	@ (80089f8 <__kernel_rem_pio2+0x688>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	f7f7 ff45 	bl	8000638 <__aeabi_dmul>
 80087ae:	460b      	mov	r3, r1
 80087b0:	4602      	mov	r2, r0
 80087b2:	4629      	mov	r1, r5
 80087b4:	4620      	mov	r0, r4
 80087b6:	f7f7 fd87 	bl	80002c8 <__aeabi_dsub>
 80087ba:	f7f8 f9ed 	bl	8000b98 <__aeabi_d2iz>
 80087be:	ab0c      	add	r3, sp, #48	@ 0x30
 80087c0:	f10b 0b18 	add.w	fp, fp, #24
 80087c4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80087c8:	f108 0801 	add.w	r8, r8, #1
 80087cc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80087d0:	e722      	b.n	8008618 <__kernel_rem_pio2+0x2a8>
 80087d2:	4620      	mov	r0, r4
 80087d4:	4629      	mov	r1, r5
 80087d6:	f7f8 f9df 	bl	8000b98 <__aeabi_d2iz>
 80087da:	ab0c      	add	r3, sp, #48	@ 0x30
 80087dc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80087e0:	e71a      	b.n	8008618 <__kernel_rem_pio2+0x2a8>
 80087e2:	ab0c      	add	r3, sp, #48	@ 0x30
 80087e4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80087e8:	f7f7 febc 	bl	8000564 <__aeabi_i2d>
 80087ec:	4622      	mov	r2, r4
 80087ee:	462b      	mov	r3, r5
 80087f0:	f7f7 ff22 	bl	8000638 <__aeabi_dmul>
 80087f4:	4652      	mov	r2, sl
 80087f6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80087fa:	465b      	mov	r3, fp
 80087fc:	4620      	mov	r0, r4
 80087fe:	4629      	mov	r1, r5
 8008800:	f7f7 ff1a 	bl	8000638 <__aeabi_dmul>
 8008804:	3e01      	subs	r6, #1
 8008806:	4604      	mov	r4, r0
 8008808:	460d      	mov	r5, r1
 800880a:	e718      	b.n	800863e <__kernel_rem_pio2+0x2ce>
 800880c:	9906      	ldr	r1, [sp, #24]
 800880e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8008812:	9106      	str	r1, [sp, #24]
 8008814:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8008818:	f7f7 ff0e 	bl	8000638 <__aeabi_dmul>
 800881c:	4602      	mov	r2, r0
 800881e:	460b      	mov	r3, r1
 8008820:	4650      	mov	r0, sl
 8008822:	4659      	mov	r1, fp
 8008824:	f7f7 fd52 	bl	80002cc <__adddf3>
 8008828:	3601      	adds	r6, #1
 800882a:	4682      	mov	sl, r0
 800882c:	468b      	mov	fp, r1
 800882e:	9b00      	ldr	r3, [sp, #0]
 8008830:	429e      	cmp	r6, r3
 8008832:	dc01      	bgt.n	8008838 <__kernel_rem_pio2+0x4c8>
 8008834:	42b5      	cmp	r5, r6
 8008836:	dae9      	bge.n	800880c <__kernel_rem_pio2+0x49c>
 8008838:	ab48      	add	r3, sp, #288	@ 0x120
 800883a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800883e:	e9c5 ab00 	strd	sl, fp, [r5]
 8008842:	3c01      	subs	r4, #1
 8008844:	e6ff      	b.n	8008646 <__kernel_rem_pio2+0x2d6>
 8008846:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8008848:	2b02      	cmp	r3, #2
 800884a:	dc0b      	bgt.n	8008864 <__kernel_rem_pio2+0x4f4>
 800884c:	2b00      	cmp	r3, #0
 800884e:	dc39      	bgt.n	80088c4 <__kernel_rem_pio2+0x554>
 8008850:	d05d      	beq.n	800890e <__kernel_rem_pio2+0x59e>
 8008852:	9b02      	ldr	r3, [sp, #8]
 8008854:	f003 0007 	and.w	r0, r3, #7
 8008858:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800885c:	ecbd 8b02 	vpop	{d8}
 8008860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008864:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8008866:	2b03      	cmp	r3, #3
 8008868:	d1f3      	bne.n	8008852 <__kernel_rem_pio2+0x4e2>
 800886a:	9b05      	ldr	r3, [sp, #20]
 800886c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008870:	eb0d 0403 	add.w	r4, sp, r3
 8008874:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8008878:	4625      	mov	r5, r4
 800887a:	46c2      	mov	sl, r8
 800887c:	f1ba 0f00 	cmp.w	sl, #0
 8008880:	f1a5 0508 	sub.w	r5, r5, #8
 8008884:	dc6b      	bgt.n	800895e <__kernel_rem_pio2+0x5ee>
 8008886:	4645      	mov	r5, r8
 8008888:	2d01      	cmp	r5, #1
 800888a:	f1a4 0408 	sub.w	r4, r4, #8
 800888e:	f300 8087 	bgt.w	80089a0 <__kernel_rem_pio2+0x630>
 8008892:	9c05      	ldr	r4, [sp, #20]
 8008894:	ab48      	add	r3, sp, #288	@ 0x120
 8008896:	441c      	add	r4, r3
 8008898:	2000      	movs	r0, #0
 800889a:	2100      	movs	r1, #0
 800889c:	f1b8 0f01 	cmp.w	r8, #1
 80088a0:	f300 809c 	bgt.w	80089dc <__kernel_rem_pio2+0x66c>
 80088a4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80088a8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80088ac:	f1b9 0f00 	cmp.w	r9, #0
 80088b0:	f040 80a6 	bne.w	8008a00 <__kernel_rem_pio2+0x690>
 80088b4:	9b04      	ldr	r3, [sp, #16]
 80088b6:	e9c3 7800 	strd	r7, r8, [r3]
 80088ba:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80088be:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80088c2:	e7c6      	b.n	8008852 <__kernel_rem_pio2+0x4e2>
 80088c4:	9d05      	ldr	r5, [sp, #20]
 80088c6:	ab48      	add	r3, sp, #288	@ 0x120
 80088c8:	441d      	add	r5, r3
 80088ca:	4644      	mov	r4, r8
 80088cc:	2000      	movs	r0, #0
 80088ce:	2100      	movs	r1, #0
 80088d0:	2c00      	cmp	r4, #0
 80088d2:	da35      	bge.n	8008940 <__kernel_rem_pio2+0x5d0>
 80088d4:	f1b9 0f00 	cmp.w	r9, #0
 80088d8:	d038      	beq.n	800894c <__kernel_rem_pio2+0x5dc>
 80088da:	4602      	mov	r2, r0
 80088dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80088e0:	9c04      	ldr	r4, [sp, #16]
 80088e2:	e9c4 2300 	strd	r2, r3, [r4]
 80088e6:	4602      	mov	r2, r0
 80088e8:	460b      	mov	r3, r1
 80088ea:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80088ee:	f7f7 fceb 	bl	80002c8 <__aeabi_dsub>
 80088f2:	ad4a      	add	r5, sp, #296	@ 0x128
 80088f4:	2401      	movs	r4, #1
 80088f6:	45a0      	cmp	r8, r4
 80088f8:	da2b      	bge.n	8008952 <__kernel_rem_pio2+0x5e2>
 80088fa:	f1b9 0f00 	cmp.w	r9, #0
 80088fe:	d002      	beq.n	8008906 <__kernel_rem_pio2+0x596>
 8008900:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008904:	4619      	mov	r1, r3
 8008906:	9b04      	ldr	r3, [sp, #16]
 8008908:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800890c:	e7a1      	b.n	8008852 <__kernel_rem_pio2+0x4e2>
 800890e:	9c05      	ldr	r4, [sp, #20]
 8008910:	ab48      	add	r3, sp, #288	@ 0x120
 8008912:	441c      	add	r4, r3
 8008914:	2000      	movs	r0, #0
 8008916:	2100      	movs	r1, #0
 8008918:	f1b8 0f00 	cmp.w	r8, #0
 800891c:	da09      	bge.n	8008932 <__kernel_rem_pio2+0x5c2>
 800891e:	f1b9 0f00 	cmp.w	r9, #0
 8008922:	d002      	beq.n	800892a <__kernel_rem_pio2+0x5ba>
 8008924:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008928:	4619      	mov	r1, r3
 800892a:	9b04      	ldr	r3, [sp, #16]
 800892c:	e9c3 0100 	strd	r0, r1, [r3]
 8008930:	e78f      	b.n	8008852 <__kernel_rem_pio2+0x4e2>
 8008932:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008936:	f7f7 fcc9 	bl	80002cc <__adddf3>
 800893a:	f108 38ff 	add.w	r8, r8, #4294967295
 800893e:	e7eb      	b.n	8008918 <__kernel_rem_pio2+0x5a8>
 8008940:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8008944:	f7f7 fcc2 	bl	80002cc <__adddf3>
 8008948:	3c01      	subs	r4, #1
 800894a:	e7c1      	b.n	80088d0 <__kernel_rem_pio2+0x560>
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	e7c6      	b.n	80088e0 <__kernel_rem_pio2+0x570>
 8008952:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8008956:	f7f7 fcb9 	bl	80002cc <__adddf3>
 800895a:	3401      	adds	r4, #1
 800895c:	e7cb      	b.n	80088f6 <__kernel_rem_pio2+0x586>
 800895e:	ed95 7b00 	vldr	d7, [r5]
 8008962:	ed8d 7b00 	vstr	d7, [sp]
 8008966:	ed95 7b02 	vldr	d7, [r5, #8]
 800896a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800896e:	ec53 2b17 	vmov	r2, r3, d7
 8008972:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008976:	f7f7 fca9 	bl	80002cc <__adddf3>
 800897a:	4602      	mov	r2, r0
 800897c:	460b      	mov	r3, r1
 800897e:	4606      	mov	r6, r0
 8008980:	460f      	mov	r7, r1
 8008982:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008986:	f7f7 fc9f 	bl	80002c8 <__aeabi_dsub>
 800898a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800898e:	f7f7 fc9d 	bl	80002cc <__adddf3>
 8008992:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008996:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800899a:	e9c5 6700 	strd	r6, r7, [r5]
 800899e:	e76d      	b.n	800887c <__kernel_rem_pio2+0x50c>
 80089a0:	ed94 7b00 	vldr	d7, [r4]
 80089a4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80089a8:	ec51 0b17 	vmov	r0, r1, d7
 80089ac:	4652      	mov	r2, sl
 80089ae:	465b      	mov	r3, fp
 80089b0:	ed8d 7b00 	vstr	d7, [sp]
 80089b4:	f7f7 fc8a 	bl	80002cc <__adddf3>
 80089b8:	4602      	mov	r2, r0
 80089ba:	460b      	mov	r3, r1
 80089bc:	4606      	mov	r6, r0
 80089be:	460f      	mov	r7, r1
 80089c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089c4:	f7f7 fc80 	bl	80002c8 <__aeabi_dsub>
 80089c8:	4652      	mov	r2, sl
 80089ca:	465b      	mov	r3, fp
 80089cc:	f7f7 fc7e 	bl	80002cc <__adddf3>
 80089d0:	3d01      	subs	r5, #1
 80089d2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80089d6:	e9c4 6700 	strd	r6, r7, [r4]
 80089da:	e755      	b.n	8008888 <__kernel_rem_pio2+0x518>
 80089dc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80089e0:	f7f7 fc74 	bl	80002cc <__adddf3>
 80089e4:	f108 38ff 	add.w	r8, r8, #4294967295
 80089e8:	e758      	b.n	800889c <__kernel_rem_pio2+0x52c>
 80089ea:	bf00      	nop
 80089ec:	f3af 8000 	nop.w
	...
 80089f8:	41700000 	.word	0x41700000
 80089fc:	3e700000 	.word	0x3e700000
 8008a00:	9b04      	ldr	r3, [sp, #16]
 8008a02:	9a04      	ldr	r2, [sp, #16]
 8008a04:	601f      	str	r7, [r3, #0]
 8008a06:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8008a0a:	605c      	str	r4, [r3, #4]
 8008a0c:	609d      	str	r5, [r3, #8]
 8008a0e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008a12:	60d3      	str	r3, [r2, #12]
 8008a14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008a18:	6110      	str	r0, [r2, #16]
 8008a1a:	6153      	str	r3, [r2, #20]
 8008a1c:	e719      	b.n	8008852 <__kernel_rem_pio2+0x4e2>
 8008a1e:	bf00      	nop

08008a20 <scalbn>:
 8008a20:	b570      	push	{r4, r5, r6, lr}
 8008a22:	ec55 4b10 	vmov	r4, r5, d0
 8008a26:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008a2a:	4606      	mov	r6, r0
 8008a2c:	462b      	mov	r3, r5
 8008a2e:	b991      	cbnz	r1, 8008a56 <scalbn+0x36>
 8008a30:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008a34:	4323      	orrs	r3, r4
 8008a36:	d03d      	beq.n	8008ab4 <scalbn+0x94>
 8008a38:	4b35      	ldr	r3, [pc, #212]	@ (8008b10 <scalbn+0xf0>)
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f7f7 fdfa 	bl	8000638 <__aeabi_dmul>
 8008a44:	4b33      	ldr	r3, [pc, #204]	@ (8008b14 <scalbn+0xf4>)
 8008a46:	429e      	cmp	r6, r3
 8008a48:	4604      	mov	r4, r0
 8008a4a:	460d      	mov	r5, r1
 8008a4c:	da0f      	bge.n	8008a6e <scalbn+0x4e>
 8008a4e:	a328      	add	r3, pc, #160	@ (adr r3, 8008af0 <scalbn+0xd0>)
 8008a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a54:	e01e      	b.n	8008a94 <scalbn+0x74>
 8008a56:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008a5a:	4291      	cmp	r1, r2
 8008a5c:	d10b      	bne.n	8008a76 <scalbn+0x56>
 8008a5e:	4622      	mov	r2, r4
 8008a60:	4620      	mov	r0, r4
 8008a62:	4629      	mov	r1, r5
 8008a64:	f7f7 fc32 	bl	80002cc <__adddf3>
 8008a68:	4604      	mov	r4, r0
 8008a6a:	460d      	mov	r5, r1
 8008a6c:	e022      	b.n	8008ab4 <scalbn+0x94>
 8008a6e:	460b      	mov	r3, r1
 8008a70:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008a74:	3936      	subs	r1, #54	@ 0x36
 8008a76:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8008a7a:	4296      	cmp	r6, r2
 8008a7c:	dd0d      	ble.n	8008a9a <scalbn+0x7a>
 8008a7e:	2d00      	cmp	r5, #0
 8008a80:	a11d      	add	r1, pc, #116	@ (adr r1, 8008af8 <scalbn+0xd8>)
 8008a82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a86:	da02      	bge.n	8008a8e <scalbn+0x6e>
 8008a88:	a11d      	add	r1, pc, #116	@ (adr r1, 8008b00 <scalbn+0xe0>)
 8008a8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a8e:	a31a      	add	r3, pc, #104	@ (adr r3, 8008af8 <scalbn+0xd8>)
 8008a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a94:	f7f7 fdd0 	bl	8000638 <__aeabi_dmul>
 8008a98:	e7e6      	b.n	8008a68 <scalbn+0x48>
 8008a9a:	1872      	adds	r2, r6, r1
 8008a9c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008aa0:	428a      	cmp	r2, r1
 8008aa2:	dcec      	bgt.n	8008a7e <scalbn+0x5e>
 8008aa4:	2a00      	cmp	r2, #0
 8008aa6:	dd08      	ble.n	8008aba <scalbn+0x9a>
 8008aa8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008aac:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008ab0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008ab4:	ec45 4b10 	vmov	d0, r4, r5
 8008ab8:	bd70      	pop	{r4, r5, r6, pc}
 8008aba:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008abe:	da08      	bge.n	8008ad2 <scalbn+0xb2>
 8008ac0:	2d00      	cmp	r5, #0
 8008ac2:	a10b      	add	r1, pc, #44	@ (adr r1, 8008af0 <scalbn+0xd0>)
 8008ac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ac8:	dac1      	bge.n	8008a4e <scalbn+0x2e>
 8008aca:	a10f      	add	r1, pc, #60	@ (adr r1, 8008b08 <scalbn+0xe8>)
 8008acc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ad0:	e7bd      	b.n	8008a4e <scalbn+0x2e>
 8008ad2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008ad6:	3236      	adds	r2, #54	@ 0x36
 8008ad8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008adc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8008b18 <scalbn+0xf8>)
 8008ae4:	4629      	mov	r1, r5
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	e7d4      	b.n	8008a94 <scalbn+0x74>
 8008aea:	bf00      	nop
 8008aec:	f3af 8000 	nop.w
 8008af0:	c2f8f359 	.word	0xc2f8f359
 8008af4:	01a56e1f 	.word	0x01a56e1f
 8008af8:	8800759c 	.word	0x8800759c
 8008afc:	7e37e43c 	.word	0x7e37e43c
 8008b00:	8800759c 	.word	0x8800759c
 8008b04:	fe37e43c 	.word	0xfe37e43c
 8008b08:	c2f8f359 	.word	0xc2f8f359
 8008b0c:	81a56e1f 	.word	0x81a56e1f
 8008b10:	43500000 	.word	0x43500000
 8008b14:	ffff3cb0 	.word	0xffff3cb0
 8008b18:	3c900000 	.word	0x3c900000
 8008b1c:	00000000 	.word	0x00000000

08008b20 <floor>:
 8008b20:	ec51 0b10 	vmov	r0, r1, d0
 8008b24:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b2c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8008b30:	2e13      	cmp	r6, #19
 8008b32:	460c      	mov	r4, r1
 8008b34:	4605      	mov	r5, r0
 8008b36:	4680      	mov	r8, r0
 8008b38:	dc34      	bgt.n	8008ba4 <floor+0x84>
 8008b3a:	2e00      	cmp	r6, #0
 8008b3c:	da17      	bge.n	8008b6e <floor+0x4e>
 8008b3e:	a332      	add	r3, pc, #200	@ (adr r3, 8008c08 <floor+0xe8>)
 8008b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b44:	f7f7 fbc2 	bl	80002cc <__adddf3>
 8008b48:	2200      	movs	r2, #0
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	f7f8 f804 	bl	8000b58 <__aeabi_dcmpgt>
 8008b50:	b150      	cbz	r0, 8008b68 <floor+0x48>
 8008b52:	2c00      	cmp	r4, #0
 8008b54:	da55      	bge.n	8008c02 <floor+0xe2>
 8008b56:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8008b5a:	432c      	orrs	r4, r5
 8008b5c:	2500      	movs	r5, #0
 8008b5e:	42ac      	cmp	r4, r5
 8008b60:	4c2b      	ldr	r4, [pc, #172]	@ (8008c10 <floor+0xf0>)
 8008b62:	bf08      	it	eq
 8008b64:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8008b68:	4621      	mov	r1, r4
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	e023      	b.n	8008bb6 <floor+0x96>
 8008b6e:	4f29      	ldr	r7, [pc, #164]	@ (8008c14 <floor+0xf4>)
 8008b70:	4137      	asrs	r7, r6
 8008b72:	ea01 0307 	and.w	r3, r1, r7
 8008b76:	4303      	orrs	r3, r0
 8008b78:	d01d      	beq.n	8008bb6 <floor+0x96>
 8008b7a:	a323      	add	r3, pc, #140	@ (adr r3, 8008c08 <floor+0xe8>)
 8008b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b80:	f7f7 fba4 	bl	80002cc <__adddf3>
 8008b84:	2200      	movs	r2, #0
 8008b86:	2300      	movs	r3, #0
 8008b88:	f7f7 ffe6 	bl	8000b58 <__aeabi_dcmpgt>
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	d0eb      	beq.n	8008b68 <floor+0x48>
 8008b90:	2c00      	cmp	r4, #0
 8008b92:	bfbe      	ittt	lt
 8008b94:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8008b98:	4133      	asrlt	r3, r6
 8008b9a:	18e4      	addlt	r4, r4, r3
 8008b9c:	ea24 0407 	bic.w	r4, r4, r7
 8008ba0:	2500      	movs	r5, #0
 8008ba2:	e7e1      	b.n	8008b68 <floor+0x48>
 8008ba4:	2e33      	cmp	r6, #51	@ 0x33
 8008ba6:	dd0a      	ble.n	8008bbe <floor+0x9e>
 8008ba8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8008bac:	d103      	bne.n	8008bb6 <floor+0x96>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	f7f7 fb8b 	bl	80002cc <__adddf3>
 8008bb6:	ec41 0b10 	vmov	d0, r0, r1
 8008bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bbe:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8008bc2:	f04f 37ff 	mov.w	r7, #4294967295
 8008bc6:	40df      	lsrs	r7, r3
 8008bc8:	4207      	tst	r7, r0
 8008bca:	d0f4      	beq.n	8008bb6 <floor+0x96>
 8008bcc:	a30e      	add	r3, pc, #56	@ (adr r3, 8008c08 <floor+0xe8>)
 8008bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd2:	f7f7 fb7b 	bl	80002cc <__adddf3>
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	2300      	movs	r3, #0
 8008bda:	f7f7 ffbd 	bl	8000b58 <__aeabi_dcmpgt>
 8008bde:	2800      	cmp	r0, #0
 8008be0:	d0c2      	beq.n	8008b68 <floor+0x48>
 8008be2:	2c00      	cmp	r4, #0
 8008be4:	da0a      	bge.n	8008bfc <floor+0xdc>
 8008be6:	2e14      	cmp	r6, #20
 8008be8:	d101      	bne.n	8008bee <floor+0xce>
 8008bea:	3401      	adds	r4, #1
 8008bec:	e006      	b.n	8008bfc <floor+0xdc>
 8008bee:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	40b3      	lsls	r3, r6
 8008bf6:	441d      	add	r5, r3
 8008bf8:	4545      	cmp	r5, r8
 8008bfa:	d3f6      	bcc.n	8008bea <floor+0xca>
 8008bfc:	ea25 0507 	bic.w	r5, r5, r7
 8008c00:	e7b2      	b.n	8008b68 <floor+0x48>
 8008c02:	2500      	movs	r5, #0
 8008c04:	462c      	mov	r4, r5
 8008c06:	e7af      	b.n	8008b68 <floor+0x48>
 8008c08:	8800759c 	.word	0x8800759c
 8008c0c:	7e37e43c 	.word	0x7e37e43c
 8008c10:	bff00000 	.word	0xbff00000
 8008c14:	000fffff 	.word	0x000fffff

08008c18 <_init>:
 8008c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1a:	bf00      	nop
 8008c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c1e:	bc08      	pop	{r3}
 8008c20:	469e      	mov	lr, r3
 8008c22:	4770      	bx	lr

08008c24 <_fini>:
 8008c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c26:	bf00      	nop
 8008c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c2a:	bc08      	pop	{r3}
 8008c2c:	469e      	mov	lr, r3
 8008c2e:	4770      	bx	lr
